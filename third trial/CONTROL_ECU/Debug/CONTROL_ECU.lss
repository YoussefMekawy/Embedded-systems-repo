
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002676  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002676  0000270a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800078  00800078  00002722  2**0
                  ALLOC
  3 .stab         00002a0c  00000000  00000000  00002724  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000133c  00000000  00000000  00005130  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000646c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000065ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000671c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008365  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a000  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a160  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a3ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 39 13 	jmp	0x2672	; 0x2672 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 15 13 	jmp	0x262a	; 0x262a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 15 13 	jmp	0x262a	; 0x262a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 25 13 	jmp	0x264a	; 0x264a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 * activate buzzer will activate the buzzer for 1 minute using the timer
 *
 *******************************************************************************/

int main (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ab 97       	sbiw	r28, 0x2b	; 43
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 Mode_of_main_menu;
	SREG |= (1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

	/* initialize the drivers */
	Buzzer_init();
     b68:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <Buzzer_init>
	DcMotor_Init();
     b6c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <DcMotor_Init>
	UART_init(&usart_data_init);
     b70:	88 e6       	ldi	r24, 0x68	; 104
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 de 11 	call	0x23bc	; 0x23bc <UART_init>
	TWI_init(&twi_data_init);
     b78:	85 e7       	ldi	r24, 0x75	; 117
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 58 11 	call	0x22b0	; 0x22b0 <TWI_init>
	/* go to the eeprom first when I start the system
	 * if I already set the password once skip this function set_change_pass
	 * if the value in eeprom is zero then this is a new device
	 * if it has password_created_in_EEPROM_before then go to while (1)
	 */
 	EEPROM_readByte(check_byte_address_in_eeprom, &eeprom_check_if_enter);
     b80:	2b e8       	ldi	r18, 0x8B	; 139
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	80 e5       	ldi	r24, 0x50	; 80
     b86:	93 e0       	ldi	r25, 0x03	; 3
     b88:	b9 01       	movw	r22, r18
     b8a:	0e 94 93 0c 	call	0x1926	; 0x1926 <EEPROM_readByte>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a8 ec       	ldi	r26, 0xC8	; 200
     b94:	b2 e4       	ldi	r27, 0x42	; 66
     b96:	8f a3       	std	Y+39, r24	; 0x27
     b98:	98 a7       	std	Y+40, r25	; 0x28
     b9a:	a9 a7       	std	Y+41, r26	; 0x29
     b9c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b9e:	6f a1       	ldd	r22, Y+39	; 0x27
     ba0:	78 a5       	ldd	r23, Y+40	; 0x28
     ba2:	89 a5       	ldd	r24, Y+41	; 0x29
     ba4:	9a a5       	ldd	r25, Y+42	; 0x2a
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	4a ef       	ldi	r20, 0xFA	; 250
     bac:	54 e4       	ldi	r21, 0x44	; 68
     bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	8b a3       	std	Y+35, r24	; 0x23
     bb8:	9c a3       	std	Y+36, r25	; 0x24
     bba:	ad a3       	std	Y+37, r26	; 0x25
     bbc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bbe:	6b a1       	ldd	r22, Y+35	; 0x23
     bc0:	7c a1       	ldd	r23, Y+36	; 0x24
     bc2:	8d a1       	ldd	r24, Y+37	; 0x25
     bc4:	9e a1       	ldd	r25, Y+38	; 0x26
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	40 e8       	ldi	r20, 0x80	; 128
     bcc:	5f e3       	ldi	r21, 0x3F	; 63
     bce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd2:	88 23       	and	r24, r24
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <main+0x9a>
		__ticks = 1;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	9a a3       	std	Y+34, r25	; 0x22
     bdc:	89 a3       	std	Y+33, r24	; 0x21
     bde:	3f c0       	rjmp	.+126    	; 0xc5e <main+0x118>
	else if (__tmp > 65535)
     be0:	6b a1       	ldd	r22, Y+35	; 0x23
     be2:	7c a1       	ldd	r23, Y+36	; 0x24
     be4:	8d a1       	ldd	r24, Y+37	; 0x25
     be6:	9e a1       	ldd	r25, Y+38	; 0x26
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	3f ef       	ldi	r19, 0xFF	; 255
     bec:	4f e7       	ldi	r20, 0x7F	; 127
     bee:	57 e4       	ldi	r21, 0x47	; 71
     bf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf4:	18 16       	cp	r1, r24
     bf6:	4c f5       	brge	.+82     	; 0xc4a <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf8:	6f a1       	ldd	r22, Y+39	; 0x27
     bfa:	78 a5       	ldd	r23, Y+40	; 0x28
     bfc:	89 a5       	ldd	r24, Y+41	; 0x29
     bfe:	9a a5       	ldd	r25, Y+42	; 0x2a
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e2       	ldi	r20, 0x20	; 32
     c06:	51 e4       	ldi	r21, 0x41	; 65
     c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	bc 01       	movw	r22, r24
     c12:	cd 01       	movw	r24, r26
     c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	9a a3       	std	Y+34, r25	; 0x22
     c1e:	89 a3       	std	Y+33, r24	; 0x21
     c20:	0f c0       	rjmp	.+30     	; 0xc40 <main+0xfa>
     c22:	88 ec       	ldi	r24, 0xC8	; 200
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	98 a3       	std	Y+32, r25	; 0x20
     c28:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c2c:	98 a1       	ldd	r25, Y+32	; 0x20
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <main+0xe8>
     c32:	98 a3       	std	Y+32, r25	; 0x20
     c34:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c36:	89 a1       	ldd	r24, Y+33	; 0x21
     c38:	9a a1       	ldd	r25, Y+34	; 0x22
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	9a a3       	std	Y+34, r25	; 0x22
     c3e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c40:	89 a1       	ldd	r24, Y+33	; 0x21
     c42:	9a a1       	ldd	r25, Y+34	; 0x22
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	69 f7       	brne	.-38     	; 0xc22 <main+0xdc>
     c48:	14 c0       	rjmp	.+40     	; 0xc72 <main+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4a:	6b a1       	ldd	r22, Y+35	; 0x23
     c4c:	7c a1       	ldd	r23, Y+36	; 0x24
     c4e:	8d a1       	ldd	r24, Y+37	; 0x25
     c50:	9e a1       	ldd	r25, Y+38	; 0x26
     c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	9a a3       	std	Y+34, r25	; 0x22
     c5c:	89 a3       	std	Y+33, r24	; 0x21
     c5e:	89 a1       	ldd	r24, Y+33	; 0x21
     c60:	9a a1       	ldd	r25, Y+34	; 0x22
     c62:	9e 8f       	std	Y+30, r25	; 0x1e
     c64:	8d 8f       	std	Y+29, r24	; 0x1d
     c66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c68:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <main+0x124>
     c6e:	9e 8f       	std	Y+30, r25	; 0x1e
     c70:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	if(eeprom_check_if_enter != password_created_in_EEPROM_before)
     c72:	80 91 8b 00 	lds	r24, 0x008B
     c76:	84 36       	cpi	r24, 0x64	; 100
     c78:	09 f4       	brne	.+2      	; 0xc7c <main+0x136>
     c7a:	78 c0       	rjmp	.+240    	; 0xd6c <main+0x226>
	{
	//_delay_ms(100);
	UART_sendByte(start_setting_password);
     c7c:	86 e9       	ldi	r24, 0x96	; 150
     c7e:	0e 94 45 12 	call	0x248a	; 0x248a <UART_sendByte>
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	a8 ec       	ldi	r26, 0xC8	; 200
     c88:	b2 e4       	ldi	r27, 0x42	; 66
     c8a:	89 8f       	std	Y+25, r24	; 0x19
     c8c:	9a 8f       	std	Y+26, r25	; 0x1a
     c8e:	ab 8f       	std	Y+27, r26	; 0x1b
     c90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c92:	69 8d       	ldd	r22, Y+25	; 0x19
     c94:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c96:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c98:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	4a ef       	ldi	r20, 0xFA	; 250
     ca0:	54 e4       	ldi	r21, 0x44	; 68
     ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	8d 8b       	std	Y+21, r24	; 0x15
     cac:	9e 8b       	std	Y+22, r25	; 0x16
     cae:	af 8b       	std	Y+23, r26	; 0x17
     cb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cb2:	6d 89       	ldd	r22, Y+21	; 0x15
     cb4:	7e 89       	ldd	r23, Y+22	; 0x16
     cb6:	8f 89       	ldd	r24, Y+23	; 0x17
     cb8:	98 8d       	ldd	r25, Y+24	; 0x18
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e8       	ldi	r20, 0x80	; 128
     cc0:	5f e3       	ldi	r21, 0x3F	; 63
     cc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cc6:	88 23       	and	r24, r24
     cc8:	2c f4       	brge	.+10     	; 0xcd4 <main+0x18e>
		__ticks = 1;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	9c 8b       	std	Y+20, r25	; 0x14
     cd0:	8b 8b       	std	Y+19, r24	; 0x13
     cd2:	3f c0       	rjmp	.+126    	; 0xd52 <main+0x20c>
	else if (__tmp > 65535)
     cd4:	6d 89       	ldd	r22, Y+21	; 0x15
     cd6:	7e 89       	ldd	r23, Y+22	; 0x16
     cd8:	8f 89       	ldd	r24, Y+23	; 0x17
     cda:	98 8d       	ldd	r25, Y+24	; 0x18
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	3f ef       	ldi	r19, 0xFF	; 255
     ce0:	4f e7       	ldi	r20, 0x7F	; 127
     ce2:	57 e4       	ldi	r21, 0x47	; 71
     ce4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ce8:	18 16       	cp	r1, r24
     cea:	4c f5       	brge	.+82     	; 0xd3e <main+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cec:	69 8d       	ldd	r22, Y+25	; 0x19
     cee:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	40 e2       	ldi	r20, 0x20	; 32
     cfa:	51 e4       	ldi	r21, 0x41	; 65
     cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
     d04:	bc 01       	movw	r22, r24
     d06:	cd 01       	movw	r24, r26
     d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	9c 8b       	std	Y+20, r25	; 0x14
     d12:	8b 8b       	std	Y+19, r24	; 0x13
     d14:	0f c0       	rjmp	.+30     	; 0xd34 <main+0x1ee>
     d16:	88 ec       	ldi	r24, 0xC8	; 200
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	9a 8b       	std	Y+18, r25	; 0x12
     d1c:	89 8b       	std	Y+17, r24	; 0x11
     d1e:	89 89       	ldd	r24, Y+17	; 0x11
     d20:	9a 89       	ldd	r25, Y+18	; 0x12
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <main+0x1dc>
     d26:	9a 8b       	std	Y+18, r25	; 0x12
     d28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2a:	8b 89       	ldd	r24, Y+19	; 0x13
     d2c:	9c 89       	ldd	r25, Y+20	; 0x14
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	9c 8b       	std	Y+20, r25	; 0x14
     d32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d34:	8b 89       	ldd	r24, Y+19	; 0x13
     d36:	9c 89       	ldd	r25, Y+20	; 0x14
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	69 f7       	brne	.-38     	; 0xd16 <main+0x1d0>
     d3c:	14 c0       	rjmp	.+40     	; 0xd66 <main+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d3e:	6d 89       	ldd	r22, Y+21	; 0x15
     d40:	7e 89       	ldd	r23, Y+22	; 0x16
     d42:	8f 89       	ldd	r24, Y+23	; 0x17
     d44:	98 8d       	ldd	r25, Y+24	; 0x18
     d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	9c 8b       	std	Y+20, r25	; 0x14
     d50:	8b 8b       	std	Y+19, r24	; 0x13
     d52:	8b 89       	ldd	r24, Y+19	; 0x13
     d54:	9c 89       	ldd	r25, Y+20	; 0x14
     d56:	98 8b       	std	Y+16, r25	; 0x10
     d58:	8f 87       	std	Y+15, r24	; 0x0f
     d5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d5c:	98 89       	ldd	r25, Y+16	; 0x10
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <main+0x218>
     d62:	98 8b       	std	Y+16, r25	; 0x10
     d64:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	set_change_password();
     d66:	0e 94 4f 07 	call	0xe9e	; 0xe9e <set_change_password>
     d6a:	03 c0       	rjmp	.+6      	; 0xd72 <main+0x22c>
	}
	else
	{
		UART_sendByte(dont_change_pass);
     d6c:	8a e5       	ldi	r24, 0x5A	; 90
     d6e:	0e 94 45 12 	call	0x248a	; 0x248a <UART_sendByte>

	while(1)
	{

		/* I am either waiting for a verification for open door or change password*/
		Mode_of_main_menu= UART_recieveByte();
     d72:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <UART_recieveByte>
     d76:	8b a7       	std	Y+43, r24	; 0x2b

		/* from this variable i know whether i will receive 1 string or 2
		 * according to the function (open door) or (change password)*/
		if (Mode_of_main_menu == Open_Door)
     d78:	8b a5       	ldd	r24, Y+43	; 0x2b
     d7a:	8b 32       	cpi	r24, 0x2B	; 43
     d7c:	19 f4       	brne	.+6      	; 0xd84 <main+0x23e>
		{
			open_door_decision();
     d7e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <open_door_decision>
     d82:	1a c0       	rjmp	.+52     	; 0xdb8 <main+0x272>
		}
		else if (Mode_of_main_menu == Change_Pass)
     d84:	8b a5       	ldd	r24, Y+43	; 0x2b
     d86:	8d 32       	cpi	r24, 0x2D	; 45
     d88:	61 f4       	brne	.+24     	; 0xda2 <main+0x25c>
		{
			check_user_password();
     d8a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <check_user_password>

			if (mismatch_in_change_password==0)
     d8e:	80 91 8a 00 	lds	r24, 0x008A
     d92:	88 23       	and	r24, r24
     d94:	19 f4       	brne	.+6      	; 0xd9c <main+0x256>
			{
				set_change_password();
     d96:	0e 94 4f 07 	call	0xe9e	; 0xe9e <set_change_password>
     d9a:	0e c0       	rjmp	.+28     	; 0xdb8 <main+0x272>
			}
			else
			{
				mismatch_in_change_password=0;
     d9c:	10 92 8a 00 	sts	0x008A, r1
     da0:	0b c0       	rjmp	.+22     	; 0xdb8 <main+0x272>
			}
		}
		else if (Mode_of_main_menu == rotate_motor)
     da2:	8b a5       	ldd	r24, Y+43	; 0x2b
     da4:	85 30       	cpi	r24, 0x05	; 5
     da6:	19 f4       	brne	.+6      	; 0xdae <main+0x268>
		{
			door_lock_unlock();
     da8:	0e 94 96 0b 	call	0x172c	; 0x172c <door_lock_unlock>
     dac:	05 c0       	rjmp	.+10     	; 0xdb8 <main+0x272>
		}
		else if (Mode_of_main_menu == active_buzzer)
     dae:	8b a5       	ldd	r24, Y+43	; 0x2b
     db0:	8f 30       	cpi	r24, 0x0F	; 15
     db2:	11 f4       	brne	.+4      	; 0xdb8 <main+0x272>
		{
			activate_buzzer_fun();
     db4:	0e 94 c9 0b 	call	0x1792	; 0x1792 <activate_buzzer_fun>
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	a8 e4       	ldi	r26, 0x48	; 72
     dbe:	b2 e4       	ldi	r27, 0x42	; 66
     dc0:	8b 87       	std	Y+11, r24	; 0x0b
     dc2:	9c 87       	std	Y+12, r25	; 0x0c
     dc4:	ad 87       	std	Y+13, r26	; 0x0d
     dc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dca:	7c 85       	ldd	r23, Y+12	; 0x0c
     dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dce:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	4a ef       	ldi	r20, 0xFA	; 250
     dd6:	54 e4       	ldi	r21, 0x44	; 68
     dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	8f 83       	std	Y+7, r24	; 0x07
     de2:	98 87       	std	Y+8, r25	; 0x08
     de4:	a9 87       	std	Y+9, r26	; 0x09
     de6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     de8:	6f 81       	ldd	r22, Y+7	; 0x07
     dea:	78 85       	ldd	r23, Y+8	; 0x08
     dec:	89 85       	ldd	r24, Y+9	; 0x09
     dee:	9a 85       	ldd	r25, Y+10	; 0x0a
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 e8       	ldi	r20, 0x80	; 128
     df6:	5f e3       	ldi	r21, 0x3F	; 63
     df8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dfc:	88 23       	and	r24, r24
     dfe:	2c f4       	brge	.+10     	; 0xe0a <main+0x2c4>
		__ticks = 1;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	9e 83       	std	Y+6, r25	; 0x06
     e06:	8d 83       	std	Y+5, r24	; 0x05
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <main+0x342>
	else if (__tmp > 65535)
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	3f ef       	ldi	r19, 0xFF	; 255
     e16:	4f e7       	ldi	r20, 0x7F	; 127
     e18:	57 e4       	ldi	r21, 0x47	; 71
     e1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e1e:	18 16       	cp	r1, r24
     e20:	4c f5       	brge	.+82     	; 0xe74 <main+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e22:	6b 85       	ldd	r22, Y+11	; 0x0b
     e24:	7c 85       	ldd	r23, Y+12	; 0x0c
     e26:	8d 85       	ldd	r24, Y+13	; 0x0d
     e28:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e2       	ldi	r20, 0x20	; 32
     e30:	51 e4       	ldi	r21, 0x41	; 65
     e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	bc 01       	movw	r22, r24
     e3c:	cd 01       	movw	r24, r26
     e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	9e 83       	std	Y+6, r25	; 0x06
     e48:	8d 83       	std	Y+5, r24	; 0x05
     e4a:	0f c0       	rjmp	.+30     	; 0xe6a <main+0x324>
     e4c:	88 ec       	ldi	r24, 0xC8	; 200
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	9c 83       	std	Y+4, r25	; 0x04
     e52:	8b 83       	std	Y+3, r24	; 0x03
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	9c 81       	ldd	r25, Y+4	; 0x04
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	f1 f7       	brne	.-4      	; 0xe58 <main+0x312>
     e5c:	9c 83       	std	Y+4, r25	; 0x04
     e5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e60:	8d 81       	ldd	r24, Y+5	; 0x05
     e62:	9e 81       	ldd	r25, Y+6	; 0x06
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	9e 83       	std	Y+6, r25	; 0x06
     e68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6a:	8d 81       	ldd	r24, Y+5	; 0x05
     e6c:	9e 81       	ldd	r25, Y+6	; 0x06
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	69 f7       	brne	.-38     	; 0xe4c <main+0x306>
     e72:	7f cf       	rjmp	.-258    	; 0xd72 <main+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e74:	6f 81       	ldd	r22, Y+7	; 0x07
     e76:	78 85       	ldd	r23, Y+8	; 0x08
     e78:	89 85       	ldd	r24, Y+9	; 0x09
     e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	9e 83       	std	Y+6, r25	; 0x06
     e86:	8d 83       	std	Y+5, r24	; 0x05
     e88:	8d 81       	ldd	r24, Y+5	; 0x05
     e8a:	9e 81       	ldd	r25, Y+6	; 0x06
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	f1 f7       	brne	.-4      	; 0xe94 <main+0x34e>
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	6a cf       	rjmp	.-300    	; 0xd72 <main+0x22c>

00000e9e <set_change_password>:

/*******************************************************************************
 * 								function definitions
 *******************************************************************************/
void set_change_password(void)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	e9 97       	sbiw	r28, 0x39	; 57
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
	UART_receiveString(g_password);
     eb2:	88 e7       	ldi	r24, 0x78	; 120
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 94 12 	call	0x2528	; 0x2528 <UART_receiveString>

	UART_receiveString(g_password_2);
     eba:	8e e7       	ldi	r24, 0x7E	; 126
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 94 12 	call	0x2528	; 0x2528 <UART_receiveString>

	if (strcmp(g_password , g_password_2) == 0 )
     ec2:	88 e7       	ldi	r24, 0x78	; 120
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	2e e7       	ldi	r18, 0x7E	; 126
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	b9 01       	movw	r22, r18
     ecc:	0e 94 30 13 	call	0x2660	; 0x2660 <strcmp>
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	09 f0       	breq	.+2      	; 0xed6 <set_change_password+0x38>
     ed4:	79 c1       	rjmp	.+754    	; 0x11c8 <set_change_password+0x32a>
	{
		/* the user typed the passwords correct */
		uint8 i;
		for (i=0 ; i<6 ; i++)
     ed6:	19 ae       	std	Y+57, r1	; 0x39
     ed8:	86 c0       	rjmp	.+268    	; 0xfe6 <set_change_password+0x148>
		{
			/* saved inside the eeprom the password as 12345# */
			EEPROM_writeByte(password_address_eeprom + i, g_password[i]);
     eda:	89 ad       	ldd	r24, Y+57	; 0x39
     edc:	88 2f       	mov	r24, r24
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	8f 5e       	subi	r24, 0xEF	; 239
     ee2:	9c 4f       	sbci	r25, 0xFC	; 252
     ee4:	ac 01       	movw	r20, r24
     ee6:	89 ad       	ldd	r24, Y+57	; 0x39
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	fc 01       	movw	r30, r24
     eee:	e8 58       	subi	r30, 0x88	; 136
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	20 81       	ld	r18, Z
     ef4:	ca 01       	movw	r24, r20
     ef6:	62 2f       	mov	r22, r18
     ef8:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <EEPROM_writeByte>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a8 ec       	ldi	r26, 0xC8	; 200
     f02:	b2 e4       	ldi	r27, 0x42	; 66
     f04:	8d ab       	std	Y+53, r24	; 0x35
     f06:	9e ab       	std	Y+54, r25	; 0x36
     f08:	af ab       	std	Y+55, r26	; 0x37
     f0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f0c:	6d a9       	ldd	r22, Y+53	; 0x35
     f0e:	7e a9       	ldd	r23, Y+54	; 0x36
     f10:	8f a9       	ldd	r24, Y+55	; 0x37
     f12:	98 ad       	ldd	r25, Y+56	; 0x38
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	4a ef       	ldi	r20, 0xFA	; 250
     f1a:	54 e4       	ldi	r21, 0x44	; 68
     f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	89 ab       	std	Y+49, r24	; 0x31
     f26:	9a ab       	std	Y+50, r25	; 0x32
     f28:	ab ab       	std	Y+51, r26	; 0x33
     f2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f2c:	69 a9       	ldd	r22, Y+49	; 0x31
     f2e:	7a a9       	ldd	r23, Y+50	; 0x32
     f30:	8b a9       	ldd	r24, Y+51	; 0x33
     f32:	9c a9       	ldd	r25, Y+52	; 0x34
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e8       	ldi	r20, 0x80	; 128
     f3a:	5f e3       	ldi	r21, 0x3F	; 63
     f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f40:	88 23       	and	r24, r24
     f42:	2c f4       	brge	.+10     	; 0xf4e <set_change_password+0xb0>
		__ticks = 1;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	98 ab       	std	Y+48, r25	; 0x30
     f4a:	8f a7       	std	Y+47, r24	; 0x2f
     f4c:	3f c0       	rjmp	.+126    	; 0xfcc <set_change_password+0x12e>
	else if (__tmp > 65535)
     f4e:	69 a9       	ldd	r22, Y+49	; 0x31
     f50:	7a a9       	ldd	r23, Y+50	; 0x32
     f52:	8b a9       	ldd	r24, Y+51	; 0x33
     f54:	9c a9       	ldd	r25, Y+52	; 0x34
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	3f ef       	ldi	r19, 0xFF	; 255
     f5a:	4f e7       	ldi	r20, 0x7F	; 127
     f5c:	57 e4       	ldi	r21, 0x47	; 71
     f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f62:	18 16       	cp	r1, r24
     f64:	4c f5       	brge	.+82     	; 0xfb8 <set_change_password+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f66:	6d a9       	ldd	r22, Y+53	; 0x35
     f68:	7e a9       	ldd	r23, Y+54	; 0x36
     f6a:	8f a9       	ldd	r24, Y+55	; 0x37
     f6c:	98 ad       	ldd	r25, Y+56	; 0x38
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e2       	ldi	r20, 0x20	; 32
     f74:	51 e4       	ldi	r21, 0x41	; 65
     f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	bc 01       	movw	r22, r24
     f80:	cd 01       	movw	r24, r26
     f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	98 ab       	std	Y+48, r25	; 0x30
     f8c:	8f a7       	std	Y+47, r24	; 0x2f
     f8e:	0f c0       	rjmp	.+30     	; 0xfae <set_change_password+0x110>
     f90:	88 ec       	ldi	r24, 0xC8	; 200
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9e a7       	std	Y+46, r25	; 0x2e
     f96:	8d a7       	std	Y+45, r24	; 0x2d
     f98:	8d a5       	ldd	r24, Y+45	; 0x2d
     f9a:	9e a5       	ldd	r25, Y+46	; 0x2e
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <set_change_password+0xfe>
     fa0:	9e a7       	std	Y+46, r25	; 0x2e
     fa2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa4:	8f a5       	ldd	r24, Y+47	; 0x2f
     fa6:	98 a9       	ldd	r25, Y+48	; 0x30
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	98 ab       	std	Y+48, r25	; 0x30
     fac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fae:	8f a5       	ldd	r24, Y+47	; 0x2f
     fb0:	98 a9       	ldd	r25, Y+48	; 0x30
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	69 f7       	brne	.-38     	; 0xf90 <set_change_password+0xf2>
     fb6:	14 c0       	rjmp	.+40     	; 0xfe0 <set_change_password+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb8:	69 a9       	ldd	r22, Y+49	; 0x31
     fba:	7a a9       	ldd	r23, Y+50	; 0x32
     fbc:	8b a9       	ldd	r24, Y+51	; 0x33
     fbe:	9c a9       	ldd	r25, Y+52	; 0x34
     fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	98 ab       	std	Y+48, r25	; 0x30
     fca:	8f a7       	std	Y+47, r24	; 0x2f
     fcc:	8f a5       	ldd	r24, Y+47	; 0x2f
     fce:	98 a9       	ldd	r25, Y+48	; 0x30
     fd0:	9c a7       	std	Y+44, r25	; 0x2c
     fd2:	8b a7       	std	Y+43, r24	; 0x2b
     fd4:	8b a5       	ldd	r24, Y+43	; 0x2b
     fd6:	9c a5       	ldd	r25, Y+44	; 0x2c
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <set_change_password+0x13a>
     fdc:	9c a7       	std	Y+44, r25	; 0x2c
     fde:	8b a7       	std	Y+43, r24	; 0x2b

	if (strcmp(g_password , g_password_2) == 0 )
	{
		/* the user typed the passwords correct */
		uint8 i;
		for (i=0 ; i<6 ; i++)
     fe0:	89 ad       	ldd	r24, Y+57	; 0x39
     fe2:	8f 5f       	subi	r24, 0xFF	; 255
     fe4:	89 af       	std	Y+57, r24	; 0x39
     fe6:	89 ad       	ldd	r24, Y+57	; 0x39
     fe8:	86 30       	cpi	r24, 0x06	; 6
     fea:	08 f4       	brcc	.+2      	; 0xfee <set_change_password+0x150>
     fec:	76 cf       	rjmp	.-276    	; 0xeda <set_change_password+0x3c>
			EEPROM_writeByte(password_address_eeprom + i, g_password[i]);
			_delay_ms(100);
		}

		/* send to HMU_ECU a matched signal */
		UART_sendByte(Matched_Passwords);
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	0e 94 45 12 	call	0x248a	; 0x248a <UART_sendByte>
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a8 ec       	ldi	r26, 0xC8	; 200
     ffa:	b2 e4       	ldi	r27, 0x42	; 66
     ffc:	8f a3       	std	Y+39, r24	; 0x27
     ffe:	98 a7       	std	Y+40, r25	; 0x28
    1000:	a9 a7       	std	Y+41, r26	; 0x29
    1002:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1004:	6f a1       	ldd	r22, Y+39	; 0x27
    1006:	78 a5       	ldd	r23, Y+40	; 0x28
    1008:	89 a5       	ldd	r24, Y+41	; 0x29
    100a:	9a a5       	ldd	r25, Y+42	; 0x2a
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	4a ef       	ldi	r20, 0xFA	; 250
    1012:	54 e4       	ldi	r21, 0x44	; 68
    1014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	8b a3       	std	Y+35, r24	; 0x23
    101e:	9c a3       	std	Y+36, r25	; 0x24
    1020:	ad a3       	std	Y+37, r26	; 0x25
    1022:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1024:	6b a1       	ldd	r22, Y+35	; 0x23
    1026:	7c a1       	ldd	r23, Y+36	; 0x24
    1028:	8d a1       	ldd	r24, Y+37	; 0x25
    102a:	9e a1       	ldd	r25, Y+38	; 0x26
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e8       	ldi	r20, 0x80	; 128
    1032:	5f e3       	ldi	r21, 0x3F	; 63
    1034:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1038:	88 23       	and	r24, r24
    103a:	2c f4       	brge	.+10     	; 0x1046 <set_change_password+0x1a8>
		__ticks = 1;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	9a a3       	std	Y+34, r25	; 0x22
    1042:	89 a3       	std	Y+33, r24	; 0x21
    1044:	3f c0       	rjmp	.+126    	; 0x10c4 <set_change_password+0x226>
	else if (__tmp > 65535)
    1046:	6b a1       	ldd	r22, Y+35	; 0x23
    1048:	7c a1       	ldd	r23, Y+36	; 0x24
    104a:	8d a1       	ldd	r24, Y+37	; 0x25
    104c:	9e a1       	ldd	r25, Y+38	; 0x26
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	3f ef       	ldi	r19, 0xFF	; 255
    1052:	4f e7       	ldi	r20, 0x7F	; 127
    1054:	57 e4       	ldi	r21, 0x47	; 71
    1056:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    105a:	18 16       	cp	r1, r24
    105c:	4c f5       	brge	.+82     	; 0x10b0 <set_change_password+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    105e:	6f a1       	ldd	r22, Y+39	; 0x27
    1060:	78 a5       	ldd	r23, Y+40	; 0x28
    1062:	89 a5       	ldd	r24, Y+41	; 0x29
    1064:	9a a5       	ldd	r25, Y+42	; 0x2a
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e2       	ldi	r20, 0x20	; 32
    106c:	51 e4       	ldi	r21, 0x41	; 65
    106e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	bc 01       	movw	r22, r24
    1078:	cd 01       	movw	r24, r26
    107a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	9a a3       	std	Y+34, r25	; 0x22
    1084:	89 a3       	std	Y+33, r24	; 0x21
    1086:	0f c0       	rjmp	.+30     	; 0x10a6 <set_change_password+0x208>
    1088:	88 ec       	ldi	r24, 0xC8	; 200
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	98 a3       	std	Y+32, r25	; 0x20
    108e:	8f 8f       	std	Y+31, r24	; 0x1f
    1090:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1092:	98 a1       	ldd	r25, Y+32	; 0x20
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <set_change_password+0x1f6>
    1098:	98 a3       	std	Y+32, r25	; 0x20
    109a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109c:	89 a1       	ldd	r24, Y+33	; 0x21
    109e:	9a a1       	ldd	r25, Y+34	; 0x22
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	9a a3       	std	Y+34, r25	; 0x22
    10a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a6:	89 a1       	ldd	r24, Y+33	; 0x21
    10a8:	9a a1       	ldd	r25, Y+34	; 0x22
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	69 f7       	brne	.-38     	; 0x1088 <set_change_password+0x1ea>
    10ae:	14 c0       	rjmp	.+40     	; 0x10d8 <set_change_password+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b0:	6b a1       	ldd	r22, Y+35	; 0x23
    10b2:	7c a1       	ldd	r23, Y+36	; 0x24
    10b4:	8d a1       	ldd	r24, Y+37	; 0x25
    10b6:	9e a1       	ldd	r25, Y+38	; 0x26
    10b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	9a a3       	std	Y+34, r25	; 0x22
    10c2:	89 a3       	std	Y+33, r24	; 0x21
    10c4:	89 a1       	ldd	r24, Y+33	; 0x21
    10c6:	9a a1       	ldd	r25, Y+34	; 0x22
    10c8:	9e 8f       	std	Y+30, r25	; 0x1e
    10ca:	8d 8f       	std	Y+29, r24	; 0x1d
    10cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <set_change_password+0x232>
    10d4:	9e 8f       	std	Y+30, r25	; 0x1e
    10d6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);

		/* receive from HMU_ECU a byte that we entered the eeprom so we wont create password before*/
		//eeprom_check_if_enter=UART_recieveByte();

		EEPROM_writeByte(check_byte_address_in_eeprom ,password_created_in_EEPROM_before);
    10d8:	80 e5       	ldi	r24, 0x50	; 80
    10da:	93 e0       	ldi	r25, 0x03	; 3
    10dc:	64 e6       	ldi	r22, 0x64	; 100
    10de:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <EEPROM_writeByte>
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	a8 ec       	ldi	r26, 0xC8	; 200
    10e8:	b2 e4       	ldi	r27, 0x42	; 66
    10ea:	89 8f       	std	Y+25, r24	; 0x19
    10ec:	9a 8f       	std	Y+26, r25	; 0x1a
    10ee:	ab 8f       	std	Y+27, r26	; 0x1b
    10f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f2:	69 8d       	ldd	r22, Y+25	; 0x19
    10f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	4a ef       	ldi	r20, 0xFA	; 250
    1100:	54 e4       	ldi	r21, 0x44	; 68
    1102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	8d 8b       	std	Y+21, r24	; 0x15
    110c:	9e 8b       	std	Y+22, r25	; 0x16
    110e:	af 8b       	std	Y+23, r26	; 0x17
    1110:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1112:	6d 89       	ldd	r22, Y+21	; 0x15
    1114:	7e 89       	ldd	r23, Y+22	; 0x16
    1116:	8f 89       	ldd	r24, Y+23	; 0x17
    1118:	98 8d       	ldd	r25, Y+24	; 0x18
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e8       	ldi	r20, 0x80	; 128
    1120:	5f e3       	ldi	r21, 0x3F	; 63
    1122:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1126:	88 23       	and	r24, r24
    1128:	2c f4       	brge	.+10     	; 0x1134 <set_change_password+0x296>
		__ticks = 1;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9c 8b       	std	Y+20, r25	; 0x14
    1130:	8b 8b       	std	Y+19, r24	; 0x13
    1132:	3f c0       	rjmp	.+126    	; 0x11b2 <set_change_password+0x314>
	else if (__tmp > 65535)
    1134:	6d 89       	ldd	r22, Y+21	; 0x15
    1136:	7e 89       	ldd	r23, Y+22	; 0x16
    1138:	8f 89       	ldd	r24, Y+23	; 0x17
    113a:	98 8d       	ldd	r25, Y+24	; 0x18
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	3f ef       	ldi	r19, 0xFF	; 255
    1140:	4f e7       	ldi	r20, 0x7F	; 127
    1142:	57 e4       	ldi	r21, 0x47	; 71
    1144:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1148:	18 16       	cp	r1, r24
    114a:	4c f5       	brge	.+82     	; 0x119e <set_change_password+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114c:	69 8d       	ldd	r22, Y+25	; 0x19
    114e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1150:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1152:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e2       	ldi	r20, 0x20	; 32
    115a:	51 e4       	ldi	r21, 0x41	; 65
    115c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	bc 01       	movw	r22, r24
    1166:	cd 01       	movw	r24, r26
    1168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	9c 8b       	std	Y+20, r25	; 0x14
    1172:	8b 8b       	std	Y+19, r24	; 0x13
    1174:	0f c0       	rjmp	.+30     	; 0x1194 <set_change_password+0x2f6>
    1176:	88 ec       	ldi	r24, 0xC8	; 200
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	9a 8b       	std	Y+18, r25	; 0x12
    117c:	89 8b       	std	Y+17, r24	; 0x11
    117e:	89 89       	ldd	r24, Y+17	; 0x11
    1180:	9a 89       	ldd	r25, Y+18	; 0x12
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <set_change_password+0x2e4>
    1186:	9a 8b       	std	Y+18, r25	; 0x12
    1188:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118a:	8b 89       	ldd	r24, Y+19	; 0x13
    118c:	9c 89       	ldd	r25, Y+20	; 0x14
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	9c 8b       	std	Y+20, r25	; 0x14
    1192:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1194:	8b 89       	ldd	r24, Y+19	; 0x13
    1196:	9c 89       	ldd	r25, Y+20	; 0x14
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	69 f7       	brne	.-38     	; 0x1176 <set_change_password+0x2d8>
    119c:	21 c0       	rjmp	.+66     	; 0x11e0 <set_change_password+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119e:	6d 89       	ldd	r22, Y+21	; 0x15
    11a0:	7e 89       	ldd	r23, Y+22	; 0x16
    11a2:	8f 89       	ldd	r24, Y+23	; 0x17
    11a4:	98 8d       	ldd	r25, Y+24	; 0x18
    11a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	9c 8b       	std	Y+20, r25	; 0x14
    11b0:	8b 8b       	std	Y+19, r24	; 0x13
    11b2:	8b 89       	ldd	r24, Y+19	; 0x13
    11b4:	9c 89       	ldd	r25, Y+20	; 0x14
    11b6:	98 8b       	std	Y+16, r25	; 0x10
    11b8:	8f 87       	std	Y+15, r24	; 0x0f
    11ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    11bc:	98 89       	ldd	r25, Y+16	; 0x10
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <set_change_password+0x320>
    11c2:	98 8b       	std	Y+16, r25	; 0x10
    11c4:	8f 87       	std	Y+15, r24	; 0x0f
    11c6:	0c c0       	rjmp	.+24     	; 0x11e0 <set_change_password+0x342>
		_delay_ms(100);

	}
	else if (strcmp(g_password , g_password_2) != 0 )
    11c8:	88 e7       	ldi	r24, 0x78	; 120
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	2e e7       	ldi	r18, 0x7E	; 126
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	b9 01       	movw	r22, r18
    11d2:	0e 94 30 13 	call	0x2660	; 0x2660 <strcmp>
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	19 f0       	breq	.+6      	; 0x11e0 <set_change_password+0x342>
	{
		/* there is a mismatch between the passwords */
		/* send to HMU_ECU a mis-match signal */
		UART_sendByte(Unmatched_Passwords);
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	0e 94 45 12 	call	0x248a	; 0x248a <UART_sendByte>
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	a8 e4       	ldi	r26, 0x48	; 72
    11e6:	b2 e4       	ldi	r27, 0x42	; 66
    11e8:	8b 87       	std	Y+11, r24	; 0x0b
    11ea:	9c 87       	std	Y+12, r25	; 0x0c
    11ec:	ad 87       	std	Y+13, r26	; 0x0d
    11ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	4a ef       	ldi	r20, 0xFA	; 250
    11fe:	54 e4       	ldi	r21, 0x44	; 68
    1200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	8f 83       	std	Y+7, r24	; 0x07
    120a:	98 87       	std	Y+8, r25	; 0x08
    120c:	a9 87       	std	Y+9, r26	; 0x09
    120e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1210:	6f 81       	ldd	r22, Y+7	; 0x07
    1212:	78 85       	ldd	r23, Y+8	; 0x08
    1214:	89 85       	ldd	r24, Y+9	; 0x09
    1216:	9a 85       	ldd	r25, Y+10	; 0x0a
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e8       	ldi	r20, 0x80	; 128
    121e:	5f e3       	ldi	r21, 0x3F	; 63
    1220:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1224:	88 23       	and	r24, r24
    1226:	2c f4       	brge	.+10     	; 0x1232 <set_change_password+0x394>
		__ticks = 1;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	9e 83       	std	Y+6, r25	; 0x06
    122e:	8d 83       	std	Y+5, r24	; 0x05
    1230:	3f c0       	rjmp	.+126    	; 0x12b0 <set_change_password+0x412>
	else if (__tmp > 65535)
    1232:	6f 81       	ldd	r22, Y+7	; 0x07
    1234:	78 85       	ldd	r23, Y+8	; 0x08
    1236:	89 85       	ldd	r24, Y+9	; 0x09
    1238:	9a 85       	ldd	r25, Y+10	; 0x0a
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	3f ef       	ldi	r19, 0xFF	; 255
    123e:	4f e7       	ldi	r20, 0x7F	; 127
    1240:	57 e4       	ldi	r21, 0x47	; 71
    1242:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1246:	18 16       	cp	r1, r24
    1248:	4c f5       	brge	.+82     	; 0x129c <set_change_password+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124a:	6b 85       	ldd	r22, Y+11	; 0x0b
    124c:	7c 85       	ldd	r23, Y+12	; 0x0c
    124e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1250:	9e 85       	ldd	r25, Y+14	; 0x0e
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e2       	ldi	r20, 0x20	; 32
    1258:	51 e4       	ldi	r21, 0x41	; 65
    125a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	9e 83       	std	Y+6, r25	; 0x06
    1270:	8d 83       	std	Y+5, r24	; 0x05
    1272:	0f c0       	rjmp	.+30     	; 0x1292 <set_change_password+0x3f4>
    1274:	88 ec       	ldi	r24, 0xC8	; 200
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	9c 83       	std	Y+4, r25	; 0x04
    127a:	8b 83       	std	Y+3, r24	; 0x03
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	f1 f7       	brne	.-4      	; 0x1280 <set_change_password+0x3e2>
    1284:	9c 83       	std	Y+4, r25	; 0x04
    1286:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	9e 81       	ldd	r25, Y+6	; 0x06
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	9e 83       	std	Y+6, r25	; 0x06
    1290:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	9e 81       	ldd	r25, Y+6	; 0x06
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	69 f7       	brne	.-38     	; 0x1274 <set_change_password+0x3d6>
    129a:	14 c0       	rjmp	.+40     	; 0x12c4 <set_change_password+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129c:	6f 81       	ldd	r22, Y+7	; 0x07
    129e:	78 85       	ldd	r23, Y+8	; 0x08
    12a0:	89 85       	ldd	r24, Y+9	; 0x09
    12a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	9e 81       	ldd	r25, Y+6	; 0x06
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <set_change_password+0x41e>
    12c0:	9a 83       	std	Y+2, r25	; 0x02
    12c2:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(50);
}
    12c4:	e9 96       	adiw	r28, 0x39	; 57
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <open_door_decision>:

void open_door_decision(void)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
	check_user_password();
    12de:	0e 94 74 09 	call	0x12e8	; 0x12e8 <check_user_password>
}
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <check_user_password>:

void check_user_password(void)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	e9 97       	sbiw	r28, 0x39	; 57
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
	/* receive the password sent by the user and store it in g_password */
	UART_receiveString(g_password);
    12fc:	88 e7       	ldi	r24, 0x78	; 120
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 94 12 	call	0x2528	; 0x2528 <UART_receiveString>

	/* get the value of the password from the eeprom */
	uint8 i ;
	for (i=0 ; i<6 ; i++)
    1304:	19 ae       	std	Y+57, r1	; 0x39
    1306:	85 c0       	rjmp	.+266    	; 0x1412 <check_user_password+0x12a>
	{
		/* store the value of the eeprom password in g_password_3*/
		EEPROM_readByte(password_address_eeprom + i , &g_password_3[i]);
    1308:	89 ad       	ldd	r24, Y+57	; 0x39
    130a:	88 2f       	mov	r24, r24
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	8f 5e       	subi	r24, 0xEF	; 239
    1310:	9c 4f       	sbci	r25, 0xFC	; 252
    1312:	ac 01       	movw	r20, r24
    1314:	89 ad       	ldd	r24, Y+57	; 0x39
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	9c 01       	movw	r18, r24
    131c:	2c 57       	subi	r18, 0x7C	; 124
    131e:	3f 4f       	sbci	r19, 0xFF	; 255
    1320:	ca 01       	movw	r24, r20
    1322:	b9 01       	movw	r22, r18
    1324:	0e 94 93 0c 	call	0x1926	; 0x1926 <EEPROM_readByte>
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a8 ec       	ldi	r26, 0xC8	; 200
    132e:	b2 e4       	ldi	r27, 0x42	; 66
    1330:	8d ab       	std	Y+53, r24	; 0x35
    1332:	9e ab       	std	Y+54, r25	; 0x36
    1334:	af ab       	std	Y+55, r26	; 0x37
    1336:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1338:	6d a9       	ldd	r22, Y+53	; 0x35
    133a:	7e a9       	ldd	r23, Y+54	; 0x36
    133c:	8f a9       	ldd	r24, Y+55	; 0x37
    133e:	98 ad       	ldd	r25, Y+56	; 0x38
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	4a ef       	ldi	r20, 0xFA	; 250
    1346:	54 e4       	ldi	r21, 0x44	; 68
    1348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	89 ab       	std	Y+49, r24	; 0x31
    1352:	9a ab       	std	Y+50, r25	; 0x32
    1354:	ab ab       	std	Y+51, r26	; 0x33
    1356:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1358:	69 a9       	ldd	r22, Y+49	; 0x31
    135a:	7a a9       	ldd	r23, Y+50	; 0x32
    135c:	8b a9       	ldd	r24, Y+51	; 0x33
    135e:	9c a9       	ldd	r25, Y+52	; 0x34
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e8       	ldi	r20, 0x80	; 128
    1366:	5f e3       	ldi	r21, 0x3F	; 63
    1368:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    136c:	88 23       	and	r24, r24
    136e:	2c f4       	brge	.+10     	; 0x137a <check_user_password+0x92>
		__ticks = 1;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	98 ab       	std	Y+48, r25	; 0x30
    1376:	8f a7       	std	Y+47, r24	; 0x2f
    1378:	3f c0       	rjmp	.+126    	; 0x13f8 <check_user_password+0x110>
	else if (__tmp > 65535)
    137a:	69 a9       	ldd	r22, Y+49	; 0x31
    137c:	7a a9       	ldd	r23, Y+50	; 0x32
    137e:	8b a9       	ldd	r24, Y+51	; 0x33
    1380:	9c a9       	ldd	r25, Y+52	; 0x34
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	3f ef       	ldi	r19, 0xFF	; 255
    1386:	4f e7       	ldi	r20, 0x7F	; 127
    1388:	57 e4       	ldi	r21, 0x47	; 71
    138a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    138e:	18 16       	cp	r1, r24
    1390:	4c f5       	brge	.+82     	; 0x13e4 <check_user_password+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1392:	6d a9       	ldd	r22, Y+53	; 0x35
    1394:	7e a9       	ldd	r23, Y+54	; 0x36
    1396:	8f a9       	ldd	r24, Y+55	; 0x37
    1398:	98 ad       	ldd	r25, Y+56	; 0x38
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e2       	ldi	r20, 0x20	; 32
    13a0:	51 e4       	ldi	r21, 0x41	; 65
    13a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	bc 01       	movw	r22, r24
    13ac:	cd 01       	movw	r24, r26
    13ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	98 ab       	std	Y+48, r25	; 0x30
    13b8:	8f a7       	std	Y+47, r24	; 0x2f
    13ba:	0f c0       	rjmp	.+30     	; 0x13da <check_user_password+0xf2>
    13bc:	88 ec       	ldi	r24, 0xC8	; 200
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	9e a7       	std	Y+46, r25	; 0x2e
    13c2:	8d a7       	std	Y+45, r24	; 0x2d
    13c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    13c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <check_user_password+0xe0>
    13cc:	9e a7       	std	Y+46, r25	; 0x2e
    13ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13d2:	98 a9       	ldd	r25, Y+48	; 0x30
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	98 ab       	std	Y+48, r25	; 0x30
    13d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13da:	8f a5       	ldd	r24, Y+47	; 0x2f
    13dc:	98 a9       	ldd	r25, Y+48	; 0x30
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	69 f7       	brne	.-38     	; 0x13bc <check_user_password+0xd4>
    13e2:	14 c0       	rjmp	.+40     	; 0x140c <check_user_password+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e4:	69 a9       	ldd	r22, Y+49	; 0x31
    13e6:	7a a9       	ldd	r23, Y+50	; 0x32
    13e8:	8b a9       	ldd	r24, Y+51	; 0x33
    13ea:	9c a9       	ldd	r25, Y+52	; 0x34
    13ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	98 ab       	std	Y+48, r25	; 0x30
    13f6:	8f a7       	std	Y+47, r24	; 0x2f
    13f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13fa:	98 a9       	ldd	r25, Y+48	; 0x30
    13fc:	9c a7       	std	Y+44, r25	; 0x2c
    13fe:	8b a7       	std	Y+43, r24	; 0x2b
    1400:	8b a5       	ldd	r24, Y+43	; 0x2b
    1402:	9c a5       	ldd	r25, Y+44	; 0x2c
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <check_user_password+0x11c>
    1408:	9c a7       	std	Y+44, r25	; 0x2c
    140a:	8b a7       	std	Y+43, r24	; 0x2b
	/* receive the password sent by the user and store it in g_password */
	UART_receiveString(g_password);

	/* get the value of the password from the eeprom */
	uint8 i ;
	for (i=0 ; i<6 ; i++)
    140c:	89 ad       	ldd	r24, Y+57	; 0x39
    140e:	8f 5f       	subi	r24, 0xFF	; 255
    1410:	89 af       	std	Y+57, r24	; 0x39
    1412:	89 ad       	ldd	r24, Y+57	; 0x39
    1414:	86 30       	cpi	r24, 0x06	; 6
    1416:	08 f4       	brcc	.+2      	; 0x141a <check_user_password+0x132>
    1418:	77 cf       	rjmp	.-274    	; 0x1308 <check_user_password+0x20>
		/* store the value of the eeprom password in g_password_3*/
		EEPROM_readByte(password_address_eeprom + i , &g_password_3[i]);
		_delay_ms(100);
	}

	if (strcmp(g_password , g_password_3) == 0 )
    141a:	88 e7       	ldi	r24, 0x78	; 120
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	24 e8       	ldi	r18, 0x84	; 132
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	b9 01       	movw	r22, r18
    1424:	0e 94 30 13 	call	0x2660	; 0x2660 <strcmp>
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	09 f0       	breq	.+2      	; 0x142e <check_user_password+0x146>
    142c:	76 c0       	rjmp	.+236    	; 0x151a <check_user_password+0x232>
	{
		/* password match*/
		UART_sendByte(Matched_Passwords);
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	0e 94 45 12 	call	0x248a	; 0x248a <UART_sendByte>
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	a8 ec       	ldi	r26, 0xC8	; 200
    143a:	b2 e4       	ldi	r27, 0x42	; 66
    143c:	8f a3       	std	Y+39, r24	; 0x27
    143e:	98 a7       	std	Y+40, r25	; 0x28
    1440:	a9 a7       	std	Y+41, r26	; 0x29
    1442:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1444:	6f a1       	ldd	r22, Y+39	; 0x27
    1446:	78 a5       	ldd	r23, Y+40	; 0x28
    1448:	89 a5       	ldd	r24, Y+41	; 0x29
    144a:	9a a5       	ldd	r25, Y+42	; 0x2a
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	4a ef       	ldi	r20, 0xFA	; 250
    1452:	54 e4       	ldi	r21, 0x44	; 68
    1454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	8b a3       	std	Y+35, r24	; 0x23
    145e:	9c a3       	std	Y+36, r25	; 0x24
    1460:	ad a3       	std	Y+37, r26	; 0x25
    1462:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1464:	6b a1       	ldd	r22, Y+35	; 0x23
    1466:	7c a1       	ldd	r23, Y+36	; 0x24
    1468:	8d a1       	ldd	r24, Y+37	; 0x25
    146a:	9e a1       	ldd	r25, Y+38	; 0x26
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e8       	ldi	r20, 0x80	; 128
    1472:	5f e3       	ldi	r21, 0x3F	; 63
    1474:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1478:	88 23       	and	r24, r24
    147a:	2c f4       	brge	.+10     	; 0x1486 <check_user_password+0x19e>
		__ticks = 1;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	9a a3       	std	Y+34, r25	; 0x22
    1482:	89 a3       	std	Y+33, r24	; 0x21
    1484:	3f c0       	rjmp	.+126    	; 0x1504 <check_user_password+0x21c>
	else if (__tmp > 65535)
    1486:	6b a1       	ldd	r22, Y+35	; 0x23
    1488:	7c a1       	ldd	r23, Y+36	; 0x24
    148a:	8d a1       	ldd	r24, Y+37	; 0x25
    148c:	9e a1       	ldd	r25, Y+38	; 0x26
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	3f ef       	ldi	r19, 0xFF	; 255
    1492:	4f e7       	ldi	r20, 0x7F	; 127
    1494:	57 e4       	ldi	r21, 0x47	; 71
    1496:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    149a:	18 16       	cp	r1, r24
    149c:	4c f5       	brge	.+82     	; 0x14f0 <check_user_password+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    149e:	6f a1       	ldd	r22, Y+39	; 0x27
    14a0:	78 a5       	ldd	r23, Y+40	; 0x28
    14a2:	89 a5       	ldd	r24, Y+41	; 0x29
    14a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e2       	ldi	r20, 0x20	; 32
    14ac:	51 e4       	ldi	r21, 0x41	; 65
    14ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	bc 01       	movw	r22, r24
    14b8:	cd 01       	movw	r24, r26
    14ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	9a a3       	std	Y+34, r25	; 0x22
    14c4:	89 a3       	std	Y+33, r24	; 0x21
    14c6:	0f c0       	rjmp	.+30     	; 0x14e6 <check_user_password+0x1fe>
    14c8:	88 ec       	ldi	r24, 0xC8	; 200
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	98 a3       	std	Y+32, r25	; 0x20
    14ce:	8f 8f       	std	Y+31, r24	; 0x1f
    14d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14d2:	98 a1       	ldd	r25, Y+32	; 0x20
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <check_user_password+0x1ec>
    14d8:	98 a3       	std	Y+32, r25	; 0x20
    14da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14dc:	89 a1       	ldd	r24, Y+33	; 0x21
    14de:	9a a1       	ldd	r25, Y+34	; 0x22
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	9a a3       	std	Y+34, r25	; 0x22
    14e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e6:	89 a1       	ldd	r24, Y+33	; 0x21
    14e8:	9a a1       	ldd	r25, Y+34	; 0x22
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	69 f7       	brne	.-38     	; 0x14c8 <check_user_password+0x1e0>
    14ee:	97 c0       	rjmp	.+302    	; 0x161e <check_user_password+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f0:	6b a1       	ldd	r22, Y+35	; 0x23
    14f2:	7c a1       	ldd	r23, Y+36	; 0x24
    14f4:	8d a1       	ldd	r24, Y+37	; 0x25
    14f6:	9e a1       	ldd	r25, Y+38	; 0x26
    14f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9a a3       	std	Y+34, r25	; 0x22
    1502:	89 a3       	std	Y+33, r24	; 0x21
    1504:	89 a1       	ldd	r24, Y+33	; 0x21
    1506:	9a a1       	ldd	r25, Y+34	; 0x22
    1508:	9e 8f       	std	Y+30, r25	; 0x1e
    150a:	8d 8f       	std	Y+29, r24	; 0x1d
    150c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    150e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <check_user_password+0x228>
    1514:	9e 8f       	std	Y+30, r25	; 0x1e
    1516:	8d 8f       	std	Y+29, r24	; 0x1d
    1518:	82 c0       	rjmp	.+260    	; 0x161e <check_user_password+0x336>
		_delay_ms(100);
	}
	else if (strcmp(g_password , g_password_3) != 0 )
    151a:	88 e7       	ldi	r24, 0x78	; 120
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	24 e8       	ldi	r18, 0x84	; 132
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	b9 01       	movw	r22, r18
    1524:	0e 94 30 13 	call	0x2660	; 0x2660 <strcmp>
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	09 f4       	brne	.+2      	; 0x152e <check_user_password+0x246>
    152c:	78 c0       	rjmp	.+240    	; 0x161e <check_user_password+0x336>
	{
		/* password mismatch */
		UART_sendByte(Unmatched_Passwords);
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	0e 94 45 12 	call	0x248a	; 0x248a <UART_sendByte>
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	a8 ec       	ldi	r26, 0xC8	; 200
    153a:	b2 e4       	ldi	r27, 0x42	; 66
    153c:	89 8f       	std	Y+25, r24	; 0x19
    153e:	9a 8f       	std	Y+26, r25	; 0x1a
    1540:	ab 8f       	std	Y+27, r26	; 0x1b
    1542:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1544:	69 8d       	ldd	r22, Y+25	; 0x19
    1546:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1548:	8b 8d       	ldd	r24, Y+27	; 0x1b
    154a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	4a ef       	ldi	r20, 0xFA	; 250
    1552:	54 e4       	ldi	r21, 0x44	; 68
    1554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	8d 8b       	std	Y+21, r24	; 0x15
    155e:	9e 8b       	std	Y+22, r25	; 0x16
    1560:	af 8b       	std	Y+23, r26	; 0x17
    1562:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1564:	6d 89       	ldd	r22, Y+21	; 0x15
    1566:	7e 89       	ldd	r23, Y+22	; 0x16
    1568:	8f 89       	ldd	r24, Y+23	; 0x17
    156a:	98 8d       	ldd	r25, Y+24	; 0x18
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	40 e8       	ldi	r20, 0x80	; 128
    1572:	5f e3       	ldi	r21, 0x3F	; 63
    1574:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1578:	88 23       	and	r24, r24
    157a:	2c f4       	brge	.+10     	; 0x1586 <check_user_password+0x29e>
		__ticks = 1;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	9c 8b       	std	Y+20, r25	; 0x14
    1582:	8b 8b       	std	Y+19, r24	; 0x13
    1584:	3f c0       	rjmp	.+126    	; 0x1604 <check_user_password+0x31c>
	else if (__tmp > 65535)
    1586:	6d 89       	ldd	r22, Y+21	; 0x15
    1588:	7e 89       	ldd	r23, Y+22	; 0x16
    158a:	8f 89       	ldd	r24, Y+23	; 0x17
    158c:	98 8d       	ldd	r25, Y+24	; 0x18
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	3f ef       	ldi	r19, 0xFF	; 255
    1592:	4f e7       	ldi	r20, 0x7F	; 127
    1594:	57 e4       	ldi	r21, 0x47	; 71
    1596:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    159a:	18 16       	cp	r1, r24
    159c:	4c f5       	brge	.+82     	; 0x15f0 <check_user_password+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    159e:	69 8d       	ldd	r22, Y+25	; 0x19
    15a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e2       	ldi	r20, 0x20	; 32
    15ac:	51 e4       	ldi	r21, 0x41	; 65
    15ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	bc 01       	movw	r22, r24
    15b8:	cd 01       	movw	r24, r26
    15ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	9c 8b       	std	Y+20, r25	; 0x14
    15c4:	8b 8b       	std	Y+19, r24	; 0x13
    15c6:	0f c0       	rjmp	.+30     	; 0x15e6 <check_user_password+0x2fe>
    15c8:	88 ec       	ldi	r24, 0xC8	; 200
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	9a 8b       	std	Y+18, r25	; 0x12
    15ce:	89 8b       	std	Y+17, r24	; 0x11
    15d0:	89 89       	ldd	r24, Y+17	; 0x11
    15d2:	9a 89       	ldd	r25, Y+18	; 0x12
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <check_user_password+0x2ec>
    15d8:	9a 8b       	std	Y+18, r25	; 0x12
    15da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15dc:	8b 89       	ldd	r24, Y+19	; 0x13
    15de:	9c 89       	ldd	r25, Y+20	; 0x14
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	9c 8b       	std	Y+20, r25	; 0x14
    15e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e6:	8b 89       	ldd	r24, Y+19	; 0x13
    15e8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	69 f7       	brne	.-38     	; 0x15c8 <check_user_password+0x2e0>
    15ee:	14 c0       	rjmp	.+40     	; 0x1618 <check_user_password+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f0:	6d 89       	ldd	r22, Y+21	; 0x15
    15f2:	7e 89       	ldd	r23, Y+22	; 0x16
    15f4:	8f 89       	ldd	r24, Y+23	; 0x17
    15f6:	98 8d       	ldd	r25, Y+24	; 0x18
    15f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	9c 8b       	std	Y+20, r25	; 0x14
    1602:	8b 8b       	std	Y+19, r24	; 0x13
    1604:	8b 89       	ldd	r24, Y+19	; 0x13
    1606:	9c 89       	ldd	r25, Y+20	; 0x14
    1608:	98 8b       	std	Y+16, r25	; 0x10
    160a:	8f 87       	std	Y+15, r24	; 0x0f
    160c:	8f 85       	ldd	r24, Y+15	; 0x0f
    160e:	98 89       	ldd	r25, Y+16	; 0x10
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	f1 f7       	brne	.-4      	; 0x1610 <check_user_password+0x328>
    1614:	98 8b       	std	Y+16, r25	; 0x10
    1616:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		//flag eno ghalat w acheck alah henak fl
		//else if (Mode_of_main_menu == Change_Pass)
		mismatch_in_change_password=1;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	80 93 8a 00 	sts	0x008A, r24
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a8 e4       	ldi	r26, 0x48	; 72
    1624:	b2 e4       	ldi	r27, 0x42	; 66
    1626:	8b 87       	std	Y+11, r24	; 0x0b
    1628:	9c 87       	std	Y+12, r25	; 0x0c
    162a:	ad 87       	std	Y+13, r26	; 0x0d
    162c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1630:	7c 85       	ldd	r23, Y+12	; 0x0c
    1632:	8d 85       	ldd	r24, Y+13	; 0x0d
    1634:	9e 85       	ldd	r25, Y+14	; 0x0e
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	4a ef       	ldi	r20, 0xFA	; 250
    163c:	54 e4       	ldi	r21, 0x44	; 68
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	8f 83       	std	Y+7, r24	; 0x07
    1648:	98 87       	std	Y+8, r25	; 0x08
    164a:	a9 87       	std	Y+9, r26	; 0x09
    164c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    164e:	6f 81       	ldd	r22, Y+7	; 0x07
    1650:	78 85       	ldd	r23, Y+8	; 0x08
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	9a 85       	ldd	r25, Y+10	; 0x0a
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e8       	ldi	r20, 0x80	; 128
    165c:	5f e3       	ldi	r21, 0x3F	; 63
    165e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1662:	88 23       	and	r24, r24
    1664:	2c f4       	brge	.+10     	; 0x1670 <check_user_password+0x388>
		__ticks = 1;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
    166e:	3f c0       	rjmp	.+126    	; 0x16ee <check_user_password+0x406>
	else if (__tmp > 65535)
    1670:	6f 81       	ldd	r22, Y+7	; 0x07
    1672:	78 85       	ldd	r23, Y+8	; 0x08
    1674:	89 85       	ldd	r24, Y+9	; 0x09
    1676:	9a 85       	ldd	r25, Y+10	; 0x0a
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	3f ef       	ldi	r19, 0xFF	; 255
    167c:	4f e7       	ldi	r20, 0x7F	; 127
    167e:	57 e4       	ldi	r21, 0x47	; 71
    1680:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1684:	18 16       	cp	r1, r24
    1686:	4c f5       	brge	.+82     	; 0x16da <check_user_password+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1688:	6b 85       	ldd	r22, Y+11	; 0x0b
    168a:	7c 85       	ldd	r23, Y+12	; 0x0c
    168c:	8d 85       	ldd	r24, Y+13	; 0x0d
    168e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e2       	ldi	r20, 0x20	; 32
    1696:	51 e4       	ldi	r21, 0x41	; 65
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	8d 83       	std	Y+5, r24	; 0x05
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <check_user_password+0x3e8>
    16b2:	88 ec       	ldi	r24, 0xC8	; 200
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9c 83       	std	Y+4, r25	; 0x04
    16b8:	8b 83       	std	Y+3, r24	; 0x03
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <check_user_password+0x3d6>
    16c2:	9c 83       	std	Y+4, r25	; 0x04
    16c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	69 f7       	brne	.-38     	; 0x16b2 <check_user_password+0x3ca>
    16d8:	14 c0       	rjmp	.+40     	; 0x1702 <check_user_password+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16da:	6f 81       	ldd	r22, Y+7	; 0x07
    16dc:	78 85       	ldd	r23, Y+8	; 0x08
    16de:	89 85       	ldd	r24, Y+9	; 0x09
    16e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <check_user_password+0x412>
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01

	}
	_delay_ms(50);
}
    1702:	e9 96       	adiw	r28, 0x39	; 57
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <count_the_time>:
void count_the_time (void)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    171c:	80 91 8c 00 	lds	r24, 0x008C
    1720:	8f 5f       	subi	r24, 0xFF	; 255
    1722:	80 93 8c 00 	sts	0x008C, r24
}
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <door_lock_unlock>:

void door_lock_unlock(void)
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&timer1_data_init);
    1734:	8f e6       	ldi	r24, 0x6F	; 111
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 e6 10 	call	0x21cc	; 0x21cc <Timer1_init>
	Timer1_setCallBack(count_the_time);
    173c:	8a e8       	ldi	r24, 0x8A	; 138
    173e:	9b e0       	ldi	r25, 0x0B	; 11
    1740:	0e 94 46 11 	call	0x228c	; 0x228c <Timer1_setCallBack>
	/* run the motor for 15 sec*/
	DCMotor_Rotate(CW, 100);
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	64 e6       	ldi	r22, 0x64	; 100
    1748:	0e 94 26 0c 	call	0x184c	; 0x184c <DCMotor_Rotate>
	while (g_tick < 15){};
    174c:	80 91 8c 00 	lds	r24, 0x008C
    1750:	8f 30       	cpi	r24, 0x0F	; 15
    1752:	e0 f3       	brcs	.-8      	; 0x174c <door_lock_unlock+0x20>
	g_tick=0;
    1754:	10 92 8c 00 	sts	0x008C, r1

	/*hold for 3 sec */
	DCMotor_Rotate(CW, 0);
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	0e 94 26 0c 	call	0x184c	; 0x184c <DCMotor_Rotate>
	while (g_tick<3){};
    1760:	80 91 8c 00 	lds	r24, 0x008C
    1764:	83 30       	cpi	r24, 0x03	; 3
    1766:	e0 f3       	brcs	.-8      	; 0x1760 <door_lock_unlock+0x34>
	g_tick=0;
    1768:	10 92 8c 00 	sts	0x008C, r1

	/*rotate motor 15 sec anti CW */
	DCMotor_Rotate(A_CW, 100);
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	64 e6       	ldi	r22, 0x64	; 100
    1770:	0e 94 26 0c 	call	0x184c	; 0x184c <DCMotor_Rotate>
	while (g_tick<15){};
    1774:	80 91 8c 00 	lds	r24, 0x008C
    1778:	8f 30       	cpi	r24, 0x0F	; 15
    177a:	e0 f3       	brcs	.-8      	; 0x1774 <door_lock_unlock+0x48>
	g_tick=0;
    177c:	10 92 8c 00 	sts	0x008C, r1
	DCMotor_Rotate(CW, 0);
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	0e 94 26 0c 	call	0x184c	; 0x184c <DCMotor_Rotate>

	Timer1_deInit();
    1788:	0e 94 31 11 	call	0x2262	; 0x2262 <Timer1_deInit>
}
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <activate_buzzer_fun>:

void activate_buzzer_fun(void)
{
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&timer1_data_init);
    179a:	8f e6       	ldi	r24, 0x6F	; 111
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <Timer1_init>
	Timer1_setCallBack(count_the_time);
    17a2:	8a e8       	ldi	r24, 0x8A	; 138
    17a4:	9b e0       	ldi	r25, 0x0B	; 11
    17a6:	0e 94 46 11 	call	0x228c	; 0x228c <Timer1_setCallBack>
	Buzzer_on();
    17aa:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <Buzzer_on>
	while(g_tick < 60){};
    17ae:	80 91 8c 00 	lds	r24, 0x008C
    17b2:	8c 33       	cpi	r24, 0x3C	; 60
    17b4:	e0 f3       	brcs	.-8      	; 0x17ae <activate_buzzer_fun+0x1c>
	Buzzer_off();
    17b6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <Buzzer_off>
	g_tick=0;
    17ba:	10 92 8c 00 	sts	0x008C, r1
}
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <Buzzer_init>:
/*******************************************************************************
 * 						Function definitions
 *******************************************************************************/

void Buzzer_init()
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Buzzer_Port_Id, Buzzer_Pin_Id, PIN_OUTPUT);
    17cc:	83 e0       	ldi	r24, 0x03	; 3
    17ce:	62 e0       	ldi	r22, 0x02	; 2
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <GPIO_setupPinDirection>
	GPIO_writePin(Buzzer_Port_Id, Buzzer_Pin_Id, LOGIC_LOW);
    17d6:	83 e0       	ldi	r24, 0x03	; 3
    17d8:	62 e0       	ldi	r22, 0x02	; 2
    17da:	40 e0       	ldi	r20, 0x00	; 0
    17dc:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
}
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <Buzzer_on>:

void Buzzer_on(void)
{
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_Port_Id, Buzzer_Pin_Id, LOGIC_HIGH);
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	62 e0       	ldi	r22, 0x02	; 2
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
}
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <Buzzer_off>:

void Buzzer_off(void)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_Port_Id, Buzzer_Pin_Id, LOGIC_LOW);
    1806:	83 e0       	ldi	r24, 0x03	; 3
    1808:	62 e0       	ldi	r22, 0x02	; 2
    180a:	40 e0       	ldi	r20, 0x00	; 0
    180c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
}
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <DcMotor_Init>:
#include "dc_motor.h"
#include "std_types.h"
#include "gpio.h"

void DcMotor_Init(void)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * setting the pins directions
	 */
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN1_ID , PIN_OUTPUT);
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	41 e0       	ldi	r20, 0x01	; 1
    1824:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN2_ID, PIN_OUTPUT);
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	41 e0       	ldi	r20, 0x01	; 1
    182e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <GPIO_setupPinDirection>

	/*
	 * setting the initial value = 0 ;
	 */
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN1_ID, LOGIC_LOW);
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	40 e0       	ldi	r20, 0x00	; 0
    1838:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN2_ID, LOGIC_LOW);
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	61 e0       	ldi	r22, 0x01	; 1
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>

}
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <DCMotor_Rotate>:

void DCMotor_Rotate (DcMotor_State state,uint8 speed)
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	00 d0       	rcall	.+0      	; 0x1852 <DCMotor_Rotate+0x6>
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	6a 83       	std	Y+2, r22	; 0x02

	/*
	 * here I send the speed I got from the controller to the PWM generator to
	 * set the duty cycle of the motor
	 */
	 PWM_Timer0_Init(speed);
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 31 10 	call	0x2062	; 0x2062 <PWM_Timer0_Init>

	 /*
	  * if the state is clock-wise I rotate that way
	  * and if anti-clock-wise I rotate the other way
	  */
	if (state == CW)
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	88 23       	and	r24, r24
    1868:	59 f4       	brne	.+22     	; 0x1880 <DCMotor_Rotate+0x34>
	{
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN1_ID, LOGIC_HIGH);
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	41 e0       	ldi	r20, 0x01	; 1
    1870:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN2_ID, LOGIC_LOW);
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	40 e0       	ldi	r20, 0x00	; 0
    187a:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
    187e:	0d c0       	rjmp	.+26     	; 0x189a <DCMotor_Rotate+0x4e>
	}
	else if (state == A_CW)
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	51 f4       	brne	.+20     	; 0x189a <DCMotor_Rotate+0x4e>
	{
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN1_ID, LOGIC_LOW);
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN2_ID, LOGIC_HIGH);
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	41 e0       	ldi	r20, 0x01	; 1
    1896:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
	}
}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <EEPROM_writeByte+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <EEPROM_writeByte+0x8>
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    18b6:	0e 94 77 11 	call	0x22ee	; 0x22ee <TWI_start>
    if (TWI_getStatus() != TWI_START)
    18ba:	0e 94 cf 11 	call	0x239e	; 0x239e <TWI_getStatus>
    18be:	88 30       	cpi	r24, 0x08	; 8
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <EEPROM_writeByte+0x22>
        return ERROR;
    18c2:	1c 82       	std	Y+4, r1	; 0x04
    18c4:	28 c0       	rjmp	.+80     	; 0x1916 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	80 70       	andi	r24, 0x00	; 0
    18cc:	97 70       	andi	r25, 0x07	; 7
    18ce:	88 0f       	add	r24, r24
    18d0:	89 2f       	mov	r24, r25
    18d2:	88 1f       	adc	r24, r24
    18d4:	99 0b       	sbc	r25, r25
    18d6:	91 95       	neg	r25
    18d8:	80 6a       	ori	r24, 0xA0	; 160
    18da:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    18de:	0e 94 cf 11 	call	0x239e	; 0x239e <TWI_getStatus>
    18e2:	88 31       	cpi	r24, 0x18	; 24
    18e4:	11 f0       	breq	.+4      	; 0x18ea <EEPROM_writeByte+0x46>
        return ERROR; 
    18e6:	1c 82       	std	Y+4, r1	; 0x04
    18e8:	16 c0       	rjmp	.+44     	; 0x1916 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18f0:	0e 94 cf 11 	call	0x239e	; 0x239e <TWI_getStatus>
    18f4:	88 32       	cpi	r24, 0x28	; 40
    18f6:	11 f0       	breq	.+4      	; 0x18fc <EEPROM_writeByte+0x58>
        return ERROR;
    18f8:	1c 82       	std	Y+4, r1	; 0x04
    18fa:	0d c0       	rjmp	.+26     	; 0x1916 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1902:	0e 94 cf 11 	call	0x239e	; 0x239e <TWI_getStatus>
    1906:	88 32       	cpi	r24, 0x28	; 40
    1908:	11 f0       	breq	.+4      	; 0x190e <EEPROM_writeByte+0x6a>
        return ERROR;
    190a:	1c 82       	std	Y+4, r1	; 0x04
    190c:	04 c0       	rjmp	.+8      	; 0x1916 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    190e:	0e 94 87 11 	call	0x230e	; 0x230e <TWI_stop>
	
    return SUCCESS;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	8c 83       	std	Y+4, r24	; 0x04
    1916:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <EEPROM_readByte+0x6>
    192c:	00 d0       	rcall	.+0      	; 0x192e <EEPROM_readByte+0x8>
    192e:	0f 92       	push	r0
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	9a 83       	std	Y+2, r25	; 0x02
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	7c 83       	std	Y+4, r23	; 0x04
    193a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    193c:	0e 94 77 11 	call	0x22ee	; 0x22ee <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1940:	0e 94 cf 11 	call	0x239e	; 0x239e <TWI_getStatus>
    1944:	88 30       	cpi	r24, 0x08	; 8
    1946:	11 f0       	breq	.+4      	; 0x194c <EEPROM_readByte+0x26>
        return ERROR;
    1948:	1d 82       	std	Y+5, r1	; 0x05
    194a:	44 c0       	rjmp	.+136    	; 0x19d4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	80 70       	andi	r24, 0x00	; 0
    1952:	97 70       	andi	r25, 0x07	; 7
    1954:	88 0f       	add	r24, r24
    1956:	89 2f       	mov	r24, r25
    1958:	88 1f       	adc	r24, r24
    195a:	99 0b       	sbc	r25, r25
    195c:	91 95       	neg	r25
    195e:	80 6a       	ori	r24, 0xA0	; 160
    1960:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1964:	0e 94 cf 11 	call	0x239e	; 0x239e <TWI_getStatus>
    1968:	88 31       	cpi	r24, 0x18	; 24
    196a:	11 f0       	breq	.+4      	; 0x1970 <EEPROM_readByte+0x4a>
        return ERROR;
    196c:	1d 82       	std	Y+5, r1	; 0x05
    196e:	32 c0       	rjmp	.+100    	; 0x19d4 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1976:	0e 94 cf 11 	call	0x239e	; 0x239e <TWI_getStatus>
    197a:	88 32       	cpi	r24, 0x28	; 40
    197c:	11 f0       	breq	.+4      	; 0x1982 <EEPROM_readByte+0x5c>
        return ERROR;
    197e:	1d 82       	std	Y+5, r1	; 0x05
    1980:	29 c0       	rjmp	.+82     	; 0x19d4 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1982:	0e 94 77 11 	call	0x22ee	; 0x22ee <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1986:	0e 94 cf 11 	call	0x239e	; 0x239e <TWI_getStatus>
    198a:	80 31       	cpi	r24, 0x10	; 16
    198c:	11 f0       	breq	.+4      	; 0x1992 <EEPROM_readByte+0x6c>
        return ERROR;
    198e:	1d 82       	std	Y+5, r1	; 0x05
    1990:	21 c0       	rjmp	.+66     	; 0x19d4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	80 70       	andi	r24, 0x00	; 0
    1998:	97 70       	andi	r25, 0x07	; 7
    199a:	88 0f       	add	r24, r24
    199c:	89 2f       	mov	r24, r25
    199e:	88 1f       	adc	r24, r24
    19a0:	99 0b       	sbc	r25, r25
    19a2:	91 95       	neg	r25
    19a4:	81 6a       	ori	r24, 0xA1	; 161
    19a6:	0e 94 92 11 	call	0x2324	; 0x2324 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    19aa:	0e 94 cf 11 	call	0x239e	; 0x239e <TWI_getStatus>
    19ae:	80 34       	cpi	r24, 0x40	; 64
    19b0:	11 f0       	breq	.+4      	; 0x19b6 <EEPROM_readByte+0x90>
        return ERROR;
    19b2:	1d 82       	std	Y+5, r1	; 0x05
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    19b6:	0e 94 bc 11 	call	0x2378	; 0x2378 <TWI_readByteWithNACK>
    19ba:	eb 81       	ldd	r30, Y+3	; 0x03
    19bc:	fc 81       	ldd	r31, Y+4	; 0x04
    19be:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    19c0:	0e 94 cf 11 	call	0x239e	; 0x239e <TWI_getStatus>
    19c4:	88 35       	cpi	r24, 0x58	; 88
    19c6:	11 f0       	breq	.+4      	; 0x19cc <EEPROM_readByte+0xa6>
        return ERROR;
    19c8:	1d 82       	std	Y+5, r1	; 0x05
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    19cc:	0e 94 87 11 	call	0x230e	; 0x230e <TWI_stop>

    return SUCCESS;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	8d 83       	std	Y+5, r24	; 0x05
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <GPIO_setupPinDirection+0x6>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <GPIO_setupPinDirection+0x8>
    19ee:	0f 92       	push	r0
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	6a 83       	std	Y+2, r22	; 0x02
    19f8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	88 30       	cpi	r24, 0x08	; 8
    19fe:	08 f0       	brcs	.+2      	; 0x1a02 <GPIO_setupPinDirection+0x1c>
    1a00:	d5 c0       	rjmp	.+426    	; 0x1bac <GPIO_setupPinDirection+0x1c6>
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	84 30       	cpi	r24, 0x04	; 4
    1a06:	08 f0       	brcs	.+2      	; 0x1a0a <GPIO_setupPinDirection+0x24>
    1a08:	d1 c0       	rjmp	.+418    	; 0x1bac <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3d 83       	std	Y+5, r19	; 0x05
    1a12:	2c 83       	std	Y+4, r18	; 0x04
    1a14:	8c 81       	ldd	r24, Y+4	; 0x04
    1a16:	9d 81       	ldd	r25, Y+5	; 0x05
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <GPIO_setupPinDirection+0x3a>
    1a1e:	43 c0       	rjmp	.+134    	; 0x1aa6 <GPIO_setupPinDirection+0xc0>
    1a20:	2c 81       	ldd	r18, Y+4	; 0x04
    1a22:	3d 81       	ldd	r19, Y+5	; 0x05
    1a24:	22 30       	cpi	r18, 0x02	; 2
    1a26:	31 05       	cpc	r19, r1
    1a28:	2c f4       	brge	.+10     	; 0x1a34 <GPIO_setupPinDirection+0x4e>
    1a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	71 f0       	breq	.+28     	; 0x1a4e <GPIO_setupPinDirection+0x68>
    1a32:	bc c0       	rjmp	.+376    	; 0x1bac <GPIO_setupPinDirection+0x1c6>
    1a34:	2c 81       	ldd	r18, Y+4	; 0x04
    1a36:	3d 81       	ldd	r19, Y+5	; 0x05
    1a38:	22 30       	cpi	r18, 0x02	; 2
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <GPIO_setupPinDirection+0x5a>
    1a3e:	5f c0       	rjmp	.+190    	; 0x1afe <GPIO_setupPinDirection+0x118>
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	9d 81       	ldd	r25, Y+5	; 0x05
    1a44:	83 30       	cpi	r24, 0x03	; 3
    1a46:	91 05       	cpc	r25, r1
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <GPIO_setupPinDirection+0x66>
    1a4a:	85 c0       	rjmp	.+266    	; 0x1b56 <GPIO_setupPinDirection+0x170>
    1a4c:	af c0       	rjmp	.+350    	; 0x1bac <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	a1 f4       	brne	.+40     	; 0x1a7c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1a54:	aa e3       	ldi	r26, 0x3A	; 58
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	ea e3       	ldi	r30, 0x3A	; 58
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	48 2f       	mov	r20, r24
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	02 2e       	mov	r0, r18
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <GPIO_setupPinDirection+0x8c>
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	0a 94       	dec	r0
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <GPIO_setupPinDirection+0x88>
    1a76:	84 2b       	or	r24, r20
    1a78:	8c 93       	st	X, r24
    1a7a:	98 c0       	rjmp	.+304    	; 0x1bac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1a7c:	aa e3       	ldi	r26, 0x3A	; 58
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	ea e3       	ldi	r30, 0x3A	; 58
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	48 2f       	mov	r20, r24
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	02 2e       	mov	r0, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <GPIO_setupPinDirection+0xb4>
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	0a 94       	dec	r0
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <GPIO_setupPinDirection+0xb0>
    1a9e:	80 95       	com	r24
    1aa0:	84 23       	and	r24, r20
    1aa2:	8c 93       	st	X, r24
    1aa4:	83 c0       	rjmp	.+262    	; 0x1bac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	a1 f4       	brne	.+40     	; 0x1ad4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1aac:	a7 e3       	ldi	r26, 0x37	; 55
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e7 e3       	ldi	r30, 0x37	; 55
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	48 2f       	mov	r20, r24
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	02 2e       	mov	r0, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <GPIO_setupPinDirection+0xe4>
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	0a 94       	dec	r0
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <GPIO_setupPinDirection+0xe0>
    1ace:	84 2b       	or	r24, r20
    1ad0:	8c 93       	st	X, r24
    1ad2:	6c c0       	rjmp	.+216    	; 0x1bac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1ad4:	a7 e3       	ldi	r26, 0x37	; 55
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e7 e3       	ldi	r30, 0x37	; 55
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	48 2f       	mov	r20, r24
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	02 2e       	mov	r0, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <GPIO_setupPinDirection+0x10c>
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	0a 94       	dec	r0
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <GPIO_setupPinDirection+0x108>
    1af6:	80 95       	com	r24
    1af8:	84 23       	and	r24, r20
    1afa:	8c 93       	st	X, r24
    1afc:	57 c0       	rjmp	.+174    	; 0x1bac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	a1 f4       	brne	.+40     	; 0x1b2c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1b04:	a4 e3       	ldi	r26, 0x34	; 52
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e4 e3       	ldi	r30, 0x34	; 52
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <GPIO_setupPinDirection+0x13c>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <GPIO_setupPinDirection+0x138>
    1b26:	84 2b       	or	r24, r20
    1b28:	8c 93       	st	X, r24
    1b2a:	40 c0       	rjmp	.+128    	; 0x1bac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1b2c:	a4 e3       	ldi	r26, 0x34	; 52
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e4 e3       	ldi	r30, 0x34	; 52
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	48 2f       	mov	r20, r24
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 2e       	mov	r0, r18
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <GPIO_setupPinDirection+0x164>
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	0a 94       	dec	r0
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <GPIO_setupPinDirection+0x160>
    1b4e:	80 95       	com	r24
    1b50:	84 23       	and	r24, r20
    1b52:	8c 93       	st	X, r24
    1b54:	2b c0       	rjmp	.+86     	; 0x1bac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	a1 f4       	brne	.+40     	; 0x1b84 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1b5c:	a1 e3       	ldi	r26, 0x31	; 49
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e1 e3       	ldi	r30, 0x31	; 49
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	48 2f       	mov	r20, r24
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	02 2e       	mov	r0, r18
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <GPIO_setupPinDirection+0x194>
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	0a 94       	dec	r0
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <GPIO_setupPinDirection+0x190>
    1b7e:	84 2b       	or	r24, r20
    1b80:	8c 93       	st	X, r24
    1b82:	14 c0       	rjmp	.+40     	; 0x1bac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1b84:	a1 e3       	ldi	r26, 0x31	; 49
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e1 e3       	ldi	r30, 0x31	; 49
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	48 2f       	mov	r20, r24
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	02 2e       	mov	r0, r18
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <GPIO_setupPinDirection+0x1bc>
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	0a 94       	dec	r0
    1ba4:	e2 f7       	brpl	.-8      	; 0x1b9e <GPIO_setupPinDirection+0x1b8>
    1ba6:	80 95       	com	r24
    1ba8:	84 23       	and	r24, r20
    1baa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <GPIO_writePin+0x6>
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <GPIO_writePin+0x8>
    1bc4:	0f 92       	push	r0
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	6a 83       	std	Y+2, r22	; 0x02
    1bce:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	88 30       	cpi	r24, 0x08	; 8
    1bd4:	08 f0       	brcs	.+2      	; 0x1bd8 <GPIO_writePin+0x1c>
    1bd6:	d5 c0       	rjmp	.+426    	; 0x1d82 <GPIO_writePin+0x1c6>
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	08 f0       	brcs	.+2      	; 0x1be0 <GPIO_writePin+0x24>
    1bde:	d1 c0       	rjmp	.+418    	; 0x1d82 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	3d 83       	std	Y+5, r19	; 0x05
    1be8:	2c 83       	std	Y+4, r18	; 0x04
    1bea:	8c 81       	ldd	r24, Y+4	; 0x04
    1bec:	9d 81       	ldd	r25, Y+5	; 0x05
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <GPIO_writePin+0x3a>
    1bf4:	43 c0       	rjmp	.+134    	; 0x1c7c <GPIO_writePin+0xc0>
    1bf6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bfa:	22 30       	cpi	r18, 0x02	; 2
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	2c f4       	brge	.+10     	; 0x1c0a <GPIO_writePin+0x4e>
    1c00:	8c 81       	ldd	r24, Y+4	; 0x04
    1c02:	9d 81       	ldd	r25, Y+5	; 0x05
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	71 f0       	breq	.+28     	; 0x1c24 <GPIO_writePin+0x68>
    1c08:	bc c0       	rjmp	.+376    	; 0x1d82 <GPIO_writePin+0x1c6>
    1c0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c0e:	22 30       	cpi	r18, 0x02	; 2
    1c10:	31 05       	cpc	r19, r1
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <GPIO_writePin+0x5a>
    1c14:	5f c0       	rjmp	.+190    	; 0x1cd4 <GPIO_writePin+0x118>
    1c16:	8c 81       	ldd	r24, Y+4	; 0x04
    1c18:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1a:	83 30       	cpi	r24, 0x03	; 3
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <GPIO_writePin+0x66>
    1c20:	85 c0       	rjmp	.+266    	; 0x1d2c <GPIO_writePin+0x170>
    1c22:	af c0       	rjmp	.+350    	; 0x1d82 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	a1 f4       	brne	.+40     	; 0x1c52 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1c2a:	ab e3       	ldi	r26, 0x3B	; 59
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	eb e3       	ldi	r30, 0x3B	; 59
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	48 2f       	mov	r20, r24
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	02 2e       	mov	r0, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <GPIO_writePin+0x8c>
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	0a 94       	dec	r0
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <GPIO_writePin+0x88>
    1c4c:	84 2b       	or	r24, r20
    1c4e:	8c 93       	st	X, r24
    1c50:	98 c0       	rjmp	.+304    	; 0x1d82 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1c52:	ab e3       	ldi	r26, 0x3B	; 59
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	eb e3       	ldi	r30, 0x3B	; 59
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	48 2f       	mov	r20, r24
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	02 2e       	mov	r0, r18
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <GPIO_writePin+0xb4>
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	0a 94       	dec	r0
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <GPIO_writePin+0xb0>
    1c74:	80 95       	com	r24
    1c76:	84 23       	and	r24, r20
    1c78:	8c 93       	st	X, r24
    1c7a:	83 c0       	rjmp	.+262    	; 0x1d82 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	a1 f4       	brne	.+40     	; 0x1caa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1c82:	a8 e3       	ldi	r26, 0x38	; 56
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e8 e3       	ldi	r30, 0x38	; 56
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	48 2f       	mov	r20, r24
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 2e       	mov	r0, r18
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <GPIO_writePin+0xe4>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	0a 94       	dec	r0
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <GPIO_writePin+0xe0>
    1ca4:	84 2b       	or	r24, r20
    1ca6:	8c 93       	st	X, r24
    1ca8:	6c c0       	rjmp	.+216    	; 0x1d82 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1caa:	a8 e3       	ldi	r26, 0x38	; 56
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e8 e3       	ldi	r30, 0x38	; 56
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <GPIO_writePin+0x10c>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <GPIO_writePin+0x108>
    1ccc:	80 95       	com	r24
    1cce:	84 23       	and	r24, r20
    1cd0:	8c 93       	st	X, r24
    1cd2:	57 c0       	rjmp	.+174    	; 0x1d82 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	a1 f4       	brne	.+40     	; 0x1d02 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1cda:	a5 e3       	ldi	r26, 0x35	; 53
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e5 e3       	ldi	r30, 0x35	; 53
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	48 2f       	mov	r20, r24
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	02 2e       	mov	r0, r18
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <GPIO_writePin+0x13c>
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	0a 94       	dec	r0
    1cfa:	e2 f7       	brpl	.-8      	; 0x1cf4 <GPIO_writePin+0x138>
    1cfc:	84 2b       	or	r24, r20
    1cfe:	8c 93       	st	X, r24
    1d00:	40 c0       	rjmp	.+128    	; 0x1d82 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1d02:	a5 e3       	ldi	r26, 0x35	; 53
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e5 e3       	ldi	r30, 0x35	; 53
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	48 2f       	mov	r20, r24
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 2e       	mov	r0, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <GPIO_writePin+0x164>
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	0a 94       	dec	r0
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <GPIO_writePin+0x160>
    1d24:	80 95       	com	r24
    1d26:	84 23       	and	r24, r20
    1d28:	8c 93       	st	X, r24
    1d2a:	2b c0       	rjmp	.+86     	; 0x1d82 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	a1 f4       	brne	.+40     	; 0x1d5a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1d32:	a2 e3       	ldi	r26, 0x32	; 50
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e2 e3       	ldi	r30, 0x32	; 50
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	48 2f       	mov	r20, r24
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	02 2e       	mov	r0, r18
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <GPIO_writePin+0x194>
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	0a 94       	dec	r0
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <GPIO_writePin+0x190>
    1d54:	84 2b       	or	r24, r20
    1d56:	8c 93       	st	X, r24
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1d5a:	a2 e3       	ldi	r26, 0x32	; 50
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e2 e3       	ldi	r30, 0x32	; 50
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	48 2f       	mov	r20, r24
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 2e       	mov	r0, r18
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <GPIO_writePin+0x1bc>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	0a 94       	dec	r0
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <GPIO_writePin+0x1b8>
    1d7c:	80 95       	com	r24
    1d7e:	84 23       	and	r24, r20
    1d80:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <GPIO_readPin+0x6>
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <GPIO_readPin+0x8>
    1d9a:	0f 92       	push	r0
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	8a 83       	std	Y+2, r24	; 0x02
    1da2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1da4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	88 30       	cpi	r24, 0x08	; 8
    1daa:	08 f0       	brcs	.+2      	; 0x1dae <GPIO_readPin+0x1c>
    1dac:	84 c0       	rjmp	.+264    	; 0x1eb6 <GPIO_readPin+0x124>
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	84 30       	cpi	r24, 0x04	; 4
    1db2:	08 f0       	brcs	.+2      	; 0x1db6 <GPIO_readPin+0x24>
    1db4:	80 c0       	rjmp	.+256    	; 0x1eb6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	3d 83       	std	Y+5, r19	; 0x05
    1dbe:	2c 83       	std	Y+4, r18	; 0x04
    1dc0:	4c 81       	ldd	r20, Y+4	; 0x04
    1dc2:	5d 81       	ldd	r21, Y+5	; 0x05
    1dc4:	41 30       	cpi	r20, 0x01	; 1
    1dc6:	51 05       	cpc	r21, r1
    1dc8:	79 f1       	breq	.+94     	; 0x1e28 <GPIO_readPin+0x96>
    1dca:	8c 81       	ldd	r24, Y+4	; 0x04
    1dcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dce:	82 30       	cpi	r24, 0x02	; 2
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	34 f4       	brge	.+12     	; 0x1de0 <GPIO_readPin+0x4e>
    1dd4:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd6:	3d 81       	ldd	r19, Y+5	; 0x05
    1dd8:	21 15       	cp	r18, r1
    1dda:	31 05       	cpc	r19, r1
    1ddc:	69 f0       	breq	.+26     	; 0x1df8 <GPIO_readPin+0x66>
    1dde:	6b c0       	rjmp	.+214    	; 0x1eb6 <GPIO_readPin+0x124>
    1de0:	4c 81       	ldd	r20, Y+4	; 0x04
    1de2:	5d 81       	ldd	r21, Y+5	; 0x05
    1de4:	42 30       	cpi	r20, 0x02	; 2
    1de6:	51 05       	cpc	r21, r1
    1de8:	b9 f1       	breq	.+110    	; 0x1e58 <GPIO_readPin+0xc6>
    1dea:	8c 81       	ldd	r24, Y+4	; 0x04
    1dec:	9d 81       	ldd	r25, Y+5	; 0x05
    1dee:	83 30       	cpi	r24, 0x03	; 3
    1df0:	91 05       	cpc	r25, r1
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <GPIO_readPin+0x64>
    1df4:	49 c0       	rjmp	.+146    	; 0x1e88 <GPIO_readPin+0xf6>
    1df6:	5f c0       	rjmp	.+190    	; 0x1eb6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1df8:	e9 e3       	ldi	r30, 0x39	; 57
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	88 2f       	mov	r24, r24
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a9 01       	movw	r20, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <GPIO_readPin+0x7e>
    1e0c:	55 95       	asr	r21
    1e0e:	47 95       	ror	r20
    1e10:	8a 95       	dec	r24
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <GPIO_readPin+0x7a>
    1e14:	ca 01       	movw	r24, r20
    1e16:	81 70       	andi	r24, 0x01	; 1
    1e18:	90 70       	andi	r25, 0x00	; 0
    1e1a:	88 23       	and	r24, r24
    1e1c:	19 f0       	breq	.+6      	; 0x1e24 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	49 c0       	rjmp	.+146    	; 0x1eb6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e24:	19 82       	std	Y+1, r1	; 0x01
    1e26:	47 c0       	rjmp	.+142    	; 0x1eb6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1e28:	e6 e3       	ldi	r30, 0x36	; 54
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	88 2f       	mov	r24, r24
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	a9 01       	movw	r20, r18
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <GPIO_readPin+0xae>
    1e3c:	55 95       	asr	r21
    1e3e:	47 95       	ror	r20
    1e40:	8a 95       	dec	r24
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <GPIO_readPin+0xaa>
    1e44:	ca 01       	movw	r24, r20
    1e46:	81 70       	andi	r24, 0x01	; 1
    1e48:	90 70       	andi	r25, 0x00	; 0
    1e4a:	88 23       	and	r24, r24
    1e4c:	19 f0       	breq	.+6      	; 0x1e54 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	31 c0       	rjmp	.+98     	; 0x1eb6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e54:	19 82       	std	Y+1, r1	; 0x01
    1e56:	2f c0       	rjmp	.+94     	; 0x1eb6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1e58:	e3 e3       	ldi	r30, 0x33	; 51
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	88 2f       	mov	r24, r24
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a9 01       	movw	r20, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <GPIO_readPin+0xde>
    1e6c:	55 95       	asr	r21
    1e6e:	47 95       	ror	r20
    1e70:	8a 95       	dec	r24
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <GPIO_readPin+0xda>
    1e74:	ca 01       	movw	r24, r20
    1e76:	81 70       	andi	r24, 0x01	; 1
    1e78:	90 70       	andi	r25, 0x00	; 0
    1e7a:	88 23       	and	r24, r24
    1e7c:	19 f0       	breq	.+6      	; 0x1e84 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	19 c0       	rjmp	.+50     	; 0x1eb6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e84:	19 82       	std	Y+1, r1	; 0x01
    1e86:	17 c0       	rjmp	.+46     	; 0x1eb6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1e88:	e0 e3       	ldi	r30, 0x30	; 48
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a9 01       	movw	r20, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <GPIO_readPin+0x10e>
    1e9c:	55 95       	asr	r21
    1e9e:	47 95       	ror	r20
    1ea0:	8a 95       	dec	r24
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <GPIO_readPin+0x10a>
    1ea4:	ca 01       	movw	r24, r20
    1ea6:	81 70       	andi	r24, 0x01	; 1
    1ea8:	90 70       	andi	r25, 0x00	; 0
    1eaa:	88 23       	and	r24, r24
    1eac:	19 f0       	breq	.+6      	; 0x1eb4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	01 c0       	rjmp	.+2      	; 0x1eb6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1eb4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <GPIO_setupPortDirection+0x6>
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <GPIO_setupPortDirection+0x8>
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    1ed6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	84 30       	cpi	r24, 0x04	; 4
    1edc:	90 f5       	brcc	.+100    	; 0x1f42 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	3c 83       	std	Y+4, r19	; 0x04
    1ee6:	2b 83       	std	Y+3, r18	; 0x03
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	81 30       	cpi	r24, 0x01	; 1
    1eee:	91 05       	cpc	r25, r1
    1ef0:	d1 f0       	breq	.+52     	; 0x1f26 <GPIO_setupPortDirection+0x5e>
    1ef2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef6:	22 30       	cpi	r18, 0x02	; 2
    1ef8:	31 05       	cpc	r19, r1
    1efa:	2c f4       	brge	.+10     	; 0x1f06 <GPIO_setupPortDirection+0x3e>
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	61 f0       	breq	.+24     	; 0x1f1c <GPIO_setupPortDirection+0x54>
    1f04:	1e c0       	rjmp	.+60     	; 0x1f42 <GPIO_setupPortDirection+0x7a>
    1f06:	2b 81       	ldd	r18, Y+3	; 0x03
    1f08:	3c 81       	ldd	r19, Y+4	; 0x04
    1f0a:	22 30       	cpi	r18, 0x02	; 2
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	81 f0       	breq	.+32     	; 0x1f30 <GPIO_setupPortDirection+0x68>
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	9c 81       	ldd	r25, Y+4	; 0x04
    1f14:	83 30       	cpi	r24, 0x03	; 3
    1f16:	91 05       	cpc	r25, r1
    1f18:	81 f0       	breq	.+32     	; 0x1f3a <GPIO_setupPortDirection+0x72>
    1f1a:	13 c0       	rjmp	.+38     	; 0x1f42 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1f1c:	ea e3       	ldi	r30, 0x3A	; 58
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	80 83       	st	Z, r24
    1f24:	0e c0       	rjmp	.+28     	; 0x1f42 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1f26:	e7 e3       	ldi	r30, 0x37	; 55
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	80 83       	st	Z, r24
    1f2e:	09 c0       	rjmp	.+18     	; 0x1f42 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1f30:	e4 e3       	ldi	r30, 0x34	; 52
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	80 83       	st	Z, r24
    1f38:	04 c0       	rjmp	.+8      	; 0x1f42 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1f3a:	e1 e3       	ldi	r30, 0x31	; 49
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <GPIO_writePort+0x6>
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <GPIO_writePort+0x8>
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	89 83       	std	Y+1, r24	; 0x01
    1f5e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	84 30       	cpi	r24, 0x04	; 4
    1f64:	90 f5       	brcc	.+100    	; 0x1fca <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	3c 83       	std	Y+4, r19	; 0x04
    1f6e:	2b 83       	std	Y+3, r18	; 0x03
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	91 05       	cpc	r25, r1
    1f78:	d1 f0       	breq	.+52     	; 0x1fae <GPIO_writePort+0x5e>
    1f7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7e:	22 30       	cpi	r18, 0x02	; 2
    1f80:	31 05       	cpc	r19, r1
    1f82:	2c f4       	brge	.+10     	; 0x1f8e <GPIO_writePort+0x3e>
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	9c 81       	ldd	r25, Y+4	; 0x04
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	61 f0       	breq	.+24     	; 0x1fa4 <GPIO_writePort+0x54>
    1f8c:	1e c0       	rjmp	.+60     	; 0x1fca <GPIO_writePort+0x7a>
    1f8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f90:	3c 81       	ldd	r19, Y+4	; 0x04
    1f92:	22 30       	cpi	r18, 0x02	; 2
    1f94:	31 05       	cpc	r19, r1
    1f96:	81 f0       	breq	.+32     	; 0x1fb8 <GPIO_writePort+0x68>
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	83 30       	cpi	r24, 0x03	; 3
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	81 f0       	breq	.+32     	; 0x1fc2 <GPIO_writePort+0x72>
    1fa2:	13 c0       	rjmp	.+38     	; 0x1fca <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1fa4:	eb e3       	ldi	r30, 0x3B	; 59
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	80 83       	st	Z, r24
    1fac:	0e c0       	rjmp	.+28     	; 0x1fca <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1fae:	e8 e3       	ldi	r30, 0x38	; 56
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	80 83       	st	Z, r24
    1fb6:	09 c0       	rjmp	.+18     	; 0x1fca <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1fb8:	e5 e3       	ldi	r30, 0x35	; 53
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	80 83       	st	Z, r24
    1fc0:	04 c0       	rjmp	.+8      	; 0x1fca <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1fc2:	e2 e3       	ldi	r30, 0x32	; 50
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <GPIO_readPort+0x6>
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <GPIO_readPort+0x8>
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1fe6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	84 30       	cpi	r24, 0x04	; 4
    1fec:	90 f5       	brcc	.+100    	; 0x2052 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	3c 83       	std	Y+4, r19	; 0x04
    1ff6:	2b 83       	std	Y+3, r18	; 0x03
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffc:	81 30       	cpi	r24, 0x01	; 1
    1ffe:	91 05       	cpc	r25, r1
    2000:	d1 f0       	breq	.+52     	; 0x2036 <GPIO_readPort+0x5e>
    2002:	2b 81       	ldd	r18, Y+3	; 0x03
    2004:	3c 81       	ldd	r19, Y+4	; 0x04
    2006:	22 30       	cpi	r18, 0x02	; 2
    2008:	31 05       	cpc	r19, r1
    200a:	2c f4       	brge	.+10     	; 0x2016 <GPIO_readPort+0x3e>
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	9c 81       	ldd	r25, Y+4	; 0x04
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	61 f0       	breq	.+24     	; 0x202c <GPIO_readPort+0x54>
    2014:	1e c0       	rjmp	.+60     	; 0x2052 <GPIO_readPort+0x7a>
    2016:	2b 81       	ldd	r18, Y+3	; 0x03
    2018:	3c 81       	ldd	r19, Y+4	; 0x04
    201a:	22 30       	cpi	r18, 0x02	; 2
    201c:	31 05       	cpc	r19, r1
    201e:	81 f0       	breq	.+32     	; 0x2040 <GPIO_readPort+0x68>
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	83 30       	cpi	r24, 0x03	; 3
    2026:	91 05       	cpc	r25, r1
    2028:	81 f0       	breq	.+32     	; 0x204a <GPIO_readPort+0x72>
    202a:	13 c0       	rjmp	.+38     	; 0x2052 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    202c:	e9 e3       	ldi	r30, 0x39	; 57
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	0e c0       	rjmp	.+28     	; 0x2052 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2036:	e6 e3       	ldi	r30, 0x36	; 54
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	09 c0       	rjmp	.+18     	; 0x2052 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2040:	e3 e3       	ldi	r30, 0x33	; 51
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	04 c0       	rjmp	.+8      	; 0x2052 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    204a:	e0 e3       	ldi	r30, 0x30	; 48
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2052:	89 81       	ldd	r24, Y+1	; 0x01
}
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <PWM_Timer0_Init>:
#include "dc_motor.h"
#include <avr/io.h>


void PWM_Timer0_Init(uint8 speed)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	00 d0       	rcall	.+0      	; 0x2068 <PWM_Timer0_Init+0x6>
    2068:	00 d0       	rcall	.+0      	; 0x206a <PWM_Timer0_Init+0x8>
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	8a 83       	std	Y+2, r24	; 0x02
	/*Set Timer Initial value*/
	TCNT0 = 0;
    2070:	e2 e5       	ldi	r30, 0x52	; 82
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	10 82       	st	Z, r1
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */

	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2076:	e3 e5       	ldi	r30, 0x53	; 83
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	8a e6       	ldi	r24, 0x6A	; 106
    207c:	80 83       	st	Z, r24


	/*set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.*/
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	63 e0       	ldi	r22, 0x03	; 3
    2082:	41 e0       	ldi	r20, 0x01	; 1
    2084:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <GPIO_setupPinDirection>
	 * 25% of its max value which is 64 and so on
	 * */

	uint8 motor_speed;

	switch (speed)
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	3c 83       	std	Y+4, r19	; 0x04
    2090:	2b 83       	std	Y+3, r18	; 0x03
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	9c 81       	ldd	r25, Y+4	; 0x04
    2096:	82 33       	cpi	r24, 0x32	; 50
    2098:	91 05       	cpc	r25, r1
    209a:	f9 f0       	breq	.+62     	; 0x20da <PWM_Timer0_Init+0x78>
    209c:	2b 81       	ldd	r18, Y+3	; 0x03
    209e:	3c 81       	ldd	r19, Y+4	; 0x04
    20a0:	23 33       	cpi	r18, 0x33	; 51
    20a2:	31 05       	cpc	r19, r1
    20a4:	54 f4       	brge	.+20     	; 0x20ba <PWM_Timer0_Init+0x58>
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	9c 81       	ldd	r25, Y+4	; 0x04
    20aa:	00 97       	sbiw	r24, 0x00	; 0
    20ac:	89 f0       	breq	.+34     	; 0x20d0 <PWM_Timer0_Init+0x6e>
    20ae:	2b 81       	ldd	r18, Y+3	; 0x03
    20b0:	3c 81       	ldd	r19, Y+4	; 0x04
    20b2:	29 31       	cpi	r18, 0x19	; 25
    20b4:	31 05       	cpc	r19, r1
    20b6:	71 f0       	breq	.+28     	; 0x20d4 <PWM_Timer0_Init+0x72>
    20b8:	18 c0       	rjmp	.+48     	; 0x20ea <PWM_Timer0_Init+0x88>
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	9c 81       	ldd	r25, Y+4	; 0x04
    20be:	8b 34       	cpi	r24, 0x4B	; 75
    20c0:	91 05       	cpc	r25, r1
    20c2:	71 f0       	breq	.+28     	; 0x20e0 <PWM_Timer0_Init+0x7e>
    20c4:	2b 81       	ldd	r18, Y+3	; 0x03
    20c6:	3c 81       	ldd	r19, Y+4	; 0x04
    20c8:	24 36       	cpi	r18, 0x64	; 100
    20ca:	31 05       	cpc	r19, r1
    20cc:	61 f0       	breq	.+24     	; 0x20e6 <PWM_Timer0_Init+0x84>
    20ce:	0d c0       	rjmp	.+26     	; 0x20ea <PWM_Timer0_Init+0x88>
	{
	case 0: motor_speed=0;
    20d0:	19 82       	std	Y+1, r1	; 0x01
    20d2:	0b c0       	rjmp	.+22     	; 0x20ea <PWM_Timer0_Init+0x88>
			break;
	case 25: motor_speed=64;
    20d4:	80 e4       	ldi	r24, 0x40	; 64
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	08 c0       	rjmp	.+16     	; 0x20ea <PWM_Timer0_Init+0x88>
			break;
	case 50: motor_speed=128;
    20da:	80 e8       	ldi	r24, 0x80	; 128
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	05 c0       	rjmp	.+10     	; 0x20ea <PWM_Timer0_Init+0x88>
			break;
	case 75: motor_speed=192;
    20e0:	80 ec       	ldi	r24, 0xC0	; 192
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <PWM_Timer0_Init+0x88>
			break;
	case 100: motor_speed=255;
    20e6:	8f ef       	ldi	r24, 0xFF	; 255
    20e8:	89 83       	std	Y+1, r24	; 0x01
	}

	/*
	 * here is the compare value which will decide the motor duty cycle
	 */
	OCR0  = motor_speed;
    20ea:	ec e5       	ldi	r30, 0x5C	; 92
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	80 83       	st	Z, r24

}
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <__vector_7>:
/*******************************************************************************
 * 				ISR
 *******************************************************************************/

ISR (TIMER1_COMPA_vect)
{
    2100:	1f 92       	push	r1
    2102:	0f 92       	push	r0
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	0f 92       	push	r0
    2108:	11 24       	eor	r1, r1
    210a:	2f 93       	push	r18
    210c:	3f 93       	push	r19
    210e:	4f 93       	push	r20
    2110:	5f 93       	push	r21
    2112:	6f 93       	push	r22
    2114:	7f 93       	push	r23
    2116:	8f 93       	push	r24
    2118:	9f 93       	push	r25
    211a:	af 93       	push	r26
    211c:	bf 93       	push	r27
    211e:	ef 93       	push	r30
    2120:	ff 93       	push	r31
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    212a:	80 91 8d 00 	lds	r24, 0x008D
    212e:	90 91 8e 00 	lds	r25, 0x008E
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	29 f0       	breq	.+10     	; 0x2140 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2136:	e0 91 8d 00 	lds	r30, 0x008D
    213a:	f0 91 8e 00 	lds	r31, 0x008E
    213e:	09 95       	icall
	}
}
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	ff 91       	pop	r31
    2146:	ef 91       	pop	r30
    2148:	bf 91       	pop	r27
    214a:	af 91       	pop	r26
    214c:	9f 91       	pop	r25
    214e:	8f 91       	pop	r24
    2150:	7f 91       	pop	r23
    2152:	6f 91       	pop	r22
    2154:	5f 91       	pop	r21
    2156:	4f 91       	pop	r20
    2158:	3f 91       	pop	r19
    215a:	2f 91       	pop	r18
    215c:	0f 90       	pop	r0
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	0f 90       	pop	r0
    2162:	1f 90       	pop	r1
    2164:	18 95       	reti

00002166 <__vector_9>:

ISR (TIMER1_OVF_vect)
{
    2166:	1f 92       	push	r1
    2168:	0f 92       	push	r0
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	0f 92       	push	r0
    216e:	11 24       	eor	r1, r1
    2170:	2f 93       	push	r18
    2172:	3f 93       	push	r19
    2174:	4f 93       	push	r20
    2176:	5f 93       	push	r21
    2178:	6f 93       	push	r22
    217a:	7f 93       	push	r23
    217c:	8f 93       	push	r24
    217e:	9f 93       	push	r25
    2180:	af 93       	push	r26
    2182:	bf 93       	push	r27
    2184:	ef 93       	push	r30
    2186:	ff 93       	push	r31
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2190:	80 91 8d 00 	lds	r24, 0x008D
    2194:	90 91 8e 00 	lds	r25, 0x008E
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	29 f0       	breq	.+10     	; 0x21a6 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    219c:	e0 91 8d 00 	lds	r30, 0x008D
    21a0:	f0 91 8e 00 	lds	r31, 0x008E
    21a4:	09 95       	icall
	}
}
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	ff 91       	pop	r31
    21ac:	ef 91       	pop	r30
    21ae:	bf 91       	pop	r27
    21b0:	af 91       	pop	r26
    21b2:	9f 91       	pop	r25
    21b4:	8f 91       	pop	r24
    21b6:	7f 91       	pop	r23
    21b8:	6f 91       	pop	r22
    21ba:	5f 91       	pop	r21
    21bc:	4f 91       	pop	r20
    21be:	3f 91       	pop	r19
    21c0:	2f 91       	pop	r18
    21c2:	0f 90       	pop	r0
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	0f 90       	pop	r0
    21c8:	1f 90       	pop	r1
    21ca:	18 95       	reti

000021cc <Timer1_init>:
/*******************************************************************************
 * 				Function definitions
 *******************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <Timer1_init+0x6>
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	9a 83       	std	Y+2, r25	; 0x02
    21d8:	89 83       	std	Y+1, r24	; 0x01

	/* non-pwm */
	TCCR1A = (1<<FOC1A);
    21da:	ef e4       	ldi	r30, 0x4F	; 79
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	88 e0       	ldi	r24, 0x08	; 8
    21e0:	80 83       	st	Z, r24

	/* choose mode
	 * mode = 0 if normal
	 * mode = 0b00001000 if compare  */
	TCCR1B  = Config_Ptr->mode ;
    21e2:	ae e4       	ldi	r26, 0x4E	; 78
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e9 81       	ldd	r30, Y+1	; 0x01
    21e8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ea:	85 81       	ldd	r24, Z+5	; 0x05
    21ec:	8c 93       	st	X, r24

	/*initial value */
	TCNT1 = Config_Ptr->initial_value ;
    21ee:	ac e4       	ldi	r26, 0x4C	; 76
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e9 81       	ldd	r30, Y+1	; 0x01
    21f4:	fa 81       	ldd	r31, Y+2	; 0x02
    21f6:	80 81       	ld	r24, Z
    21f8:	91 81       	ldd	r25, Z+1	; 0x01
    21fa:	11 96       	adiw	r26, 0x01	; 1
    21fc:	9c 93       	st	X, r25
    21fe:	8e 93       	st	-X, r24

	if (Config_Ptr->mode == Compare)
    2200:	e9 81       	ldd	r30, Y+1	; 0x01
    2202:	fa 81       	ldd	r31, Y+2	; 0x02
    2204:	85 81       	ldd	r24, Z+5	; 0x05
    2206:	88 30       	cpi	r24, 0x08	; 8
    2208:	89 f4       	brne	.+34     	; 0x222c <Timer1_init+0x60>
	{
		/* compare value in compare mode */
		OCR1A = Config_Ptr->compare_value ;
    220a:	aa e4       	ldi	r26, 0x4A	; 74
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e9 81       	ldd	r30, Y+1	; 0x01
    2210:	fa 81       	ldd	r31, Y+2	; 0x02
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	93 81       	ldd	r25, Z+3	; 0x03
    2216:	11 96       	adiw	r26, 0x01	; 1
    2218:	9c 93       	st	X, r25
    221a:	8e 93       	st	-X, r24

		/* enable timer1 compare A interrupt */
		TIMSK |= (1<<OCIE1A);
    221c:	a9 e5       	ldi	r26, 0x59	; 89
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e9 e5       	ldi	r30, 0x59	; 89
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	80 61       	ori	r24, 0x10	; 16
    2228:	8c 93       	st	X, r24
    222a:	0c c0       	rjmp	.+24     	; 0x2244 <Timer1_init+0x78>
	}
	else if (Config_Ptr->mode == Normal)
    222c:	e9 81       	ldd	r30, Y+1	; 0x01
    222e:	fa 81       	ldd	r31, Y+2	; 0x02
    2230:	85 81       	ldd	r24, Z+5	; 0x05
    2232:	88 23       	and	r24, r24
    2234:	39 f4       	brne	.+14     	; 0x2244 <Timer1_init+0x78>
	{
		/* enable timer 1 overflow interrupt */
		TIMSK |= (1<<TOIE1);
    2236:	a9 e5       	ldi	r26, 0x59	; 89
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e9 e5       	ldi	r30, 0x59	; 89
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	84 60       	ori	r24, 0x04	; 4
    2242:	8c 93       	st	X, r24
	}

	/* set the clock prescaler */
	TCCR1B |= Config_Ptr->prescaler ;
    2244:	ae e4       	ldi	r26, 0x4E	; 78
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	ee e4       	ldi	r30, 0x4E	; 78
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	90 81       	ld	r25, Z
    224e:	e9 81       	ldd	r30, Y+1	; 0x01
    2250:	fa 81       	ldd	r31, Y+2	; 0x02
    2252:	84 81       	ldd	r24, Z+4	; 0x04
    2254:	89 2b       	or	r24, r25
    2256:	8c 93       	st	X, r24
}
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <Timer1_deInit>:

void Timer1_deInit(void)
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
 /*
  * set the registers to zero
  */
	TCCR1A=0;
    226a:	ef e4       	ldi	r30, 0x4F	; 79
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	10 82       	st	Z, r1
	TCCR1B=0;
    2270:	ee e4       	ldi	r30, 0x4E	; 78
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	10 82       	st	Z, r1
	TCNT1=0;
    2276:	ec e4       	ldi	r30, 0x4C	; 76
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	11 82       	std	Z+1, r1	; 0x01
    227c:	10 82       	st	Z, r1
	OCR1A=0;
    227e:	ea e4       	ldi	r30, 0x4A	; 74
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	11 82       	std	Z+1, r1	; 0x01
    2284:	10 82       	st	Z, r1
}
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	00 d0       	rcall	.+0      	; 0x2292 <Timer1_setCallBack+0x6>
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	90 93 8e 00 	sts	0x008E, r25
    22a2:	80 93 8d 00 	sts	0x008D, r24
}
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <TWI_init+0x6>
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	9a 83       	std	Y+2, r25	; 0x02
    22bc:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate;
    22be:	a0 e2       	ldi	r26, 0x20	; 32
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e9 81       	ldd	r30, Y+1	; 0x01
    22c4:	fa 81       	ldd	r31, Y+2	; 0x02
    22c6:	81 81       	ldd	r24, Z+1	; 0x01
    22c8:	8c 93       	st	X, r24
	TWSR = 0x00;
    22ca:	e1 e2       	ldi	r30, 0x21	; 33
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    22d0:	a2 e2       	ldi	r26, 0x22	; 34
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e9 81       	ldd	r30, Y+1	; 0x01
    22d6:	fa 81       	ldd	r31, Y+2	; 0x02
    22d8:	80 81       	ld	r24, Z
    22da:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    22dc:	e6 e5       	ldi	r30, 0x56	; 86
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	84 e0       	ldi	r24, 0x04	; 4
    22e2:	80 83       	st	Z, r24
}
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	08 95       	ret

000022ee <TWI_start>:

void TWI_start(void)
{
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    22f6:	e6 e5       	ldi	r30, 0x56	; 86
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	84 ea       	ldi	r24, 0xA4	; 164
    22fc:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22fe:	e6 e5       	ldi	r30, 0x56	; 86
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	88 23       	and	r24, r24
    2306:	dc f7       	brge	.-10     	; 0x22fe <TWI_start+0x10>
}
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <TWI_stop>:

void TWI_stop(void)
{
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2316:	e6 e5       	ldi	r30, 0x56	; 86
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	84 e9       	ldi	r24, 0x94	; 148
    231c:	80 83       	st	Z, r24
}
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	0f 92       	push	r0
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2330:	e3 e2       	ldi	r30, 0x23	; 35
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2338:	e6 e5       	ldi	r30, 0x56	; 86
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	84 e8       	ldi	r24, 0x84	; 132
    233e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2340:	e6 e5       	ldi	r30, 0x56	; 86
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	88 23       	and	r24, r24
    2348:	dc f7       	brge	.-10     	; 0x2340 <TWI_writeByte+0x1c>
}
    234a:	0f 90       	pop	r0
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    235a:	e6 e5       	ldi	r30, 0x56	; 86
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	84 ec       	ldi	r24, 0xC4	; 196
    2360:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2362:	e6 e5       	ldi	r30, 0x56	; 86
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	88 23       	and	r24, r24
    236a:	dc f7       	brge	.-10     	; 0x2362 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    236c:	e3 e2       	ldi	r30, 0x23	; 35
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
}
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	08 95       	ret

00002378 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2380:	e6 e5       	ldi	r30, 0x56	; 86
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	84 e8       	ldi	r24, 0x84	; 132
    2386:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2388:	e6 e5       	ldi	r30, 0x56	; 86
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	88 23       	and	r24, r24
    2390:	dc f7       	brge	.-10     	; 0x2388 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2392:	e3 e2       	ldi	r30, 0x23	; 35
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
}
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    239e:	df 93       	push	r29
    23a0:	cf 93       	push	r28
    23a2:	0f 92       	push	r0
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    23a8:	e1 e2       	ldi	r30, 0x21	; 33
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	88 7f       	andi	r24, 0xF8	; 248
    23b0:	89 83       	std	Y+1, r24	; 0x01
    return status;
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b4:	0f 90       	pop	r0
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <UART_init>:
#include "common_macros.h"



void UART_init(USART_INITIALIZATION * data_init)
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <UART_init+0x6>
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <UART_init+0x8>
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	9c 83       	std	Y+4, r25	; 0x04
    23ca:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    23cc:	1a 82       	std	Y+2, r1	; 0x02
    23ce:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * For register UCSRA
	 * Bit 1 – U2X: Double the USART Transmission Speed
	 * set this bit
	 */
	UCSRA = (1<<U2X);
    23d0:	eb e2       	ldi	r30, 0x2B	; 43
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	82 e0       	ldi	r24, 0x02	; 2
    23d6:	80 83       	st	Z, r24
	 * we will send by polling , receive by interrupts
	 * so we will set the RX Complete interrupt
	 * Bit 4 – RXEN: Receiver Enable (SET)
	 * Bit 3 – TXEN: Transmitter Enable (SET)
	 */
	UCSRB = (1<<RXEN) | (1<<TXEN);
    23d8:	ea e2       	ldi	r30, 0x2A	; 42
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	88 e1       	ldi	r24, 0x18	; 24
    23de:	80 83       	st	Z, r24

	/*
	 * For register UCSRC
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 */
	UCSRC = (1<<URSEL);
    23e0:	e0 e4       	ldi	r30, 0x40	; 64
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 e8       	ldi	r24, 0x80	; 128
    23e6:	80 83       	st	Z, r24
	/*
	 * for the parity bits
	 * Bit 5:4 – UPM1:0: Parity Mode
	 * we will choose depending on the config_data we got
	 */
	UCSRC |= data_init->parity;
    23e8:	a0 e4       	ldi	r26, 0x40	; 64
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e0 e4       	ldi	r30, 0x40	; 64
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	90 81       	ld	r25, Z
    23f2:	eb 81       	ldd	r30, Y+3	; 0x03
    23f4:	fc 81       	ldd	r31, Y+4	; 0x04
    23f6:	80 81       	ld	r24, Z
    23f8:	89 2b       	or	r24, r25
    23fa:	8c 93       	st	X, r24
	/*
	 * for the stop bit select
	 * Bit 3 – USBS: Stop Bit Select
	 * we will choose depending on the config_data we got
	 */
	UCSRC |= data_init->stop_bits;
    23fc:	a0 e4       	ldi	r26, 0x40	; 64
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	e0 e4       	ldi	r30, 0x40	; 64
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	90 81       	ld	r25, Z
    2406:	eb 81       	ldd	r30, Y+3	; 0x03
    2408:	fc 81       	ldd	r31, Y+4	; 0x04
    240a:	81 81       	ldd	r24, Z+1	; 0x01
    240c:	89 2b       	or	r24, r25
    240e:	8c 93       	st	X, r24
	/*
	 * for the character size (number of bits per frame)
	 * Bit 2:1 – UCSZ1:0: Character Size
	 * we will choose depending on the config_data we got
	 */
	UCSRC |= data_init->num_bits;
    2410:	a0 e4       	ldi	r26, 0x40	; 64
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e0 e4       	ldi	r30, 0x40	; 64
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	90 81       	ld	r25, Z
    241a:	eb 81       	ldd	r30, Y+3	; 0x03
    241c:	fc 81       	ldd	r31, Y+4	; 0x04
    241e:	82 81       	ldd	r24, Z+2	; 0x02
    2420:	89 2b       	or	r24, r25
    2422:	8c 93       	st	X, r24



	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (data_init->baud_rate * 8UL))) - 1);
    2424:	eb 81       	ldd	r30, Y+3	; 0x03
    2426:	fc 81       	ldd	r31, Y+4	; 0x04
    2428:	83 81       	ldd	r24, Z+3	; 0x03
    242a:	94 81       	ldd	r25, Z+4	; 0x04
    242c:	a5 81       	ldd	r26, Z+5	; 0x05
    242e:	b6 81       	ldd	r27, Z+6	; 0x06
    2430:	88 0f       	add	r24, r24
    2432:	99 1f       	adc	r25, r25
    2434:	aa 1f       	adc	r26, r26
    2436:	bb 1f       	adc	r27, r27
    2438:	88 0f       	add	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	aa 1f       	adc	r26, r26
    243e:	bb 1f       	adc	r27, r27
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	aa 1f       	adc	r26, r26
    2446:	bb 1f       	adc	r27, r27
    2448:	9c 01       	movw	r18, r24
    244a:	ad 01       	movw	r20, r26
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	92 e1       	ldi	r25, 0x12	; 18
    2450:	aa e7       	ldi	r26, 0x7A	; 122
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	bc 01       	movw	r22, r24
    2456:	cd 01       	movw	r24, r26
    2458:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__udivmodsi4>
    245c:	da 01       	movw	r26, r20
    245e:	c9 01       	movw	r24, r18
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	9a 83       	std	Y+2, r25	; 0x02
    2464:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2466:	e0 e4       	ldi	r30, 0x40	; 64
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	9a 81       	ldd	r25, Y+2	; 0x02
    246e:	89 2f       	mov	r24, r25
    2470:	99 27       	eor	r25, r25
    2472:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2474:	e9 e2       	ldi	r30, 0x29	; 41
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	80 83       	st	Z, r24

}
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	08 95       	ret

0000248a <UART_sendByte>:


void UART_sendByte(const uint8 data)
{
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	0f 92       	push	r0
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE))
    2496:	eb e2       	ldi	r30, 0x2B	; 43
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	88 2f       	mov	r24, r24
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	80 72       	andi	r24, 0x20	; 32
    24a2:	90 70       	andi	r25, 0x00	; 0
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	b9 f3       	breq	.-18     	; 0x2496 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    24a8:	ec e2       	ldi	r30, 0x2C	; 44
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	80 83       	st	Z, r24

}
    24b0:	0f 90       	pop	r0
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC))
    24c0:	eb e2       	ldi	r30, 0x2B	; 43
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	88 23       	and	r24, r24
    24c8:	dc f7       	brge	.-10     	; 0x24c0 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    24ca:	ec e2       	ldi	r30, 0x2C	; 44
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
}
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	00 d0       	rcall	.+0      	; 0x24dc <UART_sendString+0x6>
    24dc:	0f 92       	push	r0
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	9b 83       	std	Y+3, r25	; 0x03
    24e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24e6:	19 82       	std	Y+1, r1	; 0x01
    24e8:	0e c0       	rjmp	.+28     	; 0x2506 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	28 2f       	mov	r18, r24
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	9b 81       	ldd	r25, Y+3	; 0x03
    24f4:	fc 01       	movw	r30, r24
    24f6:	e2 0f       	add	r30, r18
    24f8:	f3 1f       	adc	r31, r19
    24fa:	80 81       	ld	r24, Z
    24fc:	0e 94 45 12 	call	0x248a	; 0x248a <UART_sendByte>
		i++;
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	8f 5f       	subi	r24, 0xFF	; 255
    2504:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	28 2f       	mov	r18, r24
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	9b 81       	ldd	r25, Y+3	; 0x03
    2510:	fc 01       	movw	r30, r24
    2512:	e2 0f       	add	r30, r18
    2514:	f3 1f       	adc	r31, r19
    2516:	80 81       	ld	r24, Z
    2518:	88 23       	and	r24, r24
    251a:	39 f7       	brne	.-50     	; 0x24ea <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2528:	0f 93       	push	r16
    252a:	1f 93       	push	r17
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	00 d0       	rcall	.+0      	; 0x2532 <UART_receiveString+0xa>
    2532:	0f 92       	push	r0
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	9b 83       	std	Y+3, r25	; 0x03
    253a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    253c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	28 2f       	mov	r18, r24
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	9b 81       	ldd	r25, Y+3	; 0x03
    2548:	8c 01       	movw	r16, r24
    254a:	02 0f       	add	r16, r18
    254c:	13 1f       	adc	r17, r19
    254e:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <UART_recieveByte>
    2552:	f8 01       	movw	r30, r16
    2554:	80 83       	st	Z, r24
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	8f 5f       	subi	r24, 0xFF	; 255
    255c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	9b 81       	ldd	r25, Y+3	; 0x03
    2568:	8c 01       	movw	r16, r24
    256a:	02 0f       	add	r16, r18
    256c:	13 1f       	adc	r17, r19
    256e:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <UART_recieveByte>
    2572:	f8 01       	movw	r30, r16
    2574:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	9b 81       	ldd	r25, Y+3	; 0x03
    2580:	fc 01       	movw	r30, r24
    2582:	e2 0f       	add	r30, r18
    2584:	f3 1f       	adc	r31, r19
    2586:	80 81       	ld	r24, Z
    2588:	83 32       	cpi	r24, 0x23	; 35
    258a:	31 f7       	brne	.-52     	; 0x2558 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	28 2f       	mov	r18, r24
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	9b 81       	ldd	r25, Y+3	; 0x03
    2596:	fc 01       	movw	r30, r24
    2598:	e2 0f       	add	r30, r18
    259a:	f3 1f       	adc	r31, r19
    259c:	10 82       	st	Z, r1
}
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	cf 91       	pop	r28
    25a6:	df 91       	pop	r29
    25a8:	1f 91       	pop	r17
    25aa:	0f 91       	pop	r16
    25ac:	08 95       	ret

000025ae <__udivmodsi4>:
    25ae:	a1 e2       	ldi	r26, 0x21	; 33
    25b0:	1a 2e       	mov	r1, r26
    25b2:	aa 1b       	sub	r26, r26
    25b4:	bb 1b       	sub	r27, r27
    25b6:	fd 01       	movw	r30, r26
    25b8:	0d c0       	rjmp	.+26     	; 0x25d4 <__udivmodsi4_ep>

000025ba <__udivmodsi4_loop>:
    25ba:	aa 1f       	adc	r26, r26
    25bc:	bb 1f       	adc	r27, r27
    25be:	ee 1f       	adc	r30, r30
    25c0:	ff 1f       	adc	r31, r31
    25c2:	a2 17       	cp	r26, r18
    25c4:	b3 07       	cpc	r27, r19
    25c6:	e4 07       	cpc	r30, r20
    25c8:	f5 07       	cpc	r31, r21
    25ca:	20 f0       	brcs	.+8      	; 0x25d4 <__udivmodsi4_ep>
    25cc:	a2 1b       	sub	r26, r18
    25ce:	b3 0b       	sbc	r27, r19
    25d0:	e4 0b       	sbc	r30, r20
    25d2:	f5 0b       	sbc	r31, r21

000025d4 <__udivmodsi4_ep>:
    25d4:	66 1f       	adc	r22, r22
    25d6:	77 1f       	adc	r23, r23
    25d8:	88 1f       	adc	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	1a 94       	dec	r1
    25de:	69 f7       	brne	.-38     	; 0x25ba <__udivmodsi4_loop>
    25e0:	60 95       	com	r22
    25e2:	70 95       	com	r23
    25e4:	80 95       	com	r24
    25e6:	90 95       	com	r25
    25e8:	9b 01       	movw	r18, r22
    25ea:	ac 01       	movw	r20, r24
    25ec:	bd 01       	movw	r22, r26
    25ee:	cf 01       	movw	r24, r30
    25f0:	08 95       	ret

000025f2 <__prologue_saves__>:
    25f2:	2f 92       	push	r2
    25f4:	3f 92       	push	r3
    25f6:	4f 92       	push	r4
    25f8:	5f 92       	push	r5
    25fa:	6f 92       	push	r6
    25fc:	7f 92       	push	r7
    25fe:	8f 92       	push	r8
    2600:	9f 92       	push	r9
    2602:	af 92       	push	r10
    2604:	bf 92       	push	r11
    2606:	cf 92       	push	r12
    2608:	df 92       	push	r13
    260a:	ef 92       	push	r14
    260c:	ff 92       	push	r15
    260e:	0f 93       	push	r16
    2610:	1f 93       	push	r17
    2612:	cf 93       	push	r28
    2614:	df 93       	push	r29
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	ca 1b       	sub	r28, r26
    261c:	db 0b       	sbc	r29, r27
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	09 94       	ijmp

0000262a <__epilogue_restores__>:
    262a:	2a 88       	ldd	r2, Y+18	; 0x12
    262c:	39 88       	ldd	r3, Y+17	; 0x11
    262e:	48 88       	ldd	r4, Y+16	; 0x10
    2630:	5f 84       	ldd	r5, Y+15	; 0x0f
    2632:	6e 84       	ldd	r6, Y+14	; 0x0e
    2634:	7d 84       	ldd	r7, Y+13	; 0x0d
    2636:	8c 84       	ldd	r8, Y+12	; 0x0c
    2638:	9b 84       	ldd	r9, Y+11	; 0x0b
    263a:	aa 84       	ldd	r10, Y+10	; 0x0a
    263c:	b9 84       	ldd	r11, Y+9	; 0x09
    263e:	c8 84       	ldd	r12, Y+8	; 0x08
    2640:	df 80       	ldd	r13, Y+7	; 0x07
    2642:	ee 80       	ldd	r14, Y+6	; 0x06
    2644:	fd 80       	ldd	r15, Y+5	; 0x05
    2646:	0c 81       	ldd	r16, Y+4	; 0x04
    2648:	1b 81       	ldd	r17, Y+3	; 0x03
    264a:	aa 81       	ldd	r26, Y+2	; 0x02
    264c:	b9 81       	ldd	r27, Y+1	; 0x01
    264e:	ce 0f       	add	r28, r30
    2650:	d1 1d       	adc	r29, r1
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	ed 01       	movw	r28, r26
    265e:	08 95       	ret

00002660 <strcmp>:
    2660:	fb 01       	movw	r30, r22
    2662:	dc 01       	movw	r26, r24
    2664:	8d 91       	ld	r24, X+
    2666:	01 90       	ld	r0, Z+
    2668:	80 19       	sub	r24, r0
    266a:	01 10       	cpse	r0, r1
    266c:	d9 f3       	breq	.-10     	; 0x2664 <strcmp+0x4>
    266e:	99 0b       	sbc	r25, r25
    2670:	08 95       	ret

00002672 <_exit>:
    2672:	f8 94       	cli

00002674 <__stop_program>:
    2674:	ff cf       	rjmp	.-2      	; 0x2674 <__stop_program>
