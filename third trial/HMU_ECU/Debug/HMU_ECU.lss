
HMU_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003490  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00003490  00003524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000e6  008000e6  000035aa  2**0
                  ALLOC
  3 .stab         000031f8  00000000  00000000  000035ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001379  00000000  00000000  000067a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a901  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b6b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b810  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ba9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c26b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3f       	cpi	r26, 0xF9	; 249
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 46 1a 	jmp	0x348c	; 0x348c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ed       	ldi	r26, 0xD1	; 209
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ed       	ldi	r24, 0xD1	; 209
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 * display error will display error message for 1 minute
 *
 *******************************************************************************/

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6d 97       	sbiw	r28, 0x1d	; 29
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 system_state ;
	SREG |= (1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
	LCD_init();
     b68:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <LCD_init>
	UART_init(&usart_data_init);
     b6c:	89 ed       	ldi	r24, 0xD9	; 217
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 af 18 	call	0x315e	; 0x315e <UART_init>

	/*initial system password is 12345 */

	check_new_password=UART_recieveByte();
     b74:	0e 94 2d 19 	call	0x325a	; 0x325a <UART_recieveByte>
     b78:	80 93 f8 00 	sts	0x00F8, r24
	if (check_new_password == start_setting_password)
     b7c:	80 91 f8 00 	lds	r24, 0x00F8
     b80:	86 39       	cpi	r24, 0x96	; 150
     b82:	11 f4       	brne	.+4      	; 0xb88 <main+0x42>
	{
	Create_Password();
     b84:	0e 94 c4 06 	call	0xd88	; 0xd88 <Create_Password>
		/* go to while(1) */
	}

	while(1)
	{
		LCD_clearScreen();
     b88:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_clearScreen>
		LCD_string_Display("+ : Open Door");
     b8c:	80 e6       	ldi	r24, 0x60	; 96
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 33 17 	call	0x2e66	; 0x2e66 <LCD_string_Display>
		LCD_displayStringRowColumn(1, 0, "- : Change Pass");
     b94:	2e e6       	ldi	r18, 0x6E	; 110
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	a9 01       	movw	r20, r18
     b9e:	0e 94 91 17 	call	0x2f22	; 0x2f22 <LCD_displayStringRowColumn>

		system_state = KEYPAD_getPressedKey();
     ba2:	0e 94 96 11 	call	0x232c	; 0x232c <KEYPAD_getPressedKey>
     ba6:	8d 8f       	std	Y+29, r24	; 0x1d
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	aa ef       	ldi	r26, 0xFA	; 250
     bae:	b3 e4       	ldi	r27, 0x43	; 67
     bb0:	89 8f       	std	Y+25, r24	; 0x19
     bb2:	9a 8f       	std	Y+26, r25	; 0x1a
     bb4:	ab 8f       	std	Y+27, r26	; 0x1b
     bb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb8:	69 8d       	ldd	r22, Y+25	; 0x19
     bba:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	4a e7       	ldi	r20, 0x7A	; 122
     bc6:	53 e4       	ldi	r21, 0x43	; 67
     bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bcc:	dc 01       	movw	r26, r24
     bce:	cb 01       	movw	r24, r22
     bd0:	8d 8b       	std	Y+21, r24	; 0x15
     bd2:	9e 8b       	std	Y+22, r25	; 0x16
     bd4:	af 8b       	std	Y+23, r26	; 0x17
     bd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bd8:	6d 89       	ldd	r22, Y+21	; 0x15
     bda:	7e 89       	ldd	r23, Y+22	; 0x16
     bdc:	8f 89       	ldd	r24, Y+23	; 0x17
     bde:	98 8d       	ldd	r25, Y+24	; 0x18
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	40 e8       	ldi	r20, 0x80	; 128
     be6:	5f e3       	ldi	r21, 0x3F	; 63
     be8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bec:	88 23       	and	r24, r24
     bee:	2c f4       	brge	.+10     	; 0xbfa <main+0xb4>
		__ticks = 1;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	9c 8b       	std	Y+20, r25	; 0x14
     bf6:	8b 8b       	std	Y+19, r24	; 0x13
     bf8:	3f c0       	rjmp	.+126    	; 0xc78 <main+0x132>
	else if (__tmp > 65535)
     bfa:	6d 89       	ldd	r22, Y+21	; 0x15
     bfc:	7e 89       	ldd	r23, Y+22	; 0x16
     bfe:	8f 89       	ldd	r24, Y+23	; 0x17
     c00:	98 8d       	ldd	r25, Y+24	; 0x18
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	3f ef       	ldi	r19, 0xFF	; 255
     c06:	4f e7       	ldi	r20, 0x7F	; 127
     c08:	57 e4       	ldi	r21, 0x47	; 71
     c0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c0e:	18 16       	cp	r1, r24
     c10:	4c f5       	brge	.+82     	; 0xc64 <main+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c12:	69 8d       	ldd	r22, Y+25	; 0x19
     c14:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c16:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c18:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e2       	ldi	r20, 0x20	; 32
     c20:	51 e4       	ldi	r21, 0x41	; 65
     c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	bc 01       	movw	r22, r24
     c2c:	cd 01       	movw	r24, r26
     c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	9c 8b       	std	Y+20, r25	; 0x14
     c38:	8b 8b       	std	Y+19, r24	; 0x13
     c3a:	0f c0       	rjmp	.+30     	; 0xc5a <main+0x114>
     c3c:	89 e1       	ldi	r24, 0x19	; 25
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	9a 8b       	std	Y+18, r25	; 0x12
     c42:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c44:	89 89       	ldd	r24, Y+17	; 0x11
     c46:	9a 89       	ldd	r25, Y+18	; 0x12
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <main+0x102>
     c4c:	9a 8b       	std	Y+18, r25	; 0x12
     c4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c50:	8b 89       	ldd	r24, Y+19	; 0x13
     c52:	9c 89       	ldd	r25, Y+20	; 0x14
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	9c 8b       	std	Y+20, r25	; 0x14
     c58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c5a:	8b 89       	ldd	r24, Y+19	; 0x13
     c5c:	9c 89       	ldd	r25, Y+20	; 0x14
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	69 f7       	brne	.-38     	; 0xc3c <main+0xf6>
     c62:	14 c0       	rjmp	.+40     	; 0xc8c <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c64:	6d 89       	ldd	r22, Y+21	; 0x15
     c66:	7e 89       	ldd	r23, Y+22	; 0x16
     c68:	8f 89       	ldd	r24, Y+23	; 0x17
     c6a:	98 8d       	ldd	r25, Y+24	; 0x18
     c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c70:	dc 01       	movw	r26, r24
     c72:	cb 01       	movw	r24, r22
     c74:	9c 8b       	std	Y+20, r25	; 0x14
     c76:	8b 8b       	std	Y+19, r24	; 0x13
     c78:	8b 89       	ldd	r24, Y+19	; 0x13
     c7a:	9c 89       	ldd	r25, Y+20	; 0x14
     c7c:	98 8b       	std	Y+16, r25	; 0x10
     c7e:	8f 87       	std	Y+15, r24	; 0x0f
     c80:	8f 85       	ldd	r24, Y+15	; 0x0f
     c82:	98 89       	ldd	r25, Y+16	; 0x10
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <main+0x13e>
     c88:	98 8b       	std	Y+16, r25	; 0x10
     c8a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);

		if (system_state == Open_Door)
     c8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8e:	8b 32       	cpi	r24, 0x2B	; 43
     c90:	19 f4       	brne	.+6      	; 0xc98 <main+0x152>
		{
			open_door_fun();
     c92:	0e 94 2e 0a 	call	0x145c	; 0x145c <open_door_fun>
     c96:	05 c0       	rjmp	.+10     	; 0xca2 <main+0x15c>
		}
		else if (system_state == Change_Pass)
     c98:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c9a:	8d 32       	cpi	r24, 0x2D	; 45
     c9c:	11 f4       	brne	.+4      	; 0xca2 <main+0x15c>
		{
			Change_Pass_fun();
     c9e:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <Change_Pass_fun>
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	a8 e4       	ldi	r26, 0x48	; 72
     ca8:	b2 e4       	ldi	r27, 0x42	; 66
     caa:	8b 87       	std	Y+11, r24	; 0x0b
     cac:	9c 87       	std	Y+12, r25	; 0x0c
     cae:	ad 87       	std	Y+13, r26	; 0x0d
     cb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb2:	6b 85       	ldd	r22, Y+11	; 0x0b
     cb4:	7c 85       	ldd	r23, Y+12	; 0x0c
     cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	4a e7       	ldi	r20, 0x7A	; 122
     cc0:	53 e4       	ldi	r21, 0x43	; 67
     cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	8f 83       	std	Y+7, r24	; 0x07
     ccc:	98 87       	std	Y+8, r25	; 0x08
     cce:	a9 87       	std	Y+9, r26	; 0x09
     cd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cd2:	6f 81       	ldd	r22, Y+7	; 0x07
     cd4:	78 85       	ldd	r23, Y+8	; 0x08
     cd6:	89 85       	ldd	r24, Y+9	; 0x09
     cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e8       	ldi	r20, 0x80	; 128
     ce0:	5f e3       	ldi	r21, 0x3F	; 63
     ce2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ce6:	88 23       	and	r24, r24
     ce8:	2c f4       	brge	.+10     	; 0xcf4 <main+0x1ae>
		__ticks = 1;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	9e 83       	std	Y+6, r25	; 0x06
     cf0:	8d 83       	std	Y+5, r24	; 0x05
     cf2:	3f c0       	rjmp	.+126    	; 0xd72 <main+0x22c>
	else if (__tmp > 65535)
     cf4:	6f 81       	ldd	r22, Y+7	; 0x07
     cf6:	78 85       	ldd	r23, Y+8	; 0x08
     cf8:	89 85       	ldd	r24, Y+9	; 0x09
     cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	3f ef       	ldi	r19, 0xFF	; 255
     d00:	4f e7       	ldi	r20, 0x7F	; 127
     d02:	57 e4       	ldi	r21, 0x47	; 71
     d04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d08:	18 16       	cp	r1, r24
     d0a:	4c f5       	brge	.+82     	; 0xd5e <main+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d10:	8d 85       	ldd	r24, Y+13	; 0x0d
     d12:	9e 85       	ldd	r25, Y+14	; 0x0e
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e2       	ldi	r20, 0x20	; 32
     d1a:	51 e4       	ldi	r21, 0x41	; 65
     d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	bc 01       	movw	r22, r24
     d26:	cd 01       	movw	r24, r26
     d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	9e 83       	std	Y+6, r25	; 0x06
     d32:	8d 83       	std	Y+5, r24	; 0x05
     d34:	0f c0       	rjmp	.+30     	; 0xd54 <main+0x20e>
     d36:	89 e1       	ldi	r24, 0x19	; 25
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9c 83       	std	Y+4, r25	; 0x04
     d3c:	8b 83       	std	Y+3, r24	; 0x03
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	9c 81       	ldd	r25, Y+4	; 0x04
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	f1 f7       	brne	.-4      	; 0xd42 <main+0x1fc>
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4a:	8d 81       	ldd	r24, Y+5	; 0x05
     d4c:	9e 81       	ldd	r25, Y+6	; 0x06
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	9e 83       	std	Y+6, r25	; 0x06
     d52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d54:	8d 81       	ldd	r24, Y+5	; 0x05
     d56:	9e 81       	ldd	r25, Y+6	; 0x06
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	69 f7       	brne	.-38     	; 0xd36 <main+0x1f0>
     d5c:	15 cf       	rjmp	.-470    	; 0xb88 <main+0x42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d5e:	6f 81       	ldd	r22, Y+7	; 0x07
     d60:	78 85       	ldd	r23, Y+8	; 0x08
     d62:	89 85       	ldd	r24, Y+9	; 0x09
     d64:	9a 85       	ldd	r25, Y+10	; 0x0a
     d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	9e 83       	std	Y+6, r25	; 0x06
     d70:	8d 83       	std	Y+5, r24	; 0x05
     d72:	8d 81       	ldd	r24, Y+5	; 0x05
     d74:	9e 81       	ldd	r25, Y+6	; 0x06
     d76:	9a 83       	std	Y+2, r25	; 0x02
     d78:	89 83       	std	Y+1, r24	; 0x01
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <main+0x238>
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	00 cf       	rjmp	.-512    	; 0xb88 <main+0x42>

00000d88 <Create_Password>:
/*******************************************************************************
 * 								function definitions
 *******************************************************************************/

void Create_Password(void)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	ab 97       	sbiw	r28, 0x2b	; 43
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{

		uint8 create_check_on_recieve;

		get_first_password();
     d9c:	0e 94 41 08 	call	0x1082	; 0x1082 <get_first_password>
		get_second_password();
     da0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <get_second_password>

		/* send the 2 passwords */

		UART_sendString(g_password);
     da4:	86 ee       	ldi	r24, 0xE6	; 230
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 3c 19 	call	0x3278	; 0x3278 <UART_sendString>
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	a8 ec       	ldi	r26, 0xC8	; 200
     db2:	b2 e4       	ldi	r27, 0x42	; 66
     db4:	8f a3       	std	Y+39, r24	; 0x27
     db6:	98 a7       	std	Y+40, r25	; 0x28
     db8:	a9 a7       	std	Y+41, r26	; 0x29
     dba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dbc:	6f a1       	ldd	r22, Y+39	; 0x27
     dbe:	78 a5       	ldd	r23, Y+40	; 0x28
     dc0:	89 a5       	ldd	r24, Y+41	; 0x29
     dc2:	9a a5       	ldd	r25, Y+42	; 0x2a
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	4a e7       	ldi	r20, 0x7A	; 122
     dca:	53 e4       	ldi	r21, 0x43	; 67
     dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	8b a3       	std	Y+35, r24	; 0x23
     dd6:	9c a3       	std	Y+36, r25	; 0x24
     dd8:	ad a3       	std	Y+37, r26	; 0x25
     dda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ddc:	6b a1       	ldd	r22, Y+35	; 0x23
     dde:	7c a1       	ldd	r23, Y+36	; 0x24
     de0:	8d a1       	ldd	r24, Y+37	; 0x25
     de2:	9e a1       	ldd	r25, Y+38	; 0x26
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e8       	ldi	r20, 0x80	; 128
     dea:	5f e3       	ldi	r21, 0x3F	; 63
     dec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df0:	88 23       	and	r24, r24
     df2:	2c f4       	brge	.+10     	; 0xdfe <Create_Password+0x76>
		__ticks = 1;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	9a a3       	std	Y+34, r25	; 0x22
     dfa:	89 a3       	std	Y+33, r24	; 0x21
     dfc:	3f c0       	rjmp	.+126    	; 0xe7c <Create_Password+0xf4>
	else if (__tmp > 65535)
     dfe:	6b a1       	ldd	r22, Y+35	; 0x23
     e00:	7c a1       	ldd	r23, Y+36	; 0x24
     e02:	8d a1       	ldd	r24, Y+37	; 0x25
     e04:	9e a1       	ldd	r25, Y+38	; 0x26
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	3f ef       	ldi	r19, 0xFF	; 255
     e0a:	4f e7       	ldi	r20, 0x7F	; 127
     e0c:	57 e4       	ldi	r21, 0x47	; 71
     e0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e12:	18 16       	cp	r1, r24
     e14:	4c f5       	brge	.+82     	; 0xe68 <Create_Password+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e16:	6f a1       	ldd	r22, Y+39	; 0x27
     e18:	78 a5       	ldd	r23, Y+40	; 0x28
     e1a:	89 a5       	ldd	r24, Y+41	; 0x29
     e1c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e2       	ldi	r20, 0x20	; 32
     e24:	51 e4       	ldi	r21, 0x41	; 65
     e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	bc 01       	movw	r22, r24
     e30:	cd 01       	movw	r24, r26
     e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	9a a3       	std	Y+34, r25	; 0x22
     e3c:	89 a3       	std	Y+33, r24	; 0x21
     e3e:	0f c0       	rjmp	.+30     	; 0xe5e <Create_Password+0xd6>
     e40:	89 e1       	ldi	r24, 0x19	; 25
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	98 a3       	std	Y+32, r25	; 0x20
     e46:	8f 8f       	std	Y+31, r24	; 0x1f
     e48:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e4a:	98 a1       	ldd	r25, Y+32	; 0x20
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <Create_Password+0xc4>
     e50:	98 a3       	std	Y+32, r25	; 0x20
     e52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e54:	89 a1       	ldd	r24, Y+33	; 0x21
     e56:	9a a1       	ldd	r25, Y+34	; 0x22
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	9a a3       	std	Y+34, r25	; 0x22
     e5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5e:	89 a1       	ldd	r24, Y+33	; 0x21
     e60:	9a a1       	ldd	r25, Y+34	; 0x22
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	69 f7       	brne	.-38     	; 0xe40 <Create_Password+0xb8>
     e66:	14 c0       	rjmp	.+40     	; 0xe90 <Create_Password+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e68:	6b a1       	ldd	r22, Y+35	; 0x23
     e6a:	7c a1       	ldd	r23, Y+36	; 0x24
     e6c:	8d a1       	ldd	r24, Y+37	; 0x25
     e6e:	9e a1       	ldd	r25, Y+38	; 0x26
     e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	9a a3       	std	Y+34, r25	; 0x22
     e7a:	89 a3       	std	Y+33, r24	; 0x21
     e7c:	89 a1       	ldd	r24, Y+33	; 0x21
     e7e:	9a a1       	ldd	r25, Y+34	; 0x22
     e80:	9e 8f       	std	Y+30, r25	; 0x1e
     e82:	8d 8f       	std	Y+29, r24	; 0x1d
     e84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e86:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <Create_Password+0x100>
     e8c:	9e 8f       	std	Y+30, r25	; 0x1e
     e8e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		UART_sendString(g_password_2);
     e90:	8d ee       	ldi	r24, 0xED	; 237
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 3c 19 	call	0x3278	; 0x3278 <UART_sendString>
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	a8 ec       	ldi	r26, 0xC8	; 200
     e9e:	b2 e4       	ldi	r27, 0x42	; 66
     ea0:	89 8f       	std	Y+25, r24	; 0x19
     ea2:	9a 8f       	std	Y+26, r25	; 0x1a
     ea4:	ab 8f       	std	Y+27, r26	; 0x1b
     ea6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea8:	69 8d       	ldd	r22, Y+25	; 0x19
     eaa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	4a e7       	ldi	r20, 0x7A	; 122
     eb6:	53 e4       	ldi	r21, 0x43	; 67
     eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	8d 8b       	std	Y+21, r24	; 0x15
     ec2:	9e 8b       	std	Y+22, r25	; 0x16
     ec4:	af 8b       	std	Y+23, r26	; 0x17
     ec6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ec8:	6d 89       	ldd	r22, Y+21	; 0x15
     eca:	7e 89       	ldd	r23, Y+22	; 0x16
     ecc:	8f 89       	ldd	r24, Y+23	; 0x17
     ece:	98 8d       	ldd	r25, Y+24	; 0x18
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e8       	ldi	r20, 0x80	; 128
     ed6:	5f e3       	ldi	r21, 0x3F	; 63
     ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     edc:	88 23       	and	r24, r24
     ede:	2c f4       	brge	.+10     	; 0xeea <Create_Password+0x162>
		__ticks = 1;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	9c 8b       	std	Y+20, r25	; 0x14
     ee6:	8b 8b       	std	Y+19, r24	; 0x13
     ee8:	3f c0       	rjmp	.+126    	; 0xf68 <Create_Password+0x1e0>
	else if (__tmp > 65535)
     eea:	6d 89       	ldd	r22, Y+21	; 0x15
     eec:	7e 89       	ldd	r23, Y+22	; 0x16
     eee:	8f 89       	ldd	r24, Y+23	; 0x17
     ef0:	98 8d       	ldd	r25, Y+24	; 0x18
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	3f ef       	ldi	r19, 0xFF	; 255
     ef6:	4f e7       	ldi	r20, 0x7F	; 127
     ef8:	57 e4       	ldi	r21, 0x47	; 71
     efa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     efe:	18 16       	cp	r1, r24
     f00:	4c f5       	brge	.+82     	; 0xf54 <Create_Password+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f02:	69 8d       	ldd	r22, Y+25	; 0x19
     f04:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f06:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f08:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e2       	ldi	r20, 0x20	; 32
     f10:	51 e4       	ldi	r21, 0x41	; 65
     f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	bc 01       	movw	r22, r24
     f1c:	cd 01       	movw	r24, r26
     f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	9c 8b       	std	Y+20, r25	; 0x14
     f28:	8b 8b       	std	Y+19, r24	; 0x13
     f2a:	0f c0       	rjmp	.+30     	; 0xf4a <Create_Password+0x1c2>
     f2c:	89 e1       	ldi	r24, 0x19	; 25
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9a 8b       	std	Y+18, r25	; 0x12
     f32:	89 8b       	std	Y+17, r24	; 0x11
     f34:	89 89       	ldd	r24, Y+17	; 0x11
     f36:	9a 89       	ldd	r25, Y+18	; 0x12
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <Create_Password+0x1b0>
     f3c:	9a 8b       	std	Y+18, r25	; 0x12
     f3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f40:	8b 89       	ldd	r24, Y+19	; 0x13
     f42:	9c 89       	ldd	r25, Y+20	; 0x14
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	9c 8b       	std	Y+20, r25	; 0x14
     f48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4a:	8b 89       	ldd	r24, Y+19	; 0x13
     f4c:	9c 89       	ldd	r25, Y+20	; 0x14
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	69 f7       	brne	.-38     	; 0xf2c <Create_Password+0x1a4>
     f52:	14 c0       	rjmp	.+40     	; 0xf7c <Create_Password+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f54:	6d 89       	ldd	r22, Y+21	; 0x15
     f56:	7e 89       	ldd	r23, Y+22	; 0x16
     f58:	8f 89       	ldd	r24, Y+23	; 0x17
     f5a:	98 8d       	ldd	r25, Y+24	; 0x18
     f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	9c 8b       	std	Y+20, r25	; 0x14
     f66:	8b 8b       	std	Y+19, r24	; 0x13
     f68:	8b 89       	ldd	r24, Y+19	; 0x13
     f6a:	9c 89       	ldd	r25, Y+20	; 0x14
     f6c:	98 8b       	std	Y+16, r25	; 0x10
     f6e:	8f 87       	std	Y+15, r24	; 0x0f
     f70:	8f 85       	ldd	r24, Y+15	; 0x0f
     f72:	98 89       	ldd	r25, Y+16	; 0x10
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	f1 f7       	brne	.-4      	; 0xf74 <Create_Password+0x1ec>
     f78:	98 8b       	std	Y+16, r25	; 0x10
     f7a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);

		/* receive the result either matched or not matched */
		create_check_on_recieve = UART_recieveByte();
     f7c:	0e 94 2d 19 	call	0x325a	; 0x325a <UART_recieveByte>
     f80:	8b a7       	std	Y+43, r24	; 0x2b

		if (create_check_on_recieve == Matched_Passwords)
     f82:	8b a5       	ldd	r24, Y+43	; 0x2b
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	09 f4       	brne	.+2      	; 0xf8a <Create_Password+0x202>
     f88:	73 c0       	rjmp	.+230    	; 0x1070 <Create_Password+0x2e8>
		{
			break;
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a8 e4       	ldi	r26, 0x48	; 72
     f90:	b2 e4       	ldi	r27, 0x42	; 66
     f92:	8b 87       	std	Y+11, r24	; 0x0b
     f94:	9c 87       	std	Y+12, r25	; 0x0c
     f96:	ad 87       	std	Y+13, r26	; 0x0d
     f98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	4a e7       	ldi	r20, 0x7A	; 122
     fa8:	53 e4       	ldi	r21, 0x43	; 67
     faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	8f 83       	std	Y+7, r24	; 0x07
     fb4:	98 87       	std	Y+8, r25	; 0x08
     fb6:	a9 87       	std	Y+9, r26	; 0x09
     fb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fba:	6f 81       	ldd	r22, Y+7	; 0x07
     fbc:	78 85       	ldd	r23, Y+8	; 0x08
     fbe:	89 85       	ldd	r24, Y+9	; 0x09
     fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	40 e8       	ldi	r20, 0x80	; 128
     fc8:	5f e3       	ldi	r21, 0x3F	; 63
     fca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fce:	88 23       	and	r24, r24
     fd0:	2c f4       	brge	.+10     	; 0xfdc <Create_Password+0x254>
		__ticks = 1;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	8d 83       	std	Y+5, r24	; 0x05
     fda:	3f c0       	rjmp	.+126    	; 0x105a <Create_Password+0x2d2>
	else if (__tmp > 65535)
     fdc:	6f 81       	ldd	r22, Y+7	; 0x07
     fde:	78 85       	ldd	r23, Y+8	; 0x08
     fe0:	89 85       	ldd	r24, Y+9	; 0x09
     fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	3f ef       	ldi	r19, 0xFF	; 255
     fe8:	4f e7       	ldi	r20, 0x7F	; 127
     fea:	57 e4       	ldi	r21, 0x47	; 71
     fec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ff0:	18 16       	cp	r1, r24
     ff2:	4c f5       	brge	.+82     	; 0x1046 <Create_Password+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e2       	ldi	r20, 0x20	; 32
    1002:	51 e4       	ldi	r21, 0x41	; 65
    1004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	bc 01       	movw	r22, r24
    100e:	cd 01       	movw	r24, r26
    1010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	9e 83       	std	Y+6, r25	; 0x06
    101a:	8d 83       	std	Y+5, r24	; 0x05
    101c:	0f c0       	rjmp	.+30     	; 0x103c <Create_Password+0x2b4>
    101e:	89 e1       	ldi	r24, 0x19	; 25
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	9c 83       	std	Y+4, r25	; 0x04
    1024:	8b 83       	std	Y+3, r24	; 0x03
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	f1 f7       	brne	.-4      	; 0x102a <Create_Password+0x2a2>
    102e:	9c 83       	std	Y+4, r25	; 0x04
    1030:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	9e 81       	ldd	r25, Y+6	; 0x06
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	9e 83       	std	Y+6, r25	; 0x06
    103a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	9e 81       	ldd	r25, Y+6	; 0x06
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	69 f7       	brne	.-38     	; 0x101e <Create_Password+0x296>
    1044:	ab ce       	rjmp	.-682    	; 0xd9c <Create_Password+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1046:	6f 81       	ldd	r22, Y+7	; 0x07
    1048:	78 85       	ldd	r23, Y+8	; 0x08
    104a:	89 85       	ldd	r24, Y+9	; 0x09
    104c:	9a 85       	ldd	r25, Y+10	; 0x0a
    104e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	9e 83       	std	Y+6, r25	; 0x06
    1058:	8d 83       	std	Y+5, r24	; 0x05
    105a:	8d 81       	ldd	r24, Y+5	; 0x05
    105c:	9e 81       	ldd	r25, Y+6	; 0x06
    105e:	9a 83       	std	Y+2, r25	; 0x02
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	9a 81       	ldd	r25, Y+2	; 0x02
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <Create_Password+0x2de>
    106a:	9a 83       	std	Y+2, r25	; 0x02
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	96 ce       	rjmp	.-724    	; 0xd9c <Create_Password+0x14>
		}
		else if (create_check_on_recieve == Unmatched_Passwords){}
		_delay_ms(50);
	}
}
    1070:	ab 96       	adiw	r28, 0x2b	; 43
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <get_first_password>:
void get_first_password(void)
{
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	2f 97       	sbiw	r28, 0x0f	; 15
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	LCD_clearScreen();
    109a:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_clearScreen>
	LCD_string_Display("Enter Pass:");
    109e:	8e e7       	ldi	r24, 0x7E	; 126
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 33 17 	call	0x2e66	; 0x2e66 <LCD_string_Display>
	LCD_moveCursor(1, 0);
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <LCD_moveCursor>

	/* get the first password from user */
	for (i=0 ; i<5 ; i++)
    10ae:	1f 86       	std	Y+15, r1	; 0x0f
    10b0:	82 c0       	rjmp	.+260    	; 0x11b6 <get_first_password+0x134>
	{
		g_password[i] = KEYPAD_getPressedKey()+ '0';
    10b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b4:	08 2f       	mov	r16, r24
    10b6:	10 e0       	ldi	r17, 0x00	; 0
    10b8:	0e 94 96 11 	call	0x232c	; 0x232c <KEYPAD_getPressedKey>
    10bc:	80 5d       	subi	r24, 0xD0	; 208
    10be:	f8 01       	movw	r30, r16
    10c0:	ea 51       	subi	r30, 0x1A	; 26
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	80 83       	st	Z, r24
		//LCD_display_Character(g_password[i]);
		LCD_display_Character('*');
    10c6:	8a e2       	ldi	r24, 0x2A	; 42
    10c8:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_display_Character>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	aa ef       	ldi	r26, 0xFA	; 250
    10d2:	b3 e4       	ldi	r27, 0x43	; 67
    10d4:	8b 87       	std	Y+11, r24	; 0x0b
    10d6:	9c 87       	std	Y+12, r25	; 0x0c
    10d8:	ad 87       	std	Y+13, r26	; 0x0d
    10da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    10de:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	4a e7       	ldi	r20, 0x7A	; 122
    10ea:	53 e4       	ldi	r21, 0x43	; 67
    10ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	8f 83       	std	Y+7, r24	; 0x07
    10f6:	98 87       	std	Y+8, r25	; 0x08
    10f8:	a9 87       	std	Y+9, r26	; 0x09
    10fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10fc:	6f 81       	ldd	r22, Y+7	; 0x07
    10fe:	78 85       	ldd	r23, Y+8	; 0x08
    1100:	89 85       	ldd	r24, Y+9	; 0x09
    1102:	9a 85       	ldd	r25, Y+10	; 0x0a
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e8       	ldi	r20, 0x80	; 128
    110a:	5f e3       	ldi	r21, 0x3F	; 63
    110c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1110:	88 23       	and	r24, r24
    1112:	2c f4       	brge	.+10     	; 0x111e <get_first_password+0x9c>
		__ticks = 1;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	9e 83       	std	Y+6, r25	; 0x06
    111a:	8d 83       	std	Y+5, r24	; 0x05
    111c:	3f c0       	rjmp	.+126    	; 0x119c <get_first_password+0x11a>
	else if (__tmp > 65535)
    111e:	6f 81       	ldd	r22, Y+7	; 0x07
    1120:	78 85       	ldd	r23, Y+8	; 0x08
    1122:	89 85       	ldd	r24, Y+9	; 0x09
    1124:	9a 85       	ldd	r25, Y+10	; 0x0a
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	3f ef       	ldi	r19, 0xFF	; 255
    112a:	4f e7       	ldi	r20, 0x7F	; 127
    112c:	57 e4       	ldi	r21, 0x47	; 71
    112e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1132:	18 16       	cp	r1, r24
    1134:	4c f5       	brge	.+82     	; 0x1188 <get_first_password+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1136:	6b 85       	ldd	r22, Y+11	; 0x0b
    1138:	7c 85       	ldd	r23, Y+12	; 0x0c
    113a:	8d 85       	ldd	r24, Y+13	; 0x0d
    113c:	9e 85       	ldd	r25, Y+14	; 0x0e
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e2       	ldi	r20, 0x20	; 32
    1144:	51 e4       	ldi	r21, 0x41	; 65
    1146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	9e 83       	std	Y+6, r25	; 0x06
    115c:	8d 83       	std	Y+5, r24	; 0x05
    115e:	0f c0       	rjmp	.+30     	; 0x117e <get_first_password+0xfc>
    1160:	89 e1       	ldi	r24, 0x19	; 25
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	9c 83       	std	Y+4, r25	; 0x04
    1166:	8b 83       	std	Y+3, r24	; 0x03
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <get_first_password+0xea>
    1170:	9c 83       	std	Y+4, r25	; 0x04
    1172:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1174:	8d 81       	ldd	r24, Y+5	; 0x05
    1176:	9e 81       	ldd	r25, Y+6	; 0x06
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	9e 83       	std	Y+6, r25	; 0x06
    117c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	69 f7       	brne	.-38     	; 0x1160 <get_first_password+0xde>
    1186:	14 c0       	rjmp	.+40     	; 0x11b0 <get_first_password+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1188:	6f 81       	ldd	r22, Y+7	; 0x07
    118a:	78 85       	ldd	r23, Y+8	; 0x08
    118c:	89 85       	ldd	r24, Y+9	; 0x09
    118e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	9e 83       	std	Y+6, r25	; 0x06
    119a:	8d 83       	std	Y+5, r24	; 0x05
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	9e 81       	ldd	r25, Y+6	; 0x06
    11a0:	9a 83       	std	Y+2, r25	; 0x02
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <get_first_password+0x126>
    11ac:	9a 83       	std	Y+2, r25	; 0x02
    11ae:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_string_Display("Enter Pass:");
	LCD_moveCursor(1, 0);

	/* get the first password from user */
	for (i=0 ; i<5 ; i++)
    11b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11b2:	8f 5f       	subi	r24, 0xFF	; 255
    11b4:	8f 87       	std	Y+15, r24	; 0x0f
    11b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11b8:	85 30       	cpi	r24, 0x05	; 5
    11ba:	08 f4       	brcc	.+2      	; 0x11be <get_first_password+0x13c>
    11bc:	7a cf       	rjmp	.-268    	; 0x10b2 <get_first_password+0x30>
		//LCD_display_Character(g_password[i]);
		LCD_display_Character('*');
		_delay_ms(500);

	}
	g_password[5]='#';
    11be:	83 e2       	ldi	r24, 0x23	; 35
    11c0:	80 93 eb 00 	sts	0x00EB, r24
	g_password[6]='\0';
    11c4:	10 92 ec 00 	sts	0x00EC, r1
	/* wait until he press enter */
	check_for_enter();
    11c8:	0e 94 a1 09 	call	0x1342	; 0x1342 <check_for_enter>
}
    11cc:	2f 96       	adiw	r28, 0x0f	; 15
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	08 95       	ret

000011e2 <get_second_password>:
void get_second_password(void)
{
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	2f 97       	sbiw	r28, 0x0f	; 15
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	LCD_clearScreen();
    11fa:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_clearScreen>

	LCD_string_Display("Re-enter Pass:");
    11fe:	8a e8       	ldi	r24, 0x8A	; 138
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 33 17 	call	0x2e66	; 0x2e66 <LCD_string_Display>
	LCD_moveCursor(1, 0);
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <LCD_moveCursor>

	/* get the first password from user */
	for (i=0 ; i<5 ; i++)
    120e:	1f 86       	std	Y+15, r1	; 0x0f
    1210:	82 c0       	rjmp	.+260    	; 0x1316 <get_second_password+0x134>
	{
		g_password_2[i] = KEYPAD_getPressedKey()+ '0';
    1212:	8f 85       	ldd	r24, Y+15	; 0x0f
    1214:	08 2f       	mov	r16, r24
    1216:	10 e0       	ldi	r17, 0x00	; 0
    1218:	0e 94 96 11 	call	0x232c	; 0x232c <KEYPAD_getPressedKey>
    121c:	80 5d       	subi	r24, 0xD0	; 208
    121e:	f8 01       	movw	r30, r16
    1220:	e3 51       	subi	r30, 0x13	; 19
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
    1224:	80 83       	st	Z, r24
		//LCD_display_Character(g_password_2[i]);
		LCD_display_Character('*');
    1226:	8a e2       	ldi	r24, 0x2A	; 42
    1228:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_display_Character>
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	aa ef       	ldi	r26, 0xFA	; 250
    1232:	b3 e4       	ldi	r27, 0x43	; 67
    1234:	8b 87       	std	Y+11, r24	; 0x0b
    1236:	9c 87       	std	Y+12, r25	; 0x0c
    1238:	ad 87       	std	Y+13, r26	; 0x0d
    123a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123c:	6b 85       	ldd	r22, Y+11	; 0x0b
    123e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1240:	8d 85       	ldd	r24, Y+13	; 0x0d
    1242:	9e 85       	ldd	r25, Y+14	; 0x0e
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	4a e7       	ldi	r20, 0x7A	; 122
    124a:	53 e4       	ldi	r21, 0x43	; 67
    124c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	8f 83       	std	Y+7, r24	; 0x07
    1256:	98 87       	std	Y+8, r25	; 0x08
    1258:	a9 87       	std	Y+9, r26	; 0x09
    125a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    125c:	6f 81       	ldd	r22, Y+7	; 0x07
    125e:	78 85       	ldd	r23, Y+8	; 0x08
    1260:	89 85       	ldd	r24, Y+9	; 0x09
    1262:	9a 85       	ldd	r25, Y+10	; 0x0a
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e8       	ldi	r20, 0x80	; 128
    126a:	5f e3       	ldi	r21, 0x3F	; 63
    126c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1270:	88 23       	and	r24, r24
    1272:	2c f4       	brge	.+10     	; 0x127e <get_second_password+0x9c>
		__ticks = 1;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	9e 83       	std	Y+6, r25	; 0x06
    127a:	8d 83       	std	Y+5, r24	; 0x05
    127c:	3f c0       	rjmp	.+126    	; 0x12fc <get_second_password+0x11a>
	else if (__tmp > 65535)
    127e:	6f 81       	ldd	r22, Y+7	; 0x07
    1280:	78 85       	ldd	r23, Y+8	; 0x08
    1282:	89 85       	ldd	r24, Y+9	; 0x09
    1284:	9a 85       	ldd	r25, Y+10	; 0x0a
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	3f ef       	ldi	r19, 0xFF	; 255
    128a:	4f e7       	ldi	r20, 0x7F	; 127
    128c:	57 e4       	ldi	r21, 0x47	; 71
    128e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1292:	18 16       	cp	r1, r24
    1294:	4c f5       	brge	.+82     	; 0x12e8 <get_second_password+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1296:	6b 85       	ldd	r22, Y+11	; 0x0b
    1298:	7c 85       	ldd	r23, Y+12	; 0x0c
    129a:	8d 85       	ldd	r24, Y+13	; 0x0d
    129c:	9e 85       	ldd	r25, Y+14	; 0x0e
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e2       	ldi	r20, 0x20	; 32
    12a4:	51 e4       	ldi	r21, 0x41	; 65
    12a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	bc 01       	movw	r22, r24
    12b0:	cd 01       	movw	r24, r26
    12b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	9e 83       	std	Y+6, r25	; 0x06
    12bc:	8d 83       	std	Y+5, r24	; 0x05
    12be:	0f c0       	rjmp	.+30     	; 0x12de <get_second_password+0xfc>
    12c0:	89 e1       	ldi	r24, 0x19	; 25
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	9c 83       	std	Y+4, r25	; 0x04
    12c6:	8b 83       	std	Y+3, r24	; 0x03
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <get_second_password+0xea>
    12d0:	9c 83       	std	Y+4, r25	; 0x04
    12d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d4:	8d 81       	ldd	r24, Y+5	; 0x05
    12d6:	9e 81       	ldd	r25, Y+6	; 0x06
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	9e 83       	std	Y+6, r25	; 0x06
    12dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	69 f7       	brne	.-38     	; 0x12c0 <get_second_password+0xde>
    12e6:	14 c0       	rjmp	.+40     	; 0x1310 <get_second_password+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ea:	78 85       	ldd	r23, Y+8	; 0x08
    12ec:	89 85       	ldd	r24, Y+9	; 0x09
    12ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	9e 83       	std	Y+6, r25	; 0x06
    12fa:	8d 83       	std	Y+5, r24	; 0x05
    12fc:	8d 81       	ldd	r24, Y+5	; 0x05
    12fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1300:	9a 83       	std	Y+2, r25	; 0x02
    1302:	89 83       	std	Y+1, r24	; 0x01
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <get_second_password+0x126>
    130c:	9a 83       	std	Y+2, r25	; 0x02
    130e:	89 83       	std	Y+1, r24	; 0x01

	LCD_string_Display("Re-enter Pass:");
	LCD_moveCursor(1, 0);

	/* get the first password from user */
	for (i=0 ; i<5 ; i++)
    1310:	8f 85       	ldd	r24, Y+15	; 0x0f
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	8f 87       	std	Y+15, r24	; 0x0f
    1316:	8f 85       	ldd	r24, Y+15	; 0x0f
    1318:	85 30       	cpi	r24, 0x05	; 5
    131a:	08 f4       	brcc	.+2      	; 0x131e <get_second_password+0x13c>
    131c:	7a cf       	rjmp	.-268    	; 0x1212 <get_second_password+0x30>
		g_password_2[i] = KEYPAD_getPressedKey()+ '0';
		//LCD_display_Character(g_password_2[i]);
		LCD_display_Character('*');
		_delay_ms(500);
	}
	g_password_2[5]='#';
    131e:	83 e2       	ldi	r24, 0x23	; 35
    1320:	80 93 f2 00 	sts	0x00F2, r24
	g_password_2[6]='\0';
    1324:	10 92 f3 00 	sts	0x00F3, r1
	/* wait until he press enter */
	check_for_enter();
    1328:	0e 94 a1 09 	call	0x1342	; 0x1342 <check_for_enter>
}
    132c:	2f 96       	adiw	r28, 0x0f	; 15
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	08 95       	ret

00001342 <check_for_enter>:
void check_for_enter(void)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	2f 97       	sbiw	r28, 0x0f	; 15
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
	uint8 check_enter;
	do{
		check_enter =KEYPAD_getPressedKey();
    1356:	0e 94 96 11 	call	0x232c	; 0x232c <KEYPAD_getPressedKey>
    135a:	8f 87       	std	Y+15, r24	; 0x0f
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	aa ef       	ldi	r26, 0xFA	; 250
    1362:	b3 e4       	ldi	r27, 0x43	; 67
    1364:	8b 87       	std	Y+11, r24	; 0x0b
    1366:	9c 87       	std	Y+12, r25	; 0x0c
    1368:	ad 87       	std	Y+13, r26	; 0x0d
    136a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136c:	6b 85       	ldd	r22, Y+11	; 0x0b
    136e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1370:	8d 85       	ldd	r24, Y+13	; 0x0d
    1372:	9e 85       	ldd	r25, Y+14	; 0x0e
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	4a e7       	ldi	r20, 0x7A	; 122
    137a:	53 e4       	ldi	r21, 0x43	; 67
    137c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	8f 83       	std	Y+7, r24	; 0x07
    1386:	98 87       	std	Y+8, r25	; 0x08
    1388:	a9 87       	std	Y+9, r26	; 0x09
    138a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    138c:	6f 81       	ldd	r22, Y+7	; 0x07
    138e:	78 85       	ldd	r23, Y+8	; 0x08
    1390:	89 85       	ldd	r24, Y+9	; 0x09
    1392:	9a 85       	ldd	r25, Y+10	; 0x0a
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e8       	ldi	r20, 0x80	; 128
    139a:	5f e3       	ldi	r21, 0x3F	; 63
    139c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a0:	88 23       	and	r24, r24
    13a2:	2c f4       	brge	.+10     	; 0x13ae <check_for_enter+0x6c>
		__ticks = 1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9e 83       	std	Y+6, r25	; 0x06
    13aa:	8d 83       	std	Y+5, r24	; 0x05
    13ac:	3f c0       	rjmp	.+126    	; 0x142c <check_for_enter+0xea>
	else if (__tmp > 65535)
    13ae:	6f 81       	ldd	r22, Y+7	; 0x07
    13b0:	78 85       	ldd	r23, Y+8	; 0x08
    13b2:	89 85       	ldd	r24, Y+9	; 0x09
    13b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	3f ef       	ldi	r19, 0xFF	; 255
    13ba:	4f e7       	ldi	r20, 0x7F	; 127
    13bc:	57 e4       	ldi	r21, 0x47	; 71
    13be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	4c f5       	brge	.+82     	; 0x1418 <check_for_enter+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    13cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e2       	ldi	r20, 0x20	; 32
    13d4:	51 e4       	ldi	r21, 0x41	; 65
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	bc 01       	movw	r22, r24
    13e0:	cd 01       	movw	r24, r26
    13e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	0f c0       	rjmp	.+30     	; 0x140e <check_for_enter+0xcc>
    13f0:	89 e1       	ldi	r24, 0x19	; 25
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9c 83       	std	Y+4, r25	; 0x04
    13f6:	8b 83       	std	Y+3, r24	; 0x03
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <check_for_enter+0xba>
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	69 f7       	brne	.-38     	; 0x13f0 <check_for_enter+0xae>
    1416:	14 c0       	rjmp	.+40     	; 0x1440 <check_for_enter+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1418:	6f 81       	ldd	r22, Y+7	; 0x07
    141a:	78 85       	ldd	r23, Y+8	; 0x08
    141c:	89 85       	ldd	r24, Y+9	; 0x09
    141e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	9a 83       	std	Y+2, r25	; 0x02
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	9a 81       	ldd	r25, Y+2	; 0x02
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <check_for_enter+0xf6>
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
	}while (check_enter!= 13);
    1440:	8f 85       	ldd	r24, Y+15	; 0x0f
    1442:	8d 30       	cpi	r24, 0x0D	; 13
    1444:	09 f0       	breq	.+2      	; 0x1448 <check_for_enter+0x106>
    1446:	87 cf       	rjmp	.-242    	; 0x1356 <check_for_enter+0x14>

	/* clear the check_enter variable */
	check_enter =0;
    1448:	1f 86       	std	Y+15, r1	; 0x0f
}
    144a:	2f 96       	adiw	r28, 0x0f	; 15
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <open_door_fun>:

void open_door_fun(void)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	ab 97       	sbiw	r28, 0x2b	; 43
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	74 c1       	rjmp	.+744    	; 0x175a <open_door_fun+0x2fe>
	while (counter_incorrect_pass != 3)
	{
		/* send a signal for the COTROL_ECU to tell him I am in the open door function */
		UART_sendByte(Open_Door);
    1472:	8b e2       	ldi	r24, 0x2B	; 43
    1474:	0e 94 16 19 	call	0x322c	; 0x322c <UART_sendByte>
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a8 ec       	ldi	r26, 0xC8	; 200
    147e:	b2 e4       	ldi	r27, 0x42	; 66
    1480:	8f a3       	std	Y+39, r24	; 0x27
    1482:	98 a7       	std	Y+40, r25	; 0x28
    1484:	a9 a7       	std	Y+41, r26	; 0x29
    1486:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1488:	6f a1       	ldd	r22, Y+39	; 0x27
    148a:	78 a5       	ldd	r23, Y+40	; 0x28
    148c:	89 a5       	ldd	r24, Y+41	; 0x29
    148e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	4a e7       	ldi	r20, 0x7A	; 122
    1496:	53 e4       	ldi	r21, 0x43	; 67
    1498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	8b a3       	std	Y+35, r24	; 0x23
    14a2:	9c a3       	std	Y+36, r25	; 0x24
    14a4:	ad a3       	std	Y+37, r26	; 0x25
    14a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14a8:	6b a1       	ldd	r22, Y+35	; 0x23
    14aa:	7c a1       	ldd	r23, Y+36	; 0x24
    14ac:	8d a1       	ldd	r24, Y+37	; 0x25
    14ae:	9e a1       	ldd	r25, Y+38	; 0x26
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e8       	ldi	r20, 0x80	; 128
    14b6:	5f e3       	ldi	r21, 0x3F	; 63
    14b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14bc:	88 23       	and	r24, r24
    14be:	2c f4       	brge	.+10     	; 0x14ca <open_door_fun+0x6e>
		__ticks = 1;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	9a a3       	std	Y+34, r25	; 0x22
    14c6:	89 a3       	std	Y+33, r24	; 0x21
    14c8:	3f c0       	rjmp	.+126    	; 0x1548 <open_door_fun+0xec>
	else if (__tmp > 65535)
    14ca:	6b a1       	ldd	r22, Y+35	; 0x23
    14cc:	7c a1       	ldd	r23, Y+36	; 0x24
    14ce:	8d a1       	ldd	r24, Y+37	; 0x25
    14d0:	9e a1       	ldd	r25, Y+38	; 0x26
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	3f ef       	ldi	r19, 0xFF	; 255
    14d6:	4f e7       	ldi	r20, 0x7F	; 127
    14d8:	57 e4       	ldi	r21, 0x47	; 71
    14da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14de:	18 16       	cp	r1, r24
    14e0:	4c f5       	brge	.+82     	; 0x1534 <open_door_fun+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e2:	6f a1       	ldd	r22, Y+39	; 0x27
    14e4:	78 a5       	ldd	r23, Y+40	; 0x28
    14e6:	89 a5       	ldd	r24, Y+41	; 0x29
    14e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e2       	ldi	r20, 0x20	; 32
    14f0:	51 e4       	ldi	r21, 0x41	; 65
    14f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	bc 01       	movw	r22, r24
    14fc:	cd 01       	movw	r24, r26
    14fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	9a a3       	std	Y+34, r25	; 0x22
    1508:	89 a3       	std	Y+33, r24	; 0x21
    150a:	0f c0       	rjmp	.+30     	; 0x152a <open_door_fun+0xce>
    150c:	89 e1       	ldi	r24, 0x19	; 25
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	98 a3       	std	Y+32, r25	; 0x20
    1512:	8f 8f       	std	Y+31, r24	; 0x1f
    1514:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1516:	98 a1       	ldd	r25, Y+32	; 0x20
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <open_door_fun+0xbc>
    151c:	98 a3       	std	Y+32, r25	; 0x20
    151e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1520:	89 a1       	ldd	r24, Y+33	; 0x21
    1522:	9a a1       	ldd	r25, Y+34	; 0x22
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	9a a3       	std	Y+34, r25	; 0x22
    1528:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152a:	89 a1       	ldd	r24, Y+33	; 0x21
    152c:	9a a1       	ldd	r25, Y+34	; 0x22
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	69 f7       	brne	.-38     	; 0x150c <open_door_fun+0xb0>
    1532:	14 c0       	rjmp	.+40     	; 0x155c <open_door_fun+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1534:	6b a1       	ldd	r22, Y+35	; 0x23
    1536:	7c a1       	ldd	r23, Y+36	; 0x24
    1538:	8d a1       	ldd	r24, Y+37	; 0x25
    153a:	9e a1       	ldd	r25, Y+38	; 0x26
    153c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	9a a3       	std	Y+34, r25	; 0x22
    1546:	89 a3       	std	Y+33, r24	; 0x21
    1548:	89 a1       	ldd	r24, Y+33	; 0x21
    154a:	9a a1       	ldd	r25, Y+34	; 0x22
    154c:	9e 8f       	std	Y+30, r25	; 0x1e
    154e:	8d 8f       	std	Y+29, r24	; 0x1d
    1550:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1552:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <open_door_fun+0xf8>
    1558:	9e 8f       	std	Y+30, r25	; 0x1e
    155a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);

		uint8 open_door_check_recieved;
		LCD_clearScreen();
    155c:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_clearScreen>
		get_first_password();
    1560:	0e 94 41 08 	call	0x1082	; 0x1082 <get_first_password>

		UART_sendString(g_password);
    1564:	86 ee       	ldi	r24, 0xE6	; 230
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 3c 19 	call	0x3278	; 0x3278 <UART_sendString>
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	a8 ec       	ldi	r26, 0xC8	; 200
    1572:	b2 e4       	ldi	r27, 0x42	; 66
    1574:	89 8f       	std	Y+25, r24	; 0x19
    1576:	9a 8f       	std	Y+26, r25	; 0x1a
    1578:	ab 8f       	std	Y+27, r26	; 0x1b
    157a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157c:	69 8d       	ldd	r22, Y+25	; 0x19
    157e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1580:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1582:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	4a e7       	ldi	r20, 0x7A	; 122
    158a:	53 e4       	ldi	r21, 0x43	; 67
    158c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	8d 8b       	std	Y+21, r24	; 0x15
    1596:	9e 8b       	std	Y+22, r25	; 0x16
    1598:	af 8b       	std	Y+23, r26	; 0x17
    159a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    159c:	6d 89       	ldd	r22, Y+21	; 0x15
    159e:	7e 89       	ldd	r23, Y+22	; 0x16
    15a0:	8f 89       	ldd	r24, Y+23	; 0x17
    15a2:	98 8d       	ldd	r25, Y+24	; 0x18
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	40 e8       	ldi	r20, 0x80	; 128
    15aa:	5f e3       	ldi	r21, 0x3F	; 63
    15ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15b0:	88 23       	and	r24, r24
    15b2:	2c f4       	brge	.+10     	; 0x15be <open_door_fun+0x162>
		__ticks = 1;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	9c 8b       	std	Y+20, r25	; 0x14
    15ba:	8b 8b       	std	Y+19, r24	; 0x13
    15bc:	3f c0       	rjmp	.+126    	; 0x163c <open_door_fun+0x1e0>
	else if (__tmp > 65535)
    15be:	6d 89       	ldd	r22, Y+21	; 0x15
    15c0:	7e 89       	ldd	r23, Y+22	; 0x16
    15c2:	8f 89       	ldd	r24, Y+23	; 0x17
    15c4:	98 8d       	ldd	r25, Y+24	; 0x18
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	3f ef       	ldi	r19, 0xFF	; 255
    15ca:	4f e7       	ldi	r20, 0x7F	; 127
    15cc:	57 e4       	ldi	r21, 0x47	; 71
    15ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15d2:	18 16       	cp	r1, r24
    15d4:	4c f5       	brge	.+82     	; 0x1628 <open_door_fun+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d6:	69 8d       	ldd	r22, Y+25	; 0x19
    15d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9c 8b       	std	Y+20, r25	; 0x14
    15fc:	8b 8b       	std	Y+19, r24	; 0x13
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <open_door_fun+0x1c2>
    1600:	89 e1       	ldi	r24, 0x19	; 25
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9a 8b       	std	Y+18, r25	; 0x12
    1606:	89 8b       	std	Y+17, r24	; 0x11
    1608:	89 89       	ldd	r24, Y+17	; 0x11
    160a:	9a 89       	ldd	r25, Y+18	; 0x12
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <open_door_fun+0x1b0>
    1610:	9a 8b       	std	Y+18, r25	; 0x12
    1612:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	8b 89       	ldd	r24, Y+19	; 0x13
    1616:	9c 89       	ldd	r25, Y+20	; 0x14
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	9c 8b       	std	Y+20, r25	; 0x14
    161c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161e:	8b 89       	ldd	r24, Y+19	; 0x13
    1620:	9c 89       	ldd	r25, Y+20	; 0x14
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	69 f7       	brne	.-38     	; 0x1600 <open_door_fun+0x1a4>
    1626:	14 c0       	rjmp	.+40     	; 0x1650 <open_door_fun+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1628:	6d 89       	ldd	r22, Y+21	; 0x15
    162a:	7e 89       	ldd	r23, Y+22	; 0x16
    162c:	8f 89       	ldd	r24, Y+23	; 0x17
    162e:	98 8d       	ldd	r25, Y+24	; 0x18
    1630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	9c 8b       	std	Y+20, r25	; 0x14
    163a:	8b 8b       	std	Y+19, r24	; 0x13
    163c:	8b 89       	ldd	r24, Y+19	; 0x13
    163e:	9c 89       	ldd	r25, Y+20	; 0x14
    1640:	98 8b       	std	Y+16, r25	; 0x10
    1642:	8f 87       	std	Y+15, r24	; 0x0f
    1644:	8f 85       	ldd	r24, Y+15	; 0x0f
    1646:	98 89       	ldd	r25, Y+16	; 0x10
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <open_door_fun+0x1ec>
    164c:	98 8b       	std	Y+16, r25	; 0x10
    164e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);

		open_door_check_recieved = UART_recieveByte();
    1650:	0e 94 2d 19 	call	0x325a	; 0x325a <UART_recieveByte>
    1654:	8b a7       	std	Y+43, r24	; 0x2b

		if (open_door_check_recieved == Matched_Passwords)
    1656:	8b a5       	ldd	r24, Y+43	; 0x2b
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	29 f4       	brne	.+10     	; 0x1666 <open_door_fun+0x20a>
		{
			counter_incorrect_pass=0;
    165c:	10 92 f4 00 	sts	0x00F4, r1
			motor_start_stop();
    1660:	0e 94 c5 0b 	call	0x178a	; 0x178a <motor_start_stop>
    1664:	7f c0       	rjmp	.+254    	; 0x1764 <open_door_fun+0x308>
			break;
		}
		else if (open_door_check_recieved == Unmatched_Passwords)
    1666:	8b a5       	ldd	r24, Y+43	; 0x2b
    1668:	88 23       	and	r24, r24
    166a:	29 f4       	brne	.+10     	; 0x1676 <open_door_fun+0x21a>
		{
			counter_incorrect_pass++;
    166c:	80 91 f4 00 	lds	r24, 0x00F4
    1670:	8f 5f       	subi	r24, 0xFF	; 255
    1672:	80 93 f4 00 	sts	0x00F4, r24
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a8 e4       	ldi	r26, 0x48	; 72
    167c:	b2 e4       	ldi	r27, 0x42	; 66
    167e:	8b 87       	std	Y+11, r24	; 0x0b
    1680:	9c 87       	std	Y+12, r25	; 0x0c
    1682:	ad 87       	std	Y+13, r26	; 0x0d
    1684:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1686:	6b 85       	ldd	r22, Y+11	; 0x0b
    1688:	7c 85       	ldd	r23, Y+12	; 0x0c
    168a:	8d 85       	ldd	r24, Y+13	; 0x0d
    168c:	9e 85       	ldd	r25, Y+14	; 0x0e
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	4a e7       	ldi	r20, 0x7A	; 122
    1694:	53 e4       	ldi	r21, 0x43	; 67
    1696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	8f 83       	std	Y+7, r24	; 0x07
    16a0:	98 87       	std	Y+8, r25	; 0x08
    16a2:	a9 87       	std	Y+9, r26	; 0x09
    16a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a6:	6f 81       	ldd	r22, Y+7	; 0x07
    16a8:	78 85       	ldd	r23, Y+8	; 0x08
    16aa:	89 85       	ldd	r24, Y+9	; 0x09
    16ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e8       	ldi	r20, 0x80	; 128
    16b4:	5f e3       	ldi	r21, 0x3F	; 63
    16b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ba:	88 23       	and	r24, r24
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <open_door_fun+0x26c>
		__ticks = 1;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	9e 83       	std	Y+6, r25	; 0x06
    16c4:	8d 83       	std	Y+5, r24	; 0x05
    16c6:	3f c0       	rjmp	.+126    	; 0x1746 <open_door_fun+0x2ea>
	else if (__tmp > 65535)
    16c8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ca:	78 85       	ldd	r23, Y+8	; 0x08
    16cc:	89 85       	ldd	r24, Y+9	; 0x09
    16ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	3f ef       	ldi	r19, 0xFF	; 255
    16d4:	4f e7       	ldi	r20, 0x7F	; 127
    16d6:	57 e4       	ldi	r21, 0x47	; 71
    16d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16dc:	18 16       	cp	r1, r24
    16de:	4c f5       	brge	.+82     	; 0x1732 <open_door_fun+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e2       	ldi	r20, 0x20	; 32
    16ee:	51 e4       	ldi	r21, 0x41	; 65
    16f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9e 83       	std	Y+6, r25	; 0x06
    1706:	8d 83       	std	Y+5, r24	; 0x05
    1708:	0f c0       	rjmp	.+30     	; 0x1728 <open_door_fun+0x2cc>
    170a:	89 e1       	ldi	r24, 0x19	; 25
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	9c 83       	std	Y+4, r25	; 0x04
    1710:	8b 83       	std	Y+3, r24	; 0x03
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <open_door_fun+0x2ba>
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	69 f7       	brne	.-38     	; 0x170a <open_door_fun+0x2ae>
    1730:	14 c0       	rjmp	.+40     	; 0x175a <open_door_fun+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1732:	6f 81       	ldd	r22, Y+7	; 0x07
    1734:	78 85       	ldd	r23, Y+8	; 0x08
    1736:	89 85       	ldd	r24, Y+9	; 0x09
    1738:	9a 85       	ldd	r25, Y+10	; 0x0a
    173a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9e 83       	std	Y+6, r25	; 0x06
    1744:	8d 83       	std	Y+5, r24	; 0x05
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <open_door_fun+0x2f6>
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
	check_enter =0;
}

void open_door_fun(void)
{
	while (counter_incorrect_pass != 3)
    175a:	80 91 f4 00 	lds	r24, 0x00F4
    175e:	83 30       	cpi	r24, 0x03	; 3
    1760:	09 f0       	breq	.+2      	; 0x1764 <open_door_fun+0x308>
    1762:	87 ce       	rjmp	.-754    	; 0x1472 <open_door_fun+0x16>
		{
			counter_incorrect_pass++;
		}
		_delay_ms(50);
	}
	if (counter_incorrect_pass ==3)
    1764:	80 91 f4 00 	lds	r24, 0x00F4
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	31 f4       	brne	.+12     	; 0x1778 <open_door_fun+0x31c>
	{
		counter_incorrect_pass=0;
    176c:	10 92 f4 00 	sts	0x00F4, r1
		Activate_buzzer();
    1770:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Activate_buzzer>
		Display_error();
    1774:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <Display_error>
	}
}
    1778:	ab 96       	adiw	r28, 0x2b	; 43
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <motor_start_stop>:


void motor_start_stop(void)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	2e 97       	sbiw	r28, 0x0e	; 14
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(rotate_motor);
    179e:	85 e0       	ldi	r24, 0x05	; 5
    17a0:	0e 94 16 19 	call	0x322c	; 0x322c <UART_sendByte>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a8 ec       	ldi	r26, 0xC8	; 200
    17aa:	b2 e4       	ldi	r27, 0x42	; 66
    17ac:	8b 87       	std	Y+11, r24	; 0x0b
    17ae:	9c 87       	std	Y+12, r25	; 0x0c
    17b0:	ad 87       	std	Y+13, r26	; 0x0d
    17b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a e7       	ldi	r20, 0x7A	; 122
    17c2:	53 e4       	ldi	r21, 0x43	; 67
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	8f 83       	std	Y+7, r24	; 0x07
    17ce:	98 87       	std	Y+8, r25	; 0x08
    17d0:	a9 87       	std	Y+9, r26	; 0x09
    17d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17d4:	6f 81       	ldd	r22, Y+7	; 0x07
    17d6:	78 85       	ldd	r23, Y+8	; 0x08
    17d8:	89 85       	ldd	r24, Y+9	; 0x09
    17da:	9a 85       	ldd	r25, Y+10	; 0x0a
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e8       	ldi	r20, 0x80	; 128
    17e2:	5f e3       	ldi	r21, 0x3F	; 63
    17e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17e8:	88 23       	and	r24, r24
    17ea:	2c f4       	brge	.+10     	; 0x17f6 <motor_start_stop+0x6c>
		__ticks = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	3f c0       	rjmp	.+126    	; 0x1874 <motor_start_stop+0xea>
	else if (__tmp > 65535)
    17f6:	6f 81       	ldd	r22, Y+7	; 0x07
    17f8:	78 85       	ldd	r23, Y+8	; 0x08
    17fa:	89 85       	ldd	r24, Y+9	; 0x09
    17fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	3f ef       	ldi	r19, 0xFF	; 255
    1802:	4f e7       	ldi	r20, 0x7F	; 127
    1804:	57 e4       	ldi	r21, 0x47	; 71
    1806:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    180a:	18 16       	cp	r1, r24
    180c:	4c f5       	brge	.+82     	; 0x1860 <motor_start_stop+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1810:	7c 85       	ldd	r23, Y+12	; 0x0c
    1812:	8d 85       	ldd	r24, Y+13	; 0x0d
    1814:	9e 85       	ldd	r25, Y+14	; 0x0e
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e2       	ldi	r20, 0x20	; 32
    181c:	51 e4       	ldi	r21, 0x41	; 65
    181e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9e 83       	std	Y+6, r25	; 0x06
    1834:	8d 83       	std	Y+5, r24	; 0x05
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <motor_start_stop+0xcc>
    1838:	89 e1       	ldi	r24, 0x19	; 25
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9c 83       	std	Y+4, r25	; 0x04
    183e:	8b 83       	std	Y+3, r24	; 0x03
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <motor_start_stop+0xba>
    1848:	9c 83       	std	Y+4, r25	; 0x04
    184a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	69 f7       	brne	.-38     	; 0x1838 <motor_start_stop+0xae>
    185e:	14 c0       	rjmp	.+40     	; 0x1888 <motor_start_stop+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1860:	6f 81       	ldd	r22, Y+7	; 0x07
    1862:	78 85       	ldd	r23, Y+8	; 0x08
    1864:	89 85       	ldd	r24, Y+9	; 0x09
    1866:	9a 85       	ldd	r25, Y+10	; 0x0a
    1868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	9e 83       	std	Y+6, r25	; 0x06
    1872:	8d 83       	std	Y+5, r24	; 0x05
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	9e 81       	ldd	r25, Y+6	; 0x06
    1878:	9a 83       	std	Y+2, r25	; 0x02
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <motor_start_stop+0xf6>
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	Timer1_init(&timer1_data_init);
    1888:	80 ee       	ldi	r24, 0xE0	; 224
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 3d 18 	call	0x307a	; 0x307a <Timer1_init>
	Timer1_setCallBack(count_the_time);
    1890:	89 e2       	ldi	r24, 0x29	; 41
    1892:	9d e0       	ldi	r25, 0x0D	; 13
    1894:	0e 94 9d 18 	call	0x313a	; 0x313a <Timer1_setCallBack>

	LCD_clearScreen();
    1898:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_clearScreen>
	LCD_string_Display("Door Unlocking");
    189c:	89 e9       	ldi	r24, 0x99	; 153
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	0e 94 33 17 	call	0x2e66	; 0x2e66 <LCD_string_Display>
	while (g_tick < 15){};
    18a4:	80 91 f5 00 	lds	r24, 0x00F5
    18a8:	8f 30       	cpi	r24, 0x0F	; 15
    18aa:	e0 f3       	brcs	.-8      	; 0x18a4 <motor_start_stop+0x11a>
	g_tick=0;
    18ac:	10 92 f5 00 	sts	0x00F5, r1

	LCD_clearScreen();
    18b0:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_clearScreen>
	LCD_string_Display("HOLD ");
    18b4:	88 ea       	ldi	r24, 0xA8	; 168
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 94 33 17 	call	0x2e66	; 0x2e66 <LCD_string_Display>
	while (g_tick < 3){};
    18bc:	80 91 f5 00 	lds	r24, 0x00F5
    18c0:	83 30       	cpi	r24, 0x03	; 3
    18c2:	e0 f3       	brcs	.-8      	; 0x18bc <motor_start_stop+0x132>
	g_tick=0;
    18c4:	10 92 f5 00 	sts	0x00F5, r1

	LCD_clearScreen();
    18c8:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_clearScreen>
	LCD_string_Display("Door Locking");
    18cc:	8e ea       	ldi	r24, 0xAE	; 174
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 33 17 	call	0x2e66	; 0x2e66 <LCD_string_Display>
	while (g_tick < 15){};
    18d4:	80 91 f5 00 	lds	r24, 0x00F5
    18d8:	8f 30       	cpi	r24, 0x0F	; 15
    18da:	e0 f3       	brcs	.-8      	; 0x18d4 <motor_start_stop+0x14a>
	g_tick=0;
    18dc:	10 92 f5 00 	sts	0x00F5, r1

	Timer1_deInit();
    18e0:	0e 94 88 18 	call	0x3110	; 0x3110 <Timer1_deInit>
}
    18e4:	2e 96       	adiw	r28, 0x0e	; 14
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <Display_error>:

void Display_error(void)
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    18fe:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_clearScreen>
	Timer1_init(&timer1_data_init);
    1902:	80 ee       	ldi	r24, 0xE0	; 224
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 3d 18 	call	0x307a	; 0x307a <Timer1_init>
	Timer1_setCallBack(count_the_time);
    190a:	89 e2       	ldi	r24, 0x29	; 41
    190c:	9d e0       	ldi	r25, 0x0D	; 13
    190e:	0e 94 9d 18 	call	0x313a	; 0x313a <Timer1_setCallBack>
	LCD_string_Display("ERROR!!");
    1912:	8b eb       	ldi	r24, 0xBB	; 187
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 33 17 	call	0x2e66	; 0x2e66 <LCD_string_Display>
	LCD_displayStringRowColumn(1, 0, "System Locked");
    191a:	23 ec       	ldi	r18, 0xC3	; 195
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	a9 01       	movw	r20, r18
    1924:	0e 94 91 17 	call	0x2f22	; 0x2f22 <LCD_displayStringRowColumn>
	while (g_tick <=60){};
    1928:	80 91 f5 00 	lds	r24, 0x00F5
    192c:	8d 33       	cpi	r24, 0x3D	; 61
    192e:	e0 f3       	brcs	.-8      	; 0x1928 <Display_error+0x32>
	g_tick=0;
    1930:	10 92 f5 00 	sts	0x00F5, r1
	Timer1_deInit();
    1934:	0e 94 88 18 	call	0x3110	; 0x3110 <Timer1_deInit>
	LCD_clearScreen();
    1938:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_clearScreen>
}
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <Activate_buzzer>:
void Activate_buzzer(void)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	2e 97       	sbiw	r28, 0x0e	; 14
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(active_buzzer);
    1956:	8f e0       	ldi	r24, 0x0F	; 15
    1958:	0e 94 16 19 	call	0x322c	; 0x322c <UART_sendByte>
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a8 ec       	ldi	r26, 0xC8	; 200
    1962:	b2 e4       	ldi	r27, 0x42	; 66
    1964:	8b 87       	std	Y+11, r24	; 0x0b
    1966:	9c 87       	std	Y+12, r25	; 0x0c
    1968:	ad 87       	std	Y+13, r26	; 0x0d
    196a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196c:	6b 85       	ldd	r22, Y+11	; 0x0b
    196e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1970:	8d 85       	ldd	r24, Y+13	; 0x0d
    1972:	9e 85       	ldd	r25, Y+14	; 0x0e
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	4a e7       	ldi	r20, 0x7A	; 122
    197a:	53 e4       	ldi	r21, 0x43	; 67
    197c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	8f 83       	std	Y+7, r24	; 0x07
    1986:	98 87       	std	Y+8, r25	; 0x08
    1988:	a9 87       	std	Y+9, r26	; 0x09
    198a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    198c:	6f 81       	ldd	r22, Y+7	; 0x07
    198e:	78 85       	ldd	r23, Y+8	; 0x08
    1990:	89 85       	ldd	r24, Y+9	; 0x09
    1992:	9a 85       	ldd	r25, Y+10	; 0x0a
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e8       	ldi	r20, 0x80	; 128
    199a:	5f e3       	ldi	r21, 0x3F	; 63
    199c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a0:	88 23       	and	r24, r24
    19a2:	2c f4       	brge	.+10     	; 0x19ae <Activate_buzzer+0x6c>
		__ticks = 1;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	9e 83       	std	Y+6, r25	; 0x06
    19aa:	8d 83       	std	Y+5, r24	; 0x05
    19ac:	3f c0       	rjmp	.+126    	; 0x1a2c <Activate_buzzer+0xea>
	else if (__tmp > 65535)
    19ae:	6f 81       	ldd	r22, Y+7	; 0x07
    19b0:	78 85       	ldd	r23, Y+8	; 0x08
    19b2:	89 85       	ldd	r24, Y+9	; 0x09
    19b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	3f ef       	ldi	r19, 0xFF	; 255
    19ba:	4f e7       	ldi	r20, 0x7F	; 127
    19bc:	57 e4       	ldi	r21, 0x47	; 71
    19be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c2:	18 16       	cp	r1, r24
    19c4:	4c f5       	brge	.+82     	; 0x1a18 <Activate_buzzer+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    19cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e2       	ldi	r20, 0x20	; 32
    19d4:	51 e4       	ldi	r21, 0x41	; 65
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	9e 83       	std	Y+6, r25	; 0x06
    19ec:	8d 83       	std	Y+5, r24	; 0x05
    19ee:	0f c0       	rjmp	.+30     	; 0x1a0e <Activate_buzzer+0xcc>
    19f0:	89 e1       	ldi	r24, 0x19	; 25
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9c 83       	std	Y+4, r25	; 0x04
    19f6:	8b 83       	std	Y+3, r24	; 0x03
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <Activate_buzzer+0xba>
    1a00:	9c 83       	std	Y+4, r25	; 0x04
    1a02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	9e 81       	ldd	r25, Y+6	; 0x06
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	69 f7       	brne	.-38     	; 0x19f0 <Activate_buzzer+0xae>
    1a16:	14 c0       	rjmp	.+40     	; 0x1a40 <Activate_buzzer+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a18:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1a:	78 85       	ldd	r23, Y+8	; 0x08
    1a1c:	89 85       	ldd	r24, Y+9	; 0x09
    1a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	9a 81       	ldd	r25, Y+2	; 0x02
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <Activate_buzzer+0xf6>
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    1a40:	2e 96       	adiw	r28, 0x0e	; 14
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <count_the_time>:
void count_the_time (void)
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1a5a:	80 91 f5 00 	lds	r24, 0x00F5
    1a5e:	8f 5f       	subi	r24, 0xFF	; 255
    1a60:	80 93 f5 00 	sts	0x00F5, r24
}
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <Change_Pass_fun>:
void Change_Pass_fun(void)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	6d 97       	sbiw	r28, 0x1d	; 29
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	00 c1       	rjmp	.+512    	; 0x1c80 <Change_Pass_fun+0x216>
	while (counter_incorrect_pass != 3)
	{
		/* send a signal for the COTROL_ECU to tell him I am in the change password function*/
		UART_sendByte(Change_Pass);
    1a80:	8d e2       	ldi	r24, 0x2D	; 45
    1a82:	0e 94 16 19 	call	0x322c	; 0x322c <UART_sendByte>
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a8 ec       	ldi	r26, 0xC8	; 200
    1a8c:	b2 e4       	ldi	r27, 0x42	; 66
    1a8e:	89 8f       	std	Y+25, r24	; 0x19
    1a90:	9a 8f       	std	Y+26, r25	; 0x1a
    1a92:	ab 8f       	std	Y+27, r26	; 0x1b
    1a94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a96:	69 8d       	ldd	r22, Y+25	; 0x19
    1a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	4a e7       	ldi	r20, 0x7A	; 122
    1aa4:	53 e4       	ldi	r21, 0x43	; 67
    1aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	8d 8b       	std	Y+21, r24	; 0x15
    1ab0:	9e 8b       	std	Y+22, r25	; 0x16
    1ab2:	af 8b       	std	Y+23, r26	; 0x17
    1ab4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aba:	8f 89       	ldd	r24, Y+23	; 0x17
    1abc:	98 8d       	ldd	r25, Y+24	; 0x18
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e8       	ldi	r20, 0x80	; 128
    1ac4:	5f e3       	ldi	r21, 0x3F	; 63
    1ac6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aca:	88 23       	and	r24, r24
    1acc:	2c f4       	brge	.+10     	; 0x1ad8 <Change_Pass_fun+0x6e>
		__ticks = 1;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9c 8b       	std	Y+20, r25	; 0x14
    1ad4:	8b 8b       	std	Y+19, r24	; 0x13
    1ad6:	3f c0       	rjmp	.+126    	; 0x1b56 <Change_Pass_fun+0xec>
	else if (__tmp > 65535)
    1ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    1ada:	7e 89       	ldd	r23, Y+22	; 0x16
    1adc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ade:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	3f ef       	ldi	r19, 0xFF	; 255
    1ae4:	4f e7       	ldi	r20, 0x7F	; 127
    1ae6:	57 e4       	ldi	r21, 0x47	; 71
    1ae8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aec:	18 16       	cp	r1, r24
    1aee:	4c f5       	brge	.+82     	; 0x1b42 <Change_Pass_fun+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af0:	69 8d       	ldd	r22, Y+25	; 0x19
    1af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e2       	ldi	r20, 0x20	; 32
    1afe:	51 e4       	ldi	r21, 0x41	; 65
    1b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9c 8b       	std	Y+20, r25	; 0x14
    1b16:	8b 8b       	std	Y+19, r24	; 0x13
    1b18:	0f c0       	rjmp	.+30     	; 0x1b38 <Change_Pass_fun+0xce>
    1b1a:	89 e1       	ldi	r24, 0x19	; 25
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9a 8b       	std	Y+18, r25	; 0x12
    1b20:	89 8b       	std	Y+17, r24	; 0x11
    1b22:	89 89       	ldd	r24, Y+17	; 0x11
    1b24:	9a 89       	ldd	r25, Y+18	; 0x12
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <Change_Pass_fun+0xbc>
    1b2a:	9a 8b       	std	Y+18, r25	; 0x12
    1b2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b30:	9c 89       	ldd	r25, Y+20	; 0x14
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	9c 8b       	std	Y+20, r25	; 0x14
    1b36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b38:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	69 f7       	brne	.-38     	; 0x1b1a <Change_Pass_fun+0xb0>
    1b40:	14 c0       	rjmp	.+40     	; 0x1b6a <Change_Pass_fun+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b42:	6d 89       	ldd	r22, Y+21	; 0x15
    1b44:	7e 89       	ldd	r23, Y+22	; 0x16
    1b46:	8f 89       	ldd	r24, Y+23	; 0x17
    1b48:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9c 8b       	std	Y+20, r25	; 0x14
    1b54:	8b 8b       	std	Y+19, r24	; 0x13
    1b56:	8b 89       	ldd	r24, Y+19	; 0x13
    1b58:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5a:	98 8b       	std	Y+16, r25	; 0x10
    1b5c:	8f 87       	std	Y+15, r24	; 0x0f
    1b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b60:	98 89       	ldd	r25, Y+16	; 0x10
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <Change_Pass_fun+0xf8>
    1b66:	98 8b       	std	Y+16, r25	; 0x10
    1b68:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);

		uint8 change_pass_check;
		get_first_password();
    1b6a:	0e 94 41 08 	call	0x1082	; 0x1082 <get_first_password>
		UART_sendString(g_password);
    1b6e:	86 ee       	ldi	r24, 0xE6	; 230
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 3c 19 	call	0x3278	; 0x3278 <UART_sendString>

		change_pass_check = UART_recieveByte();
    1b76:	0e 94 2d 19 	call	0x325a	; 0x325a <UART_recieveByte>
    1b7a:	8d 8f       	std	Y+29, r24	; 0x1d
		if (change_pass_check == Matched_Passwords)
    1b7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	29 f4       	brne	.+10     	; 0x1b8c <Change_Pass_fun+0x122>
		{
			counter_incorrect_pass=0;
    1b82:	10 92 f4 00 	sts	0x00F4, r1
			Create_Password();
    1b86:	0e 94 c4 06 	call	0xd88	; 0xd88 <Create_Password>
    1b8a:	7f c0       	rjmp	.+254    	; 0x1c8a <Change_Pass_fun+0x220>
			break;
		}
		else if (change_pass_check == Unmatched_Passwords)
    1b8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b8e:	88 23       	and	r24, r24
    1b90:	29 f4       	brne	.+10     	; 0x1b9c <Change_Pass_fun+0x132>
		{
			counter_incorrect_pass++;
    1b92:	80 91 f4 00 	lds	r24, 0x00F4
    1b96:	8f 5f       	subi	r24, 0xFF	; 255
    1b98:	80 93 f4 00 	sts	0x00F4, r24
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	a8 e4       	ldi	r26, 0x48	; 72
    1ba2:	b2 e4       	ldi	r27, 0x42	; 66
    1ba4:	8b 87       	std	Y+11, r24	; 0x0b
    1ba6:	9c 87       	std	Y+12, r25	; 0x0c
    1ba8:	ad 87       	std	Y+13, r26	; 0x0d
    1baa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4a e7       	ldi	r20, 0x7A	; 122
    1bba:	53 e4       	ldi	r21, 0x43	; 67
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8f 83       	std	Y+7, r24	; 0x07
    1bc6:	98 87       	std	Y+8, r25	; 0x08
    1bc8:	a9 87       	std	Y+9, r26	; 0x09
    1bca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bce:	78 85       	ldd	r23, Y+8	; 0x08
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e8       	ldi	r20, 0x80	; 128
    1bda:	5f e3       	ldi	r21, 0x3F	; 63
    1bdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be0:	88 23       	and	r24, r24
    1be2:	2c f4       	brge	.+10     	; 0x1bee <Change_Pass_fun+0x184>
		__ticks = 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9e 83       	std	Y+6, r25	; 0x06
    1bea:	8d 83       	std	Y+5, r24	; 0x05
    1bec:	3f c0       	rjmp	.+126    	; 0x1c6c <Change_Pass_fun+0x202>
	else if (__tmp > 65535)
    1bee:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf0:	78 85       	ldd	r23, Y+8	; 0x08
    1bf2:	89 85       	ldd	r24, Y+9	; 0x09
    1bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	4c f5       	brge	.+82     	; 0x1c58 <Change_Pass_fun+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e2       	ldi	r20, 0x20	; 32
    1c14:	51 e4       	ldi	r21, 0x41	; 65
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9e 83       	std	Y+6, r25	; 0x06
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
    1c2e:	0f c0       	rjmp	.+30     	; 0x1c4e <Change_Pass_fun+0x1e4>
    1c30:	89 e1       	ldi	r24, 0x19	; 25
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9c 83       	std	Y+4, r25	; 0x04
    1c36:	8b 83       	std	Y+3, r24	; 0x03
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <Change_Pass_fun+0x1d2>
    1c40:	9c 83       	std	Y+4, r25	; 0x04
    1c42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	8d 81       	ldd	r24, Y+5	; 0x05
    1c46:	9e 81       	ldd	r25, Y+6	; 0x06
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	69 f7       	brne	.-38     	; 0x1c30 <Change_Pass_fun+0x1c6>
    1c56:	14 c0       	rjmp	.+40     	; 0x1c80 <Change_Pass_fun+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5a:	78 85       	ldd	r23, Y+8	; 0x08
    1c5c:	89 85       	ldd	r24, Y+9	; 0x09
    1c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	9a 81       	ldd	r25, Y+2	; 0x02
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <Change_Pass_fun+0x20e>
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
    1c7e:	89 83       	std	Y+1, r24	; 0x01
{
	g_tick++;
}
void Change_Pass_fun(void)
{
	while (counter_incorrect_pass != 3)
    1c80:	80 91 f4 00 	lds	r24, 0x00F4
    1c84:	83 30       	cpi	r24, 0x03	; 3
    1c86:	09 f0       	breq	.+2      	; 0x1c8a <Change_Pass_fun+0x220>
    1c88:	fb ce       	rjmp	.-522    	; 0x1a80 <Change_Pass_fun+0x16>
		{
			counter_incorrect_pass++;
		}
		_delay_ms(50);
	}
	if (counter_incorrect_pass ==3)
    1c8a:	80 91 f4 00 	lds	r24, 0x00F4
    1c8e:	83 30       	cpi	r24, 0x03	; 3
    1c90:	31 f4       	brne	.+12     	; 0x1c9e <Change_Pass_fun+0x234>
	{
		counter_incorrect_pass=0;
    1c92:	10 92 f4 00 	sts	0x00F4, r1
		Activate_buzzer();
    1c96:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Activate_buzzer>
		Display_error();
    1c9a:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <Display_error>
	}
}
    1c9e:	6d 96       	adiw	r28, 0x1d	; 29
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <GPIO_setupPinDirection+0x6>
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <GPIO_setupPinDirection+0x8>
    1cb8:	0f 92       	push	r0
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	6a 83       	std	Y+2, r22	; 0x02
    1cc2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	88 30       	cpi	r24, 0x08	; 8
    1cc8:	08 f0       	brcs	.+2      	; 0x1ccc <GPIO_setupPinDirection+0x1c>
    1cca:	d5 c0       	rjmp	.+426    	; 0x1e76 <GPIO_setupPinDirection+0x1c6>
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	84 30       	cpi	r24, 0x04	; 4
    1cd0:	08 f0       	brcs	.+2      	; 0x1cd4 <GPIO_setupPinDirection+0x24>
    1cd2:	d1 c0       	rjmp	.+418    	; 0x1e76 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	3d 83       	std	Y+5, r19	; 0x05
    1cdc:	2c 83       	std	Y+4, r18	; 0x04
    1cde:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <GPIO_setupPinDirection+0x3a>
    1ce8:	43 c0       	rjmp	.+134    	; 0x1d70 <GPIO_setupPinDirection+0xc0>
    1cea:	2c 81       	ldd	r18, Y+4	; 0x04
    1cec:	3d 81       	ldd	r19, Y+5	; 0x05
    1cee:	22 30       	cpi	r18, 0x02	; 2
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <GPIO_setupPinDirection+0x4e>
    1cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	71 f0       	breq	.+28     	; 0x1d18 <GPIO_setupPinDirection+0x68>
    1cfc:	bc c0       	rjmp	.+376    	; 0x1e76 <GPIO_setupPinDirection+0x1c6>
    1cfe:	2c 81       	ldd	r18, Y+4	; 0x04
    1d00:	3d 81       	ldd	r19, Y+5	; 0x05
    1d02:	22 30       	cpi	r18, 0x02	; 2
    1d04:	31 05       	cpc	r19, r1
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <GPIO_setupPinDirection+0x5a>
    1d08:	5f c0       	rjmp	.+190    	; 0x1dc8 <GPIO_setupPinDirection+0x118>
    1d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0e:	83 30       	cpi	r24, 0x03	; 3
    1d10:	91 05       	cpc	r25, r1
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <GPIO_setupPinDirection+0x66>
    1d14:	85 c0       	rjmp	.+266    	; 0x1e20 <GPIO_setupPinDirection+0x170>
    1d16:	af c0       	rjmp	.+350    	; 0x1e76 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	a1 f4       	brne	.+40     	; 0x1d46 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d1e:	aa e3       	ldi	r26, 0x3A	; 58
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	ea e3       	ldi	r30, 0x3A	; 58
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 2e       	mov	r0, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <GPIO_setupPinDirection+0x8c>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	0a 94       	dec	r0
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <GPIO_setupPinDirection+0x88>
    1d40:	84 2b       	or	r24, r20
    1d42:	8c 93       	st	X, r24
    1d44:	98 c0       	rjmp	.+304    	; 0x1e76 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1d46:	aa e3       	ldi	r26, 0x3A	; 58
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	ea e3       	ldi	r30, 0x3A	; 58
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 2e       	mov	r0, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <GPIO_setupPinDirection+0xb4>
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	0a 94       	dec	r0
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <GPIO_setupPinDirection+0xb0>
    1d68:	80 95       	com	r24
    1d6a:	84 23       	and	r24, r20
    1d6c:	8c 93       	st	X, r24
    1d6e:	83 c0       	rjmp	.+262    	; 0x1e76 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	81 30       	cpi	r24, 0x01	; 1
    1d74:	a1 f4       	brne	.+40     	; 0x1d9e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1d76:	a7 e3       	ldi	r26, 0x37	; 55
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e7 e3       	ldi	r30, 0x37	; 55
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <GPIO_setupPinDirection+0xe4>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <GPIO_setupPinDirection+0xe0>
    1d98:	84 2b       	or	r24, r20
    1d9a:	8c 93       	st	X, r24
    1d9c:	6c c0       	rjmp	.+216    	; 0x1e76 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d9e:	a7 e3       	ldi	r26, 0x37	; 55
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e7 e3       	ldi	r30, 0x37	; 55
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	48 2f       	mov	r20, r24
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	02 2e       	mov	r0, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <GPIO_setupPinDirection+0x10c>
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	0a 94       	dec	r0
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <GPIO_setupPinDirection+0x108>
    1dc0:	80 95       	com	r24
    1dc2:	84 23       	and	r24, r20
    1dc4:	8c 93       	st	X, r24
    1dc6:	57 c0       	rjmp	.+174    	; 0x1e76 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	81 30       	cpi	r24, 0x01	; 1
    1dcc:	a1 f4       	brne	.+40     	; 0x1df6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1dce:	a4 e3       	ldi	r26, 0x34	; 52
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e4 e3       	ldi	r30, 0x34	; 52
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	48 2f       	mov	r20, r24
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	02 2e       	mov	r0, r18
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <GPIO_setupPinDirection+0x13c>
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	0a 94       	dec	r0
    1dee:	e2 f7       	brpl	.-8      	; 0x1de8 <GPIO_setupPinDirection+0x138>
    1df0:	84 2b       	or	r24, r20
    1df2:	8c 93       	st	X, r24
    1df4:	40 c0       	rjmp	.+128    	; 0x1e76 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1df6:	a4 e3       	ldi	r26, 0x34	; 52
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e4 e3       	ldi	r30, 0x34	; 52
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	48 2f       	mov	r20, r24
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	02 2e       	mov	r0, r18
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <GPIO_setupPinDirection+0x164>
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	0a 94       	dec	r0
    1e16:	e2 f7       	brpl	.-8      	; 0x1e10 <GPIO_setupPinDirection+0x160>
    1e18:	80 95       	com	r24
    1e1a:	84 23       	and	r24, r20
    1e1c:	8c 93       	st	X, r24
    1e1e:	2b c0       	rjmp	.+86     	; 0x1e76 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	81 30       	cpi	r24, 0x01	; 1
    1e24:	a1 f4       	brne	.+40     	; 0x1e4e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1e26:	a1 e3       	ldi	r26, 0x31	; 49
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e1 e3       	ldi	r30, 0x31	; 49
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	48 2f       	mov	r20, r24
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	02 2e       	mov	r0, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <GPIO_setupPinDirection+0x194>
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	0a 94       	dec	r0
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <GPIO_setupPinDirection+0x190>
    1e48:	84 2b       	or	r24, r20
    1e4a:	8c 93       	st	X, r24
    1e4c:	14 c0       	rjmp	.+40     	; 0x1e76 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1e4e:	a1 e3       	ldi	r26, 0x31	; 49
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e1 e3       	ldi	r30, 0x31	; 49
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	48 2f       	mov	r20, r24
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	02 2e       	mov	r0, r18
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <GPIO_setupPinDirection+0x1bc>
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	0a 94       	dec	r0
    1e6e:	e2 f7       	brpl	.-8      	; 0x1e68 <GPIO_setupPinDirection+0x1b8>
    1e70:	80 95       	com	r24
    1e72:	84 23       	and	r24, r20
    1e74:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <GPIO_writePin+0x6>
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <GPIO_writePin+0x8>
    1e8e:	0f 92       	push	r0
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	6a 83       	std	Y+2, r22	; 0x02
    1e98:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	88 30       	cpi	r24, 0x08	; 8
    1e9e:	08 f0       	brcs	.+2      	; 0x1ea2 <GPIO_writePin+0x1c>
    1ea0:	d5 c0       	rjmp	.+426    	; 0x204c <GPIO_writePin+0x1c6>
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	84 30       	cpi	r24, 0x04	; 4
    1ea6:	08 f0       	brcs	.+2      	; 0x1eaa <GPIO_writePin+0x24>
    1ea8:	d1 c0       	rjmp	.+418    	; 0x204c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	3d 83       	std	Y+5, r19	; 0x05
    1eb2:	2c 83       	std	Y+4, r18	; 0x04
    1eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb8:	81 30       	cpi	r24, 0x01	; 1
    1eba:	91 05       	cpc	r25, r1
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <GPIO_writePin+0x3a>
    1ebe:	43 c0       	rjmp	.+134    	; 0x1f46 <GPIO_writePin+0xc0>
    1ec0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec4:	22 30       	cpi	r18, 0x02	; 2
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	2c f4       	brge	.+10     	; 0x1ed4 <GPIO_writePin+0x4e>
    1eca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	71 f0       	breq	.+28     	; 0x1eee <GPIO_writePin+0x68>
    1ed2:	bc c0       	rjmp	.+376    	; 0x204c <GPIO_writePin+0x1c6>
    1ed4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ed8:	22 30       	cpi	r18, 0x02	; 2
    1eda:	31 05       	cpc	r19, r1
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <GPIO_writePin+0x5a>
    1ede:	5f c0       	rjmp	.+190    	; 0x1f9e <GPIO_writePin+0x118>
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee4:	83 30       	cpi	r24, 0x03	; 3
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <GPIO_writePin+0x66>
    1eea:	85 c0       	rjmp	.+266    	; 0x1ff6 <GPIO_writePin+0x170>
    1eec:	af c0       	rjmp	.+350    	; 0x204c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	81 30       	cpi	r24, 0x01	; 1
    1ef2:	a1 f4       	brne	.+40     	; 0x1f1c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1ef4:	ab e3       	ldi	r26, 0x3B	; 59
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	eb e3       	ldi	r30, 0x3B	; 59
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	48 2f       	mov	r20, r24
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	02 2e       	mov	r0, r18
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <GPIO_writePin+0x8c>
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	0a 94       	dec	r0
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <GPIO_writePin+0x88>
    1f16:	84 2b       	or	r24, r20
    1f18:	8c 93       	st	X, r24
    1f1a:	98 c0       	rjmp	.+304    	; 0x204c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1f1c:	ab e3       	ldi	r26, 0x3B	; 59
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	eb e3       	ldi	r30, 0x3B	; 59
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	48 2f       	mov	r20, r24
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	02 2e       	mov	r0, r18
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <GPIO_writePin+0xb4>
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	0a 94       	dec	r0
    1f3c:	e2 f7       	brpl	.-8      	; 0x1f36 <GPIO_writePin+0xb0>
    1f3e:	80 95       	com	r24
    1f40:	84 23       	and	r24, r20
    1f42:	8c 93       	st	X, r24
    1f44:	83 c0       	rjmp	.+262    	; 0x204c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	a1 f4       	brne	.+40     	; 0x1f74 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1f4c:	a8 e3       	ldi	r26, 0x38	; 56
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e8 e3       	ldi	r30, 0x38	; 56
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	48 2f       	mov	r20, r24
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	28 2f       	mov	r18, r24
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	02 2e       	mov	r0, r18
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <GPIO_writePin+0xe4>
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	0a 94       	dec	r0
    1f6c:	e2 f7       	brpl	.-8      	; 0x1f66 <GPIO_writePin+0xe0>
    1f6e:	84 2b       	or	r24, r20
    1f70:	8c 93       	st	X, r24
    1f72:	6c c0       	rjmp	.+216    	; 0x204c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1f74:	a8 e3       	ldi	r26, 0x38	; 56
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e8 e3       	ldi	r30, 0x38	; 56
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	48 2f       	mov	r20, r24
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	02 2e       	mov	r0, r18
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <GPIO_writePin+0x10c>
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	0a 94       	dec	r0
    1f94:	e2 f7       	brpl	.-8      	; 0x1f8e <GPIO_writePin+0x108>
    1f96:	80 95       	com	r24
    1f98:	84 23       	and	r24, r20
    1f9a:	8c 93       	st	X, r24
    1f9c:	57 c0       	rjmp	.+174    	; 0x204c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	81 30       	cpi	r24, 0x01	; 1
    1fa2:	a1 f4       	brne	.+40     	; 0x1fcc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1fa4:	a5 e3       	ldi	r26, 0x35	; 53
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e5 e3       	ldi	r30, 0x35	; 53
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	48 2f       	mov	r20, r24
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 2e       	mov	r0, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <GPIO_writePin+0x13c>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	0a 94       	dec	r0
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <GPIO_writePin+0x138>
    1fc6:	84 2b       	or	r24, r20
    1fc8:	8c 93       	st	X, r24
    1fca:	40 c0       	rjmp	.+128    	; 0x204c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1fcc:	a5 e3       	ldi	r26, 0x35	; 53
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e5 e3       	ldi	r30, 0x35	; 53
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	48 2f       	mov	r20, r24
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	02 2e       	mov	r0, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <GPIO_writePin+0x164>
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	0a 94       	dec	r0
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <GPIO_writePin+0x160>
    1fee:	80 95       	com	r24
    1ff0:	84 23       	and	r24, r20
    1ff2:	8c 93       	st	X, r24
    1ff4:	2b c0       	rjmp	.+86     	; 0x204c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	81 30       	cpi	r24, 0x01	; 1
    1ffa:	a1 f4       	brne	.+40     	; 0x2024 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ffc:	a2 e3       	ldi	r26, 0x32	; 50
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e2 e3       	ldi	r30, 0x32	; 50
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	48 2f       	mov	r20, r24
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	02 2e       	mov	r0, r18
    2014:	02 c0       	rjmp	.+4      	; 0x201a <GPIO_writePin+0x194>
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	0a 94       	dec	r0
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <GPIO_writePin+0x190>
    201e:	84 2b       	or	r24, r20
    2020:	8c 93       	st	X, r24
    2022:	14 c0       	rjmp	.+40     	; 0x204c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2024:	a2 e3       	ldi	r26, 0x32	; 50
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e2 e3       	ldi	r30, 0x32	; 50
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	48 2f       	mov	r20, r24
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	02 2e       	mov	r0, r18
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <GPIO_writePin+0x1bc>
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	0a 94       	dec	r0
    2044:	e2 f7       	brpl	.-8      	; 0x203e <GPIO_writePin+0x1b8>
    2046:	80 95       	com	r24
    2048:	84 23       	and	r24, r20
    204a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	00 d0       	rcall	.+0      	; 0x2062 <GPIO_readPin+0x6>
    2062:	00 d0       	rcall	.+0      	; 0x2064 <GPIO_readPin+0x8>
    2064:	0f 92       	push	r0
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	8a 83       	std	Y+2, r24	; 0x02
    206c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    206e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	88 30       	cpi	r24, 0x08	; 8
    2074:	08 f0       	brcs	.+2      	; 0x2078 <GPIO_readPin+0x1c>
    2076:	84 c0       	rjmp	.+264    	; 0x2180 <GPIO_readPin+0x124>
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	84 30       	cpi	r24, 0x04	; 4
    207c:	08 f0       	brcs	.+2      	; 0x2080 <GPIO_readPin+0x24>
    207e:	80 c0       	rjmp	.+256    	; 0x2180 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	3d 83       	std	Y+5, r19	; 0x05
    2088:	2c 83       	std	Y+4, r18	; 0x04
    208a:	4c 81       	ldd	r20, Y+4	; 0x04
    208c:	5d 81       	ldd	r21, Y+5	; 0x05
    208e:	41 30       	cpi	r20, 0x01	; 1
    2090:	51 05       	cpc	r21, r1
    2092:	79 f1       	breq	.+94     	; 0x20f2 <GPIO_readPin+0x96>
    2094:	8c 81       	ldd	r24, Y+4	; 0x04
    2096:	9d 81       	ldd	r25, Y+5	; 0x05
    2098:	82 30       	cpi	r24, 0x02	; 2
    209a:	91 05       	cpc	r25, r1
    209c:	34 f4       	brge	.+12     	; 0x20aa <GPIO_readPin+0x4e>
    209e:	2c 81       	ldd	r18, Y+4	; 0x04
    20a0:	3d 81       	ldd	r19, Y+5	; 0x05
    20a2:	21 15       	cp	r18, r1
    20a4:	31 05       	cpc	r19, r1
    20a6:	69 f0       	breq	.+26     	; 0x20c2 <GPIO_readPin+0x66>
    20a8:	6b c0       	rjmp	.+214    	; 0x2180 <GPIO_readPin+0x124>
    20aa:	4c 81       	ldd	r20, Y+4	; 0x04
    20ac:	5d 81       	ldd	r21, Y+5	; 0x05
    20ae:	42 30       	cpi	r20, 0x02	; 2
    20b0:	51 05       	cpc	r21, r1
    20b2:	b9 f1       	breq	.+110    	; 0x2122 <GPIO_readPin+0xc6>
    20b4:	8c 81       	ldd	r24, Y+4	; 0x04
    20b6:	9d 81       	ldd	r25, Y+5	; 0x05
    20b8:	83 30       	cpi	r24, 0x03	; 3
    20ba:	91 05       	cpc	r25, r1
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <GPIO_readPin+0x64>
    20be:	49 c0       	rjmp	.+146    	; 0x2152 <GPIO_readPin+0xf6>
    20c0:	5f c0       	rjmp	.+190    	; 0x2180 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    20c2:	e9 e3       	ldi	r30, 0x39	; 57
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	88 2f       	mov	r24, r24
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	a9 01       	movw	r20, r18
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <GPIO_readPin+0x7e>
    20d6:	55 95       	asr	r21
    20d8:	47 95       	ror	r20
    20da:	8a 95       	dec	r24
    20dc:	e2 f7       	brpl	.-8      	; 0x20d6 <GPIO_readPin+0x7a>
    20de:	ca 01       	movw	r24, r20
    20e0:	81 70       	andi	r24, 0x01	; 1
    20e2:	90 70       	andi	r25, 0x00	; 0
    20e4:	88 23       	and	r24, r24
    20e6:	19 f0       	breq	.+6      	; 0x20ee <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	49 c0       	rjmp	.+146    	; 0x2180 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20ee:	19 82       	std	Y+1, r1	; 0x01
    20f0:	47 c0       	rjmp	.+142    	; 0x2180 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    20f2:	e6 e3       	ldi	r30, 0x36	; 54
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a9 01       	movw	r20, r18
    2104:	02 c0       	rjmp	.+4      	; 0x210a <GPIO_readPin+0xae>
    2106:	55 95       	asr	r21
    2108:	47 95       	ror	r20
    210a:	8a 95       	dec	r24
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <GPIO_readPin+0xaa>
    210e:	ca 01       	movw	r24, r20
    2110:	81 70       	andi	r24, 0x01	; 1
    2112:	90 70       	andi	r25, 0x00	; 0
    2114:	88 23       	and	r24, r24
    2116:	19 f0       	breq	.+6      	; 0x211e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	31 c0       	rjmp	.+98     	; 0x2180 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    211e:	19 82       	std	Y+1, r1	; 0x01
    2120:	2f c0       	rjmp	.+94     	; 0x2180 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2122:	e3 e3       	ldi	r30, 0x33	; 51
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	88 2f       	mov	r24, r24
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a9 01       	movw	r20, r18
    2134:	02 c0       	rjmp	.+4      	; 0x213a <GPIO_readPin+0xde>
    2136:	55 95       	asr	r21
    2138:	47 95       	ror	r20
    213a:	8a 95       	dec	r24
    213c:	e2 f7       	brpl	.-8      	; 0x2136 <GPIO_readPin+0xda>
    213e:	ca 01       	movw	r24, r20
    2140:	81 70       	andi	r24, 0x01	; 1
    2142:	90 70       	andi	r25, 0x00	; 0
    2144:	88 23       	and	r24, r24
    2146:	19 f0       	breq	.+6      	; 0x214e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	19 c0       	rjmp	.+50     	; 0x2180 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    214e:	19 82       	std	Y+1, r1	; 0x01
    2150:	17 c0       	rjmp	.+46     	; 0x2180 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2152:	e0 e3       	ldi	r30, 0x30	; 48
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	88 2f       	mov	r24, r24
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a9 01       	movw	r20, r18
    2164:	02 c0       	rjmp	.+4      	; 0x216a <GPIO_readPin+0x10e>
    2166:	55 95       	asr	r21
    2168:	47 95       	ror	r20
    216a:	8a 95       	dec	r24
    216c:	e2 f7       	brpl	.-8      	; 0x2166 <GPIO_readPin+0x10a>
    216e:	ca 01       	movw	r24, r20
    2170:	81 70       	andi	r24, 0x01	; 1
    2172:	90 70       	andi	r25, 0x00	; 0
    2174:	88 23       	and	r24, r24
    2176:	19 f0       	breq	.+6      	; 0x217e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	01 c0       	rjmp	.+2      	; 0x2180 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    217e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2180:	89 81       	ldd	r24, Y+1	; 0x01
}
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret

00002192 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	00 d0       	rcall	.+0      	; 0x2198 <GPIO_setupPortDirection+0x6>
    2198:	00 d0       	rcall	.+0      	; 0x219a <GPIO_setupPortDirection+0x8>
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	84 30       	cpi	r24, 0x04	; 4
    21a6:	90 f5       	brcc	.+100    	; 0x220c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	3c 83       	std	Y+4, r19	; 0x04
    21b0:	2b 83       	std	Y+3, r18	; 0x03
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	9c 81       	ldd	r25, Y+4	; 0x04
    21b6:	81 30       	cpi	r24, 0x01	; 1
    21b8:	91 05       	cpc	r25, r1
    21ba:	d1 f0       	breq	.+52     	; 0x21f0 <GPIO_setupPortDirection+0x5e>
    21bc:	2b 81       	ldd	r18, Y+3	; 0x03
    21be:	3c 81       	ldd	r19, Y+4	; 0x04
    21c0:	22 30       	cpi	r18, 0x02	; 2
    21c2:	31 05       	cpc	r19, r1
    21c4:	2c f4       	brge	.+10     	; 0x21d0 <GPIO_setupPortDirection+0x3e>
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	61 f0       	breq	.+24     	; 0x21e6 <GPIO_setupPortDirection+0x54>
    21ce:	1e c0       	rjmp	.+60     	; 0x220c <GPIO_setupPortDirection+0x7a>
    21d0:	2b 81       	ldd	r18, Y+3	; 0x03
    21d2:	3c 81       	ldd	r19, Y+4	; 0x04
    21d4:	22 30       	cpi	r18, 0x02	; 2
    21d6:	31 05       	cpc	r19, r1
    21d8:	81 f0       	breq	.+32     	; 0x21fa <GPIO_setupPortDirection+0x68>
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	83 30       	cpi	r24, 0x03	; 3
    21e0:	91 05       	cpc	r25, r1
    21e2:	81 f0       	breq	.+32     	; 0x2204 <GPIO_setupPortDirection+0x72>
    21e4:	13 c0       	rjmp	.+38     	; 0x220c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    21e6:	ea e3       	ldi	r30, 0x3A	; 58
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	80 83       	st	Z, r24
    21ee:	0e c0       	rjmp	.+28     	; 0x220c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    21f0:	e7 e3       	ldi	r30, 0x37	; 55
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	80 83       	st	Z, r24
    21f8:	09 c0       	rjmp	.+18     	; 0x220c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    21fa:	e4 e3       	ldi	r30, 0x34	; 52
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	80 83       	st	Z, r24
    2202:	04 c0       	rjmp	.+8      	; 0x220c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2204:	e1 e3       	ldi	r30, 0x31	; 49
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	80 83       	st	Z, r24
			break;
		}
	}
}
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	00 d0       	rcall	.+0      	; 0x2220 <GPIO_writePort+0x6>
    2220:	00 d0       	rcall	.+0      	; 0x2222 <GPIO_writePort+0x8>
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	84 30       	cpi	r24, 0x04	; 4
    222e:	90 f5       	brcc	.+100    	; 0x2294 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	3c 83       	std	Y+4, r19	; 0x04
    2238:	2b 83       	std	Y+3, r18	; 0x03
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	91 05       	cpc	r25, r1
    2242:	d1 f0       	breq	.+52     	; 0x2278 <GPIO_writePort+0x5e>
    2244:	2b 81       	ldd	r18, Y+3	; 0x03
    2246:	3c 81       	ldd	r19, Y+4	; 0x04
    2248:	22 30       	cpi	r18, 0x02	; 2
    224a:	31 05       	cpc	r19, r1
    224c:	2c f4       	brge	.+10     	; 0x2258 <GPIO_writePort+0x3e>
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	61 f0       	breq	.+24     	; 0x226e <GPIO_writePort+0x54>
    2256:	1e c0       	rjmp	.+60     	; 0x2294 <GPIO_writePort+0x7a>
    2258:	2b 81       	ldd	r18, Y+3	; 0x03
    225a:	3c 81       	ldd	r19, Y+4	; 0x04
    225c:	22 30       	cpi	r18, 0x02	; 2
    225e:	31 05       	cpc	r19, r1
    2260:	81 f0       	breq	.+32     	; 0x2282 <GPIO_writePort+0x68>
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	83 30       	cpi	r24, 0x03	; 3
    2268:	91 05       	cpc	r25, r1
    226a:	81 f0       	breq	.+32     	; 0x228c <GPIO_writePort+0x72>
    226c:	13 c0       	rjmp	.+38     	; 0x2294 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    226e:	eb e3       	ldi	r30, 0x3B	; 59
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	80 83       	st	Z, r24
    2276:	0e c0       	rjmp	.+28     	; 0x2294 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2278:	e8 e3       	ldi	r30, 0x38	; 56
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	80 83       	st	Z, r24
    2280:	09 c0       	rjmp	.+18     	; 0x2294 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2282:	e5 e3       	ldi	r30, 0x35	; 53
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	80 83       	st	Z, r24
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    228c:	e2 e3       	ldi	r30, 0x32	; 50
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	80 83       	st	Z, r24
			break;
		}
	}
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <GPIO_readPort+0x6>
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <GPIO_readPort+0x8>
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    22b0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	84 30       	cpi	r24, 0x04	; 4
    22b6:	90 f5       	brcc	.+100    	; 0x231c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	3c 83       	std	Y+4, r19	; 0x04
    22c0:	2b 83       	std	Y+3, r18	; 0x03
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	81 30       	cpi	r24, 0x01	; 1
    22c8:	91 05       	cpc	r25, r1
    22ca:	d1 f0       	breq	.+52     	; 0x2300 <GPIO_readPort+0x5e>
    22cc:	2b 81       	ldd	r18, Y+3	; 0x03
    22ce:	3c 81       	ldd	r19, Y+4	; 0x04
    22d0:	22 30       	cpi	r18, 0x02	; 2
    22d2:	31 05       	cpc	r19, r1
    22d4:	2c f4       	brge	.+10     	; 0x22e0 <GPIO_readPort+0x3e>
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	9c 81       	ldd	r25, Y+4	; 0x04
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	61 f0       	breq	.+24     	; 0x22f6 <GPIO_readPort+0x54>
    22de:	1e c0       	rjmp	.+60     	; 0x231c <GPIO_readPort+0x7a>
    22e0:	2b 81       	ldd	r18, Y+3	; 0x03
    22e2:	3c 81       	ldd	r19, Y+4	; 0x04
    22e4:	22 30       	cpi	r18, 0x02	; 2
    22e6:	31 05       	cpc	r19, r1
    22e8:	81 f0       	breq	.+32     	; 0x230a <GPIO_readPort+0x68>
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	83 30       	cpi	r24, 0x03	; 3
    22f0:	91 05       	cpc	r25, r1
    22f2:	81 f0       	breq	.+32     	; 0x2314 <GPIO_readPort+0x72>
    22f4:	13 c0       	rjmp	.+38     	; 0x231c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    22f6:	e9 e3       	ldi	r30, 0x39	; 57
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	0e c0       	rjmp	.+28     	; 0x231c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2300:	e6 e3       	ldi	r30, 0x36	; 54
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	09 c0       	rjmp	.+18     	; 0x231c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    230a:	e3 e3       	ldi	r30, 0x33	; 51
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	89 83       	std	Y+1, r24	; 0x01
    2312:	04 c0       	rjmp	.+8      	; 0x231c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2314:	e0 e3       	ldi	r30, 0x30	; 48
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    231c:	89 81       	ldd	r24, Y+1	; 0x01
}
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	00 d0       	rcall	.+0      	; 0x2332 <KEYPAD_getPressedKey+0x6>
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_OUTPUT);
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	60 e0       	ldi	r22, 0x00	; 0
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_OUTPUT);
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	61 e0       	ldi	r22, 0x01	; 1
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_OUTPUT);
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	62 e0       	ldi	r22, 0x02	; 2
    234e:	41 e0       	ldi	r20, 0x01	; 1
    2350:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_OUTPUT);
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	63 e0       	ldi	r22, 0x03	; 3
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <GPIO_setupPinDirection>

	/* Set/Clear the row output pin */
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_BUTTON_RELEASED);
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	60 e0       	ldi	r22, 0x00	; 0
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, KEYPAD_BUTTON_RELEASED);
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	61 e0       	ldi	r22, 0x01	; 1
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, KEYPAD_BUTTON_RELEASED);
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	62 e0       	ldi	r22, 0x02	; 2
    2376:	41 e0       	ldi	r20, 0x01	; 1
    2378:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, KEYPAD_BUTTON_RELEASED);
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	63 e0       	ldi	r22, 0x03	; 3
    2380:	41 e0       	ldi	r20, 0x01	; 1
    2382:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <GPIO_writePin>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	64 e0       	ldi	r22, 0x04	; 4
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	65 e0       	ldi	r22, 0x05	; 5
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	66 e0       	ldi	r22, 0x06	; 6
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	67 e0       	ldi	r22, 0x07	; 7
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    23ae:	19 82       	std	Y+1, r1	; 0x01
    23b0:	35 c0       	rjmp	.+106    	; 0x241c <KEYPAD_getPressedKey+0xf0>
			 * except this row will be output pin
			 */
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	69 81       	ldd	r22, Y+1	; 0x01
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    23bc:	1a 82       	std	Y+2, r1	; 0x02
    23be:	23 c0       	rjmp	.+70     	; 0x2406 <KEYPAD_getPressedKey+0xda>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	98 2f       	mov	r25, r24
    23c4:	9c 5f       	subi	r25, 0xFC	; 252
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	69 2f       	mov	r22, r25
    23ca:	0e 94 2e 10 	call	0x205c	; 0x205c <GPIO_readPin>
    23ce:	88 23       	and	r24, r24
    23d0:	b9 f4       	brne	.+46     	; 0x2400 <KEYPAD_getPressedKey+0xd4>
				{
//					GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
					GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	69 81       	ldd	r22, Y+1	; 0x01
    23d6:	41 e0       	ldi	r20, 0x01	; 1
    23d8:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <GPIO_writePin>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	88 0f       	add	r24, r24
    23e8:	99 1f       	adc	r25, r25
    23ea:	98 2f       	mov	r25, r24
    23ec:	8a 81       	ldd	r24, Y+2	; 0x02
    23ee:	89 0f       	add	r24, r25
    23f0:	8f 5f       	subi	r24, 0xFF	; 255
    23f2:	0e 94 12 12 	call	0x2424	; 0x2424 <KEYPAD_4x4_adjustKeyNumber>
			}
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
		}
	}
}
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	8f 5f       	subi	r24, 0xFF	; 255
    2404:	8a 83       	std	Y+2, r24	; 0x02
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	84 30       	cpi	r24, 0x04	; 4
    240a:	d0 f2       	brcs	.-76     	; 0x23c0 <KEYPAD_getPressedKey+0x94>
						#endif
					#endif
				}
			}
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	69 81       	ldd	r22, Y+1	; 0x01
    2410:	41 e0       	ldi	r20, 0x01	; 1
    2412:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <GPIO_writePin>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	8f 5f       	subi	r24, 0xFF	; 255
    241a:	89 83       	std	Y+1, r24	; 0x01
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	84 30       	cpi	r24, 0x04	; 4
    2420:	40 f2       	brcs	.-112    	; 0x23b2 <KEYPAD_getPressedKey+0x86>
    2422:	c5 cf       	rjmp	.-118    	; 0x23ae <KEYPAD_getPressedKey+0x82>

00002424 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	00 d0       	rcall	.+0      	; 0x242a <KEYPAD_4x4_adjustKeyNumber+0x6>
    242a:	00 d0       	rcall	.+0      	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x8>
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2432:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2434:	8a 81       	ldd	r24, Y+2	; 0x02
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	3c 83       	std	Y+4, r19	; 0x04
    243c:	2b 83       	std	Y+3, r18	; 0x03
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	9c 81       	ldd	r25, Y+4	; 0x04
    2442:	88 30       	cpi	r24, 0x08	; 8
    2444:	91 05       	cpc	r25, r1
    2446:	09 f4       	brne	.+2      	; 0x244a <KEYPAD_4x4_adjustKeyNumber+0x26>
    2448:	70 c0       	rjmp	.+224    	; 0x252a <KEYPAD_4x4_adjustKeyNumber+0x106>
    244a:	2b 81       	ldd	r18, Y+3	; 0x03
    244c:	3c 81       	ldd	r19, Y+4	; 0x04
    244e:	29 30       	cpi	r18, 0x09	; 9
    2450:	31 05       	cpc	r19, r1
    2452:	5c f5       	brge	.+86     	; 0x24aa <KEYPAD_4x4_adjustKeyNumber+0x86>
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	84 30       	cpi	r24, 0x04	; 4
    245a:	91 05       	cpc	r25, r1
    245c:	09 f4       	brne	.+2      	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    245e:	59 c0       	rjmp	.+178    	; 0x2512 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2460:	2b 81       	ldd	r18, Y+3	; 0x03
    2462:	3c 81       	ldd	r19, Y+4	; 0x04
    2464:	25 30       	cpi	r18, 0x05	; 5
    2466:	31 05       	cpc	r19, r1
    2468:	9c f4       	brge	.+38     	; 0x2490 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	82 30       	cpi	r24, 0x02	; 2
    2470:	91 05       	cpc	r25, r1
    2472:	09 f4       	brne	.+2      	; 0x2476 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2474:	48 c0       	rjmp	.+144    	; 0x2506 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2476:	2b 81       	ldd	r18, Y+3	; 0x03
    2478:	3c 81       	ldd	r19, Y+4	; 0x04
    247a:	23 30       	cpi	r18, 0x03	; 3
    247c:	31 05       	cpc	r19, r1
    247e:	0c f0       	brlt	.+2      	; 0x2482 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2480:	45 c0       	rjmp	.+138    	; 0x250c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	9c 81       	ldd	r25, Y+4	; 0x04
    2486:	81 30       	cpi	r24, 0x01	; 1
    2488:	91 05       	cpc	r25, r1
    248a:	09 f4       	brne	.+2      	; 0x248e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    248c:	39 c0       	rjmp	.+114    	; 0x2500 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    248e:	67 c0       	rjmp	.+206    	; 0x255e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2490:	2b 81       	ldd	r18, Y+3	; 0x03
    2492:	3c 81       	ldd	r19, Y+4	; 0x04
    2494:	26 30       	cpi	r18, 0x06	; 6
    2496:	31 05       	cpc	r19, r1
    2498:	09 f4       	brne	.+2      	; 0x249c <KEYPAD_4x4_adjustKeyNumber+0x78>
    249a:	41 c0       	rjmp	.+130    	; 0x251e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	9c 81       	ldd	r25, Y+4	; 0x04
    24a0:	87 30       	cpi	r24, 0x07	; 7
    24a2:	91 05       	cpc	r25, r1
    24a4:	0c f0       	brlt	.+2      	; 0x24a8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    24a6:	3e c0       	rjmp	.+124    	; 0x2524 <KEYPAD_4x4_adjustKeyNumber+0x100>
    24a8:	37 c0       	rjmp	.+110    	; 0x2518 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    24aa:	2b 81       	ldd	r18, Y+3	; 0x03
    24ac:	3c 81       	ldd	r19, Y+4	; 0x04
    24ae:	2c 30       	cpi	r18, 0x0C	; 12
    24b0:	31 05       	cpc	r19, r1
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    24b4:	46 c0       	rjmp	.+140    	; 0x2542 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ba:	8d 30       	cpi	r24, 0x0D	; 13
    24bc:	91 05       	cpc	r25, r1
    24be:	5c f4       	brge	.+22     	; 0x24d6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    24c0:	2b 81       	ldd	r18, Y+3	; 0x03
    24c2:	3c 81       	ldd	r19, Y+4	; 0x04
    24c4:	2a 30       	cpi	r18, 0x0A	; 10
    24c6:	31 05       	cpc	r19, r1
    24c8:	b1 f1       	breq	.+108    	; 0x2536 <KEYPAD_4x4_adjustKeyNumber+0x112>
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	9c 81       	ldd	r25, Y+4	; 0x04
    24ce:	8b 30       	cpi	r24, 0x0B	; 11
    24d0:	91 05       	cpc	r25, r1
    24d2:	a4 f5       	brge	.+104    	; 0x253c <KEYPAD_4x4_adjustKeyNumber+0x118>
    24d4:	2d c0       	rjmp	.+90     	; 0x2530 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    24d6:	2b 81       	ldd	r18, Y+3	; 0x03
    24d8:	3c 81       	ldd	r19, Y+4	; 0x04
    24da:	2e 30       	cpi	r18, 0x0E	; 14
    24dc:	31 05       	cpc	r19, r1
    24de:	b9 f1       	breq	.+110    	; 0x254e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	9c 81       	ldd	r25, Y+4	; 0x04
    24e4:	8e 30       	cpi	r24, 0x0E	; 14
    24e6:	91 05       	cpc	r25, r1
    24e8:	7c f1       	brlt	.+94     	; 0x2548 <KEYPAD_4x4_adjustKeyNumber+0x124>
    24ea:	2b 81       	ldd	r18, Y+3	; 0x03
    24ec:	3c 81       	ldd	r19, Y+4	; 0x04
    24ee:	2f 30       	cpi	r18, 0x0F	; 15
    24f0:	31 05       	cpc	r19, r1
    24f2:	79 f1       	breq	.+94     	; 0x2552 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	9c 81       	ldd	r25, Y+4	; 0x04
    24f8:	80 31       	cpi	r24, 0x10	; 16
    24fa:	91 05       	cpc	r25, r1
    24fc:	69 f1       	breq	.+90     	; 0x2558 <KEYPAD_4x4_adjustKeyNumber+0x134>
    24fe:	2f c0       	rjmp	.+94     	; 0x255e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2500:	87 e0       	ldi	r24, 0x07	; 7
    2502:	89 83       	std	Y+1, r24	; 0x01
    2504:	2e c0       	rjmp	.+92     	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2506:	88 e0       	ldi	r24, 0x08	; 8
    2508:	89 83       	std	Y+1, r24	; 0x01
    250a:	2b c0       	rjmp	.+86     	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    250c:	89 e0       	ldi	r24, 0x09	; 9
    250e:	89 83       	std	Y+1, r24	; 0x01
    2510:	28 c0       	rjmp	.+80     	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2512:	85 e2       	ldi	r24, 0x25	; 37
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	25 c0       	rjmp	.+74     	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2518:	84 e0       	ldi	r24, 0x04	; 4
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	22 c0       	rjmp	.+68     	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    251e:	85 e0       	ldi	r24, 0x05	; 5
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	1f c0       	rjmp	.+62     	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2524:	86 e0       	ldi	r24, 0x06	; 6
    2526:	89 83       	std	Y+1, r24	; 0x01
    2528:	1c c0       	rjmp	.+56     	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    252a:	8a e2       	ldi	r24, 0x2A	; 42
    252c:	89 83       	std	Y+1, r24	; 0x01
    252e:	19 c0       	rjmp	.+50     	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	89 83       	std	Y+1, r24	; 0x01
    2534:	16 c0       	rjmp	.+44     	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2536:	82 e0       	ldi	r24, 0x02	; 2
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	13 c0       	rjmp	.+38     	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    253c:	83 e0       	ldi	r24, 0x03	; 3
    253e:	89 83       	std	Y+1, r24	; 0x01
    2540:	10 c0       	rjmp	.+32     	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2542:	8d e2       	ldi	r24, 0x2D	; 45
    2544:	89 83       	std	Y+1, r24	; 0x01
    2546:	0d c0       	rjmp	.+26     	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2548:	8d e0       	ldi	r24, 0x0D	; 13
    254a:	89 83       	std	Y+1, r24	; 0x01
    254c:	0a c0       	rjmp	.+20     	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    254e:	19 82       	std	Y+1, r1	; 0x01
    2550:	08 c0       	rjmp	.+16     	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2552:	8d e3       	ldi	r24, 0x3D	; 61
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	05 c0       	rjmp	.+10     	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2558:	8b e2       	ldi	r24, 0x2B	; 43
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2562:	89 81       	ldd	r24, Y+1	; 0x01
}
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <LCD_SendCommand>:

/*-------------------------------------------------------------------------*/
/*-------------------------FUNCTION DEFINITIONS----------------------------*/
/*-------------------------------------------------------------------------*/
void LCD_SendCommand (uint8 command)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	e9 97       	sbiw	r28, 0x39	; 57
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	89 af       	std	Y+57, r24	; 0x39

	/*RS=0 */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	62 e0       	ldi	r22, 0x02	; 2
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <GPIO_writePin>
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a0 e8       	ldi	r26, 0x80	; 128
    2598:	bf e3       	ldi	r27, 0x3F	; 63
    259a:	8d ab       	std	Y+53, r24	; 0x35
    259c:	9e ab       	std	Y+54, r25	; 0x36
    259e:	af ab       	std	Y+55, r26	; 0x37
    25a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a2:	6d a9       	ldd	r22, Y+53	; 0x35
    25a4:	7e a9       	ldd	r23, Y+54	; 0x36
    25a6:	8f a9       	ldd	r24, Y+55	; 0x37
    25a8:	98 ad       	ldd	r25, Y+56	; 0x38
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	4a e7       	ldi	r20, 0x7A	; 122
    25b0:	53 e4       	ldi	r21, 0x43	; 67
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	89 ab       	std	Y+49, r24	; 0x31
    25bc:	9a ab       	std	Y+50, r25	; 0x32
    25be:	ab ab       	std	Y+51, r26	; 0x33
    25c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25c2:	69 a9       	ldd	r22, Y+49	; 0x31
    25c4:	7a a9       	ldd	r23, Y+50	; 0x32
    25c6:	8b a9       	ldd	r24, Y+51	; 0x33
    25c8:	9c a9       	ldd	r25, Y+52	; 0x34
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	2c f4       	brge	.+10     	; 0x25e4 <LCD_SendCommand+0x72>
		__ticks = 1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	98 ab       	std	Y+48, r25	; 0x30
    25e0:	8f a7       	std	Y+47, r24	; 0x2f
    25e2:	3f c0       	rjmp	.+126    	; 0x2662 <LCD_SendCommand+0xf0>
	else if (__tmp > 65535)
    25e4:	69 a9       	ldd	r22, Y+49	; 0x31
    25e6:	7a a9       	ldd	r23, Y+50	; 0x32
    25e8:	8b a9       	ldd	r24, Y+51	; 0x33
    25ea:	9c a9       	ldd	r25, Y+52	; 0x34
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	3f ef       	ldi	r19, 0xFF	; 255
    25f0:	4f e7       	ldi	r20, 0x7F	; 127
    25f2:	57 e4       	ldi	r21, 0x47	; 71
    25f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f8:	18 16       	cp	r1, r24
    25fa:	4c f5       	brge	.+82     	; 0x264e <LCD_SendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fc:	6d a9       	ldd	r22, Y+53	; 0x35
    25fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2600:	8f a9       	ldd	r24, Y+55	; 0x37
    2602:	98 ad       	ldd	r25, Y+56	; 0x38
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e2       	ldi	r20, 0x20	; 32
    260a:	51 e4       	ldi	r21, 0x41	; 65
    260c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	98 ab       	std	Y+48, r25	; 0x30
    2622:	8f a7       	std	Y+47, r24	; 0x2f
    2624:	0f c0       	rjmp	.+30     	; 0x2644 <LCD_SendCommand+0xd2>
    2626:	89 e1       	ldi	r24, 0x19	; 25
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9e a7       	std	Y+46, r25	; 0x2e
    262c:	8d a7       	std	Y+45, r24	; 0x2d
    262e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2630:	9e a5       	ldd	r25, Y+46	; 0x2e
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <LCD_SendCommand+0xc0>
    2636:	9e a7       	std	Y+46, r25	; 0x2e
    2638:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263a:	8f a5       	ldd	r24, Y+47	; 0x2f
    263c:	98 a9       	ldd	r25, Y+48	; 0x30
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	98 ab       	std	Y+48, r25	; 0x30
    2642:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2644:	8f a5       	ldd	r24, Y+47	; 0x2f
    2646:	98 a9       	ldd	r25, Y+48	; 0x30
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	69 f7       	brne	.-38     	; 0x2626 <LCD_SendCommand+0xb4>
    264c:	14 c0       	rjmp	.+40     	; 0x2676 <LCD_SendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264e:	69 a9       	ldd	r22, Y+49	; 0x31
    2650:	7a a9       	ldd	r23, Y+50	; 0x32
    2652:	8b a9       	ldd	r24, Y+51	; 0x33
    2654:	9c a9       	ldd	r25, Y+52	; 0x34
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	98 ab       	std	Y+48, r25	; 0x30
    2660:	8f a7       	std	Y+47, r24	; 0x2f
    2662:	8f a5       	ldd	r24, Y+47	; 0x2f
    2664:	98 a9       	ldd	r25, Y+48	; 0x30
    2666:	9c a7       	std	Y+44, r25	; 0x2c
    2668:	8b a7       	std	Y+43, r24	; 0x2b
    266a:	8b a5       	ldd	r24, Y+43	; 0x2b
    266c:	9c a5       	ldd	r25, Y+44	; 0x2c
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <LCD_SendCommand+0xfc>
    2672:	9c a7       	std	Y+44, r25	; 0x2c
    2674:	8b a7       	std	Y+43, r24	; 0x2b
	//delay 1u
	_delay_ms(1);

	/*enable =1 */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2676:	83 e0       	ldi	r24, 0x03	; 3
    2678:	63 e0       	ldi	r22, 0x03	; 3
    267a:	41 e0       	ldi	r20, 0x01	; 1
    267c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <GPIO_writePin>
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	a0 e8       	ldi	r26, 0x80	; 128
    2686:	bf e3       	ldi	r27, 0x3F	; 63
    2688:	8f a3       	std	Y+39, r24	; 0x27
    268a:	98 a7       	std	Y+40, r25	; 0x28
    268c:	a9 a7       	std	Y+41, r26	; 0x29
    268e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2690:	6f a1       	ldd	r22, Y+39	; 0x27
    2692:	78 a5       	ldd	r23, Y+40	; 0x28
    2694:	89 a5       	ldd	r24, Y+41	; 0x29
    2696:	9a a5       	ldd	r25, Y+42	; 0x2a
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	4a e7       	ldi	r20, 0x7A	; 122
    269e:	53 e4       	ldi	r21, 0x43	; 67
    26a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	8b a3       	std	Y+35, r24	; 0x23
    26aa:	9c a3       	std	Y+36, r25	; 0x24
    26ac:	ad a3       	std	Y+37, r26	; 0x25
    26ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26b0:	6b a1       	ldd	r22, Y+35	; 0x23
    26b2:	7c a1       	ldd	r23, Y+36	; 0x24
    26b4:	8d a1       	ldd	r24, Y+37	; 0x25
    26b6:	9e a1       	ldd	r25, Y+38	; 0x26
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e8       	ldi	r20, 0x80	; 128
    26be:	5f e3       	ldi	r21, 0x3F	; 63
    26c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c4:	88 23       	and	r24, r24
    26c6:	2c f4       	brge	.+10     	; 0x26d2 <LCD_SendCommand+0x160>
		__ticks = 1;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	9a a3       	std	Y+34, r25	; 0x22
    26ce:	89 a3       	std	Y+33, r24	; 0x21
    26d0:	3f c0       	rjmp	.+126    	; 0x2750 <LCD_SendCommand+0x1de>
	else if (__tmp > 65535)
    26d2:	6b a1       	ldd	r22, Y+35	; 0x23
    26d4:	7c a1       	ldd	r23, Y+36	; 0x24
    26d6:	8d a1       	ldd	r24, Y+37	; 0x25
    26d8:	9e a1       	ldd	r25, Y+38	; 0x26
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	3f ef       	ldi	r19, 0xFF	; 255
    26de:	4f e7       	ldi	r20, 0x7F	; 127
    26e0:	57 e4       	ldi	r21, 0x47	; 71
    26e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e6:	18 16       	cp	r1, r24
    26e8:	4c f5       	brge	.+82     	; 0x273c <LCD_SendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ea:	6f a1       	ldd	r22, Y+39	; 0x27
    26ec:	78 a5       	ldd	r23, Y+40	; 0x28
    26ee:	89 a5       	ldd	r24, Y+41	; 0x29
    26f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e2       	ldi	r20, 0x20	; 32
    26f8:	51 e4       	ldi	r21, 0x41	; 65
    26fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	bc 01       	movw	r22, r24
    2704:	cd 01       	movw	r24, r26
    2706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	9a a3       	std	Y+34, r25	; 0x22
    2710:	89 a3       	std	Y+33, r24	; 0x21
    2712:	0f c0       	rjmp	.+30     	; 0x2732 <LCD_SendCommand+0x1c0>
    2714:	89 e1       	ldi	r24, 0x19	; 25
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	98 a3       	std	Y+32, r25	; 0x20
    271a:	8f 8f       	std	Y+31, r24	; 0x1f
    271c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    271e:	98 a1       	ldd	r25, Y+32	; 0x20
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	f1 f7       	brne	.-4      	; 0x2720 <LCD_SendCommand+0x1ae>
    2724:	98 a3       	std	Y+32, r25	; 0x20
    2726:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2728:	89 a1       	ldd	r24, Y+33	; 0x21
    272a:	9a a1       	ldd	r25, Y+34	; 0x22
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	9a a3       	std	Y+34, r25	; 0x22
    2730:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2732:	89 a1       	ldd	r24, Y+33	; 0x21
    2734:	9a a1       	ldd	r25, Y+34	; 0x22
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	69 f7       	brne	.-38     	; 0x2714 <LCD_SendCommand+0x1a2>
    273a:	14 c0       	rjmp	.+40     	; 0x2764 <LCD_SendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273c:	6b a1       	ldd	r22, Y+35	; 0x23
    273e:	7c a1       	ldd	r23, Y+36	; 0x24
    2740:	8d a1       	ldd	r24, Y+37	; 0x25
    2742:	9e a1       	ldd	r25, Y+38	; 0x26
    2744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	9a a3       	std	Y+34, r25	; 0x22
    274e:	89 a3       	std	Y+33, r24	; 0x21
    2750:	89 a1       	ldd	r24, Y+33	; 0x21
    2752:	9a a1       	ldd	r25, Y+34	; 0x22
    2754:	9e 8f       	std	Y+30, r25	; 0x1e
    2756:	8d 8f       	std	Y+29, r24	; 0x1d
    2758:	8d 8d       	ldd	r24, Y+29	; 0x1d
    275a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <LCD_SendCommand+0x1ea>
    2760:	9e 8f       	std	Y+30, r25	; 0x1e
    2762:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	//send command
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    2764:	82 e0       	ldi	r24, 0x02	; 2
    2766:	69 ad       	ldd	r22, Y+57	; 0x39
    2768:	0e 94 0d 11 	call	0x221a	; 0x221a <GPIO_writePort>
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	a0 e8       	ldi	r26, 0x80	; 128
    2772:	bf e3       	ldi	r27, 0x3F	; 63
    2774:	89 8f       	std	Y+25, r24	; 0x19
    2776:	9a 8f       	std	Y+26, r25	; 0x1a
    2778:	ab 8f       	std	Y+27, r26	; 0x1b
    277a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277c:	69 8d       	ldd	r22, Y+25	; 0x19
    277e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2780:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2782:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	4a e7       	ldi	r20, 0x7A	; 122
    278a:	53 e4       	ldi	r21, 0x43	; 67
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	8d 8b       	std	Y+21, r24	; 0x15
    2796:	9e 8b       	std	Y+22, r25	; 0x16
    2798:	af 8b       	std	Y+23, r26	; 0x17
    279a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    279c:	6d 89       	ldd	r22, Y+21	; 0x15
    279e:	7e 89       	ldd	r23, Y+22	; 0x16
    27a0:	8f 89       	ldd	r24, Y+23	; 0x17
    27a2:	98 8d       	ldd	r25, Y+24	; 0x18
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e8       	ldi	r20, 0x80	; 128
    27aa:	5f e3       	ldi	r21, 0x3F	; 63
    27ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b0:	88 23       	and	r24, r24
    27b2:	2c f4       	brge	.+10     	; 0x27be <LCD_SendCommand+0x24c>
		__ticks = 1;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	9c 8b       	std	Y+20, r25	; 0x14
    27ba:	8b 8b       	std	Y+19, r24	; 0x13
    27bc:	3f c0       	rjmp	.+126    	; 0x283c <LCD_SendCommand+0x2ca>
	else if (__tmp > 65535)
    27be:	6d 89       	ldd	r22, Y+21	; 0x15
    27c0:	7e 89       	ldd	r23, Y+22	; 0x16
    27c2:	8f 89       	ldd	r24, Y+23	; 0x17
    27c4:	98 8d       	ldd	r25, Y+24	; 0x18
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	3f ef       	ldi	r19, 0xFF	; 255
    27ca:	4f e7       	ldi	r20, 0x7F	; 127
    27cc:	57 e4       	ldi	r21, 0x47	; 71
    27ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d2:	18 16       	cp	r1, r24
    27d4:	4c f5       	brge	.+82     	; 0x2828 <LCD_SendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d6:	69 8d       	ldd	r22, Y+25	; 0x19
    27d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e2       	ldi	r20, 0x20	; 32
    27e4:	51 e4       	ldi	r21, 0x41	; 65
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	9c 8b       	std	Y+20, r25	; 0x14
    27fc:	8b 8b       	std	Y+19, r24	; 0x13
    27fe:	0f c0       	rjmp	.+30     	; 0x281e <LCD_SendCommand+0x2ac>
    2800:	89 e1       	ldi	r24, 0x19	; 25
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9a 8b       	std	Y+18, r25	; 0x12
    2806:	89 8b       	std	Y+17, r24	; 0x11
    2808:	89 89       	ldd	r24, Y+17	; 0x11
    280a:	9a 89       	ldd	r25, Y+18	; 0x12
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <LCD_SendCommand+0x29a>
    2810:	9a 8b       	std	Y+18, r25	; 0x12
    2812:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2814:	8b 89       	ldd	r24, Y+19	; 0x13
    2816:	9c 89       	ldd	r25, Y+20	; 0x14
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	9c 8b       	std	Y+20, r25	; 0x14
    281c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281e:	8b 89       	ldd	r24, Y+19	; 0x13
    2820:	9c 89       	ldd	r25, Y+20	; 0x14
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	69 f7       	brne	.-38     	; 0x2800 <LCD_SendCommand+0x28e>
    2826:	14 c0       	rjmp	.+40     	; 0x2850 <LCD_SendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2828:	6d 89       	ldd	r22, Y+21	; 0x15
    282a:	7e 89       	ldd	r23, Y+22	; 0x16
    282c:	8f 89       	ldd	r24, Y+23	; 0x17
    282e:	98 8d       	ldd	r25, Y+24	; 0x18
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9c 8b       	std	Y+20, r25	; 0x14
    283a:	8b 8b       	std	Y+19, r24	; 0x13
    283c:	8b 89       	ldd	r24, Y+19	; 0x13
    283e:	9c 89       	ldd	r25, Y+20	; 0x14
    2840:	98 8b       	std	Y+16, r25	; 0x10
    2842:	8f 87       	std	Y+15, r24	; 0x0f
    2844:	8f 85       	ldd	r24, Y+15	; 0x0f
    2846:	98 89       	ldd	r25, Y+16	; 0x10
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <LCD_SendCommand+0x2d6>
    284c:	98 8b       	std	Y+16, r25	; 0x10
    284e:	8f 87       	std	Y+15, r24	; 0x0f
	/*delay 1u*/
	_delay_ms(1);

	/*enable =0*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2850:	83 e0       	ldi	r24, 0x03	; 3
    2852:	63 e0       	ldi	r22, 0x03	; 3
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <GPIO_writePin>
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	a0 e8       	ldi	r26, 0x80	; 128
    2860:	bf e3       	ldi	r27, 0x3F	; 63
    2862:	8b 87       	std	Y+11, r24	; 0x0b
    2864:	9c 87       	std	Y+12, r25	; 0x0c
    2866:	ad 87       	std	Y+13, r26	; 0x0d
    2868:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286a:	6b 85       	ldd	r22, Y+11	; 0x0b
    286c:	7c 85       	ldd	r23, Y+12	; 0x0c
    286e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2870:	9e 85       	ldd	r25, Y+14	; 0x0e
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	4a e7       	ldi	r20, 0x7A	; 122
    2878:	53 e4       	ldi	r21, 0x43	; 67
    287a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	8f 83       	std	Y+7, r24	; 0x07
    2884:	98 87       	std	Y+8, r25	; 0x08
    2886:	a9 87       	std	Y+9, r26	; 0x09
    2888:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    288a:	6f 81       	ldd	r22, Y+7	; 0x07
    288c:	78 85       	ldd	r23, Y+8	; 0x08
    288e:	89 85       	ldd	r24, Y+9	; 0x09
    2890:	9a 85       	ldd	r25, Y+10	; 0x0a
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e8       	ldi	r20, 0x80	; 128
    2898:	5f e3       	ldi	r21, 0x3F	; 63
    289a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289e:	88 23       	and	r24, r24
    28a0:	2c f4       	brge	.+10     	; 0x28ac <LCD_SendCommand+0x33a>
		__ticks = 1;
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	8d 83       	std	Y+5, r24	; 0x05
    28aa:	3f c0       	rjmp	.+126    	; 0x292a <LCD_SendCommand+0x3b8>
	else if (__tmp > 65535)
    28ac:	6f 81       	ldd	r22, Y+7	; 0x07
    28ae:	78 85       	ldd	r23, Y+8	; 0x08
    28b0:	89 85       	ldd	r24, Y+9	; 0x09
    28b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	3f ef       	ldi	r19, 0xFF	; 255
    28b8:	4f e7       	ldi	r20, 0x7F	; 127
    28ba:	57 e4       	ldi	r21, 0x47	; 71
    28bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c0:	18 16       	cp	r1, r24
    28c2:	4c f5       	brge	.+82     	; 0x2916 <LCD_SendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	40 e2       	ldi	r20, 0x20	; 32
    28d2:	51 e4       	ldi	r21, 0x41	; 65
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	bc 01       	movw	r22, r24
    28de:	cd 01       	movw	r24, r26
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9e 83       	std	Y+6, r25	; 0x06
    28ea:	8d 83       	std	Y+5, r24	; 0x05
    28ec:	0f c0       	rjmp	.+30     	; 0x290c <LCD_SendCommand+0x39a>
    28ee:	89 e1       	ldi	r24, 0x19	; 25
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	9c 83       	std	Y+4, r25	; 0x04
    28f4:	8b 83       	std	Y+3, r24	; 0x03
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <LCD_SendCommand+0x388>
    28fe:	9c 83       	std	Y+4, r25	; 0x04
    2900:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2902:	8d 81       	ldd	r24, Y+5	; 0x05
    2904:	9e 81       	ldd	r25, Y+6	; 0x06
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	9e 83       	std	Y+6, r25	; 0x06
    290a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290c:	8d 81       	ldd	r24, Y+5	; 0x05
    290e:	9e 81       	ldd	r25, Y+6	; 0x06
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	69 f7       	brne	.-38     	; 0x28ee <LCD_SendCommand+0x37c>
    2914:	14 c0       	rjmp	.+40     	; 0x293e <LCD_SendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2916:	6f 81       	ldd	r22, Y+7	; 0x07
    2918:	78 85       	ldd	r23, Y+8	; 0x08
    291a:	89 85       	ldd	r24, Y+9	; 0x09
    291c:	9a 85       	ldd	r25, Y+10	; 0x0a
    291e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
    292a:	8d 81       	ldd	r24, Y+5	; 0x05
    292c:	9e 81       	ldd	r25, Y+6	; 0x06
    292e:	9a 83       	std	Y+2, r25	; 0x02
    2930:	89 83       	std	Y+1, r24	; 0x01
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	9a 81       	ldd	r25, Y+2	; 0x02
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	f1 f7       	brne	.-4      	; 0x2936 <LCD_SendCommand+0x3c4>
    293a:	9a 83       	std	Y+2, r25	; 0x02
    293c:	89 83       	std	Y+1, r24	; 0x01
	/*delay 1u*/
	_delay_ms(1);
#endif

}
    293e:	e9 96       	adiw	r28, 0x39	; 57
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <LCD_display_Character>:

void LCD_display_Character (uint8 character)
{
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
    2958:	e9 97       	sbiw	r28, 0x39	; 57
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	f8 94       	cli
    295e:	de bf       	out	0x3e, r29	; 62
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	cd bf       	out	0x3d, r28	; 61
    2964:	89 af       	std	Y+57, r24	; 0x39
	/*RS=1*/
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2966:	83 e0       	ldi	r24, 0x03	; 3
    2968:	62 e0       	ldi	r22, 0x02	; 2
    296a:	41 e0       	ldi	r20, 0x01	; 1
    296c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <GPIO_writePin>
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	a0 e8       	ldi	r26, 0x80	; 128
    2976:	bf e3       	ldi	r27, 0x3F	; 63
    2978:	8d ab       	std	Y+53, r24	; 0x35
    297a:	9e ab       	std	Y+54, r25	; 0x36
    297c:	af ab       	std	Y+55, r26	; 0x37
    297e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2980:	6d a9       	ldd	r22, Y+53	; 0x35
    2982:	7e a9       	ldd	r23, Y+54	; 0x36
    2984:	8f a9       	ldd	r24, Y+55	; 0x37
    2986:	98 ad       	ldd	r25, Y+56	; 0x38
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	4a e7       	ldi	r20, 0x7A	; 122
    298e:	53 e4       	ldi	r21, 0x43	; 67
    2990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	89 ab       	std	Y+49, r24	; 0x31
    299a:	9a ab       	std	Y+50, r25	; 0x32
    299c:	ab ab       	std	Y+51, r26	; 0x33
    299e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29a0:	69 a9       	ldd	r22, Y+49	; 0x31
    29a2:	7a a9       	ldd	r23, Y+50	; 0x32
    29a4:	8b a9       	ldd	r24, Y+51	; 0x33
    29a6:	9c a9       	ldd	r25, Y+52	; 0x34
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e8       	ldi	r20, 0x80	; 128
    29ae:	5f e3       	ldi	r21, 0x3F	; 63
    29b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b4:	88 23       	and	r24, r24
    29b6:	2c f4       	brge	.+10     	; 0x29c2 <LCD_display_Character+0x72>
		__ticks = 1;
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	98 ab       	std	Y+48, r25	; 0x30
    29be:	8f a7       	std	Y+47, r24	; 0x2f
    29c0:	3f c0       	rjmp	.+126    	; 0x2a40 <LCD_display_Character+0xf0>
	else if (__tmp > 65535)
    29c2:	69 a9       	ldd	r22, Y+49	; 0x31
    29c4:	7a a9       	ldd	r23, Y+50	; 0x32
    29c6:	8b a9       	ldd	r24, Y+51	; 0x33
    29c8:	9c a9       	ldd	r25, Y+52	; 0x34
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	3f ef       	ldi	r19, 0xFF	; 255
    29ce:	4f e7       	ldi	r20, 0x7F	; 127
    29d0:	57 e4       	ldi	r21, 0x47	; 71
    29d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d6:	18 16       	cp	r1, r24
    29d8:	4c f5       	brge	.+82     	; 0x2a2c <LCD_display_Character+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29da:	6d a9       	ldd	r22, Y+53	; 0x35
    29dc:	7e a9       	ldd	r23, Y+54	; 0x36
    29de:	8f a9       	ldd	r24, Y+55	; 0x37
    29e0:	98 ad       	ldd	r25, Y+56	; 0x38
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e2       	ldi	r20, 0x20	; 32
    29e8:	51 e4       	ldi	r21, 0x41	; 65
    29ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	bc 01       	movw	r22, r24
    29f4:	cd 01       	movw	r24, r26
    29f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	98 ab       	std	Y+48, r25	; 0x30
    2a00:	8f a7       	std	Y+47, r24	; 0x2f
    2a02:	0f c0       	rjmp	.+30     	; 0x2a22 <LCD_display_Character+0xd2>
    2a04:	89 e1       	ldi	r24, 0x19	; 25
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	9e a7       	std	Y+46, r25	; 0x2e
    2a0a:	8d a7       	std	Y+45, r24	; 0x2d
    2a0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <LCD_display_Character+0xc0>
    2a14:	9e a7       	std	Y+46, r25	; 0x2e
    2a16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	98 ab       	std	Y+48, r25	; 0x30
    2a20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a24:	98 a9       	ldd	r25, Y+48	; 0x30
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	69 f7       	brne	.-38     	; 0x2a04 <LCD_display_Character+0xb4>
    2a2a:	14 c0       	rjmp	.+40     	; 0x2a54 <LCD_display_Character+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a2e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a30:	8b a9       	ldd	r24, Y+51	; 0x33
    2a32:	9c a9       	ldd	r25, Y+52	; 0x34
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	98 ab       	std	Y+48, r25	; 0x30
    2a3e:	8f a7       	std	Y+47, r24	; 0x2f
    2a40:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a42:	98 a9       	ldd	r25, Y+48	; 0x30
    2a44:	9c a7       	std	Y+44, r25	; 0x2c
    2a46:	8b a7       	std	Y+43, r24	; 0x2b
    2a48:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <LCD_display_Character+0xfc>
    2a50:	9c a7       	std	Y+44, r25	; 0x2c
    2a52:	8b a7       	std	Y+43, r24	; 0x2b
	/*delay 1u*/
	_delay_ms(1);

	/*enable =1*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2a54:	83 e0       	ldi	r24, 0x03	; 3
    2a56:	63 e0       	ldi	r22, 0x03	; 3
    2a58:	41 e0       	ldi	r20, 0x01	; 1
    2a5a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <GPIO_writePin>
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	a0 e8       	ldi	r26, 0x80	; 128
    2a64:	bf e3       	ldi	r27, 0x3F	; 63
    2a66:	8f a3       	std	Y+39, r24	; 0x27
    2a68:	98 a7       	std	Y+40, r25	; 0x28
    2a6a:	a9 a7       	std	Y+41, r26	; 0x29
    2a6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6e:	6f a1       	ldd	r22, Y+39	; 0x27
    2a70:	78 a5       	ldd	r23, Y+40	; 0x28
    2a72:	89 a5       	ldd	r24, Y+41	; 0x29
    2a74:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	4a e7       	ldi	r20, 0x7A	; 122
    2a7c:	53 e4       	ldi	r21, 0x43	; 67
    2a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	8b a3       	std	Y+35, r24	; 0x23
    2a88:	9c a3       	std	Y+36, r25	; 0x24
    2a8a:	ad a3       	std	Y+37, r26	; 0x25
    2a8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a90:	7c a1       	ldd	r23, Y+36	; 0x24
    2a92:	8d a1       	ldd	r24, Y+37	; 0x25
    2a94:	9e a1       	ldd	r25, Y+38	; 0x26
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e8       	ldi	r20, 0x80	; 128
    2a9c:	5f e3       	ldi	r21, 0x3F	; 63
    2a9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aa2:	88 23       	and	r24, r24
    2aa4:	2c f4       	brge	.+10     	; 0x2ab0 <LCD_display_Character+0x160>
		__ticks = 1;
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	9a a3       	std	Y+34, r25	; 0x22
    2aac:	89 a3       	std	Y+33, r24	; 0x21
    2aae:	3f c0       	rjmp	.+126    	; 0x2b2e <LCD_display_Character+0x1de>
	else if (__tmp > 65535)
    2ab0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ab2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ab4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	3f ef       	ldi	r19, 0xFF	; 255
    2abc:	4f e7       	ldi	r20, 0x7F	; 127
    2abe:	57 e4       	ldi	r21, 0x47	; 71
    2ac0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac4:	18 16       	cp	r1, r24
    2ac6:	4c f5       	brge	.+82     	; 0x2b1a <LCD_display_Character+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac8:	6f a1       	ldd	r22, Y+39	; 0x27
    2aca:	78 a5       	ldd	r23, Y+40	; 0x28
    2acc:	89 a5       	ldd	r24, Y+41	; 0x29
    2ace:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e2       	ldi	r20, 0x20	; 32
    2ad6:	51 e4       	ldi	r21, 0x41	; 65
    2ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	9a a3       	std	Y+34, r25	; 0x22
    2aee:	89 a3       	std	Y+33, r24	; 0x21
    2af0:	0f c0       	rjmp	.+30     	; 0x2b10 <LCD_display_Character+0x1c0>
    2af2:	89 e1       	ldi	r24, 0x19	; 25
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	98 a3       	std	Y+32, r25	; 0x20
    2af8:	8f 8f       	std	Y+31, r24	; 0x1f
    2afa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2afc:	98 a1       	ldd	r25, Y+32	; 0x20
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	f1 f7       	brne	.-4      	; 0x2afe <LCD_display_Character+0x1ae>
    2b02:	98 a3       	std	Y+32, r25	; 0x20
    2b04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b06:	89 a1       	ldd	r24, Y+33	; 0x21
    2b08:	9a a1       	ldd	r25, Y+34	; 0x22
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	9a a3       	std	Y+34, r25	; 0x22
    2b0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b10:	89 a1       	ldd	r24, Y+33	; 0x21
    2b12:	9a a1       	ldd	r25, Y+34	; 0x22
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	69 f7       	brne	.-38     	; 0x2af2 <LCD_display_Character+0x1a2>
    2b18:	14 c0       	rjmp	.+40     	; 0x2b42 <LCD_display_Character+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b1c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b20:	9e a1       	ldd	r25, Y+38	; 0x26
    2b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	9a a3       	std	Y+34, r25	; 0x22
    2b2c:	89 a3       	std	Y+33, r24	; 0x21
    2b2e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b30:	9a a1       	ldd	r25, Y+34	; 0x22
    2b32:	9e 8f       	std	Y+30, r25	; 0x1e
    2b34:	8d 8f       	std	Y+29, r24	; 0x1d
    2b36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <LCD_display_Character+0x1ea>
    2b3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b40:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	/*send command*/
	GPIO_writePort(LCD_DATA_PORT_ID, character);
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	69 ad       	ldd	r22, Y+57	; 0x39
    2b46:	0e 94 0d 11 	call	0x221a	; 0x221a <GPIO_writePort>
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	a0 e8       	ldi	r26, 0x80	; 128
    2b50:	bf e3       	ldi	r27, 0x3F	; 63
    2b52:	89 8f       	std	Y+25, r24	; 0x19
    2b54:	9a 8f       	std	Y+26, r25	; 0x1a
    2b56:	ab 8f       	std	Y+27, r26	; 0x1b
    2b58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	4a e7       	ldi	r20, 0x7A	; 122
    2b68:	53 e4       	ldi	r21, 0x43	; 67
    2b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	8d 8b       	std	Y+21, r24	; 0x15
    2b74:	9e 8b       	std	Y+22, r25	; 0x16
    2b76:	af 8b       	std	Y+23, r26	; 0x17
    2b78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b80:	98 8d       	ldd	r25, Y+24	; 0x18
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e8       	ldi	r20, 0x80	; 128
    2b88:	5f e3       	ldi	r21, 0x3F	; 63
    2b8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b8e:	88 23       	and	r24, r24
    2b90:	2c f4       	brge	.+10     	; 0x2b9c <LCD_display_Character+0x24c>
		__ticks = 1;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	9c 8b       	std	Y+20, r25	; 0x14
    2b98:	8b 8b       	std	Y+19, r24	; 0x13
    2b9a:	3f c0       	rjmp	.+126    	; 0x2c1a <LCD_display_Character+0x2ca>
	else if (__tmp > 65535)
    2b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	3f ef       	ldi	r19, 0xFF	; 255
    2ba8:	4f e7       	ldi	r20, 0x7F	; 127
    2baa:	57 e4       	ldi	r21, 0x47	; 71
    2bac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb0:	18 16       	cp	r1, r24
    2bb2:	4c f5       	brge	.+82     	; 0x2c06 <LCD_display_Character+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb4:	69 8d       	ldd	r22, Y+25	; 0x19
    2bb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	40 e2       	ldi	r20, 0x20	; 32
    2bc2:	51 e4       	ldi	r21, 0x41	; 65
    2bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	bc 01       	movw	r22, r24
    2bce:	cd 01       	movw	r24, r26
    2bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	9c 8b       	std	Y+20, r25	; 0x14
    2bda:	8b 8b       	std	Y+19, r24	; 0x13
    2bdc:	0f c0       	rjmp	.+30     	; 0x2bfc <LCD_display_Character+0x2ac>
    2bde:	89 e1       	ldi	r24, 0x19	; 25
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	9a 8b       	std	Y+18, r25	; 0x12
    2be4:	89 8b       	std	Y+17, r24	; 0x11
    2be6:	89 89       	ldd	r24, Y+17	; 0x11
    2be8:	9a 89       	ldd	r25, Y+18	; 0x12
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	f1 f7       	brne	.-4      	; 0x2bea <LCD_display_Character+0x29a>
    2bee:	9a 8b       	std	Y+18, r25	; 0x12
    2bf0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	9c 8b       	std	Y+20, r25	; 0x14
    2bfa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2c00:	00 97       	sbiw	r24, 0x00	; 0
    2c02:	69 f7       	brne	.-38     	; 0x2bde <LCD_display_Character+0x28e>
    2c04:	14 c0       	rjmp	.+40     	; 0x2c2e <LCD_display_Character+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c06:	6d 89       	ldd	r22, Y+21	; 0x15
    2c08:	7e 89       	ldd	r23, Y+22	; 0x16
    2c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	9c 8b       	std	Y+20, r25	; 0x14
    2c18:	8b 8b       	std	Y+19, r24	; 0x13
    2c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c1e:	98 8b       	std	Y+16, r25	; 0x10
    2c20:	8f 87       	std	Y+15, r24	; 0x0f
    2c22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c24:	98 89       	ldd	r25, Y+16	; 0x10
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <LCD_display_Character+0x2d6>
    2c2a:	98 8b       	std	Y+16, r25	; 0x10
    2c2c:	8f 87       	std	Y+15, r24	; 0x0f
	/*delay 1u*/
	_delay_ms(1);

	/*enable =0*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2c2e:	83 e0       	ldi	r24, 0x03	; 3
    2c30:	63 e0       	ldi	r22, 0x03	; 3
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <GPIO_writePin>
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	a0 e8       	ldi	r26, 0x80	; 128
    2c3e:	bf e3       	ldi	r27, 0x3F	; 63
    2c40:	8b 87       	std	Y+11, r24	; 0x0b
    2c42:	9c 87       	std	Y+12, r25	; 0x0c
    2c44:	ad 87       	std	Y+13, r26	; 0x0d
    2c46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	4a e7       	ldi	r20, 0x7A	; 122
    2c56:	53 e4       	ldi	r21, 0x43	; 67
    2c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	8f 83       	std	Y+7, r24	; 0x07
    2c62:	98 87       	std	Y+8, r25	; 0x08
    2c64:	a9 87       	std	Y+9, r26	; 0x09
    2c66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c68:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6a:	78 85       	ldd	r23, Y+8	; 0x08
    2c6c:	89 85       	ldd	r24, Y+9	; 0x09
    2c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	40 e8       	ldi	r20, 0x80	; 128
    2c76:	5f e3       	ldi	r21, 0x3F	; 63
    2c78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c7c:	88 23       	and	r24, r24
    2c7e:	2c f4       	brge	.+10     	; 0x2c8a <LCD_display_Character+0x33a>
		__ticks = 1;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	9e 83       	std	Y+6, r25	; 0x06
    2c86:	8d 83       	std	Y+5, r24	; 0x05
    2c88:	3f c0       	rjmp	.+126    	; 0x2d08 <LCD_display_Character+0x3b8>
	else if (__tmp > 65535)
    2c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8c:	78 85       	ldd	r23, Y+8	; 0x08
    2c8e:	89 85       	ldd	r24, Y+9	; 0x09
    2c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	3f ef       	ldi	r19, 0xFF	; 255
    2c96:	4f e7       	ldi	r20, 0x7F	; 127
    2c98:	57 e4       	ldi	r21, 0x47	; 71
    2c9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c9e:	18 16       	cp	r1, r24
    2ca0:	4c f5       	brge	.+82     	; 0x2cf4 <LCD_display_Character+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e2       	ldi	r20, 0x20	; 32
    2cb0:	51 e4       	ldi	r21, 0x41	; 65
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	9e 83       	std	Y+6, r25	; 0x06
    2cc8:	8d 83       	std	Y+5, r24	; 0x05
    2cca:	0f c0       	rjmp	.+30     	; 0x2cea <LCD_display_Character+0x39a>
    2ccc:	89 e1       	ldi	r24, 0x19	; 25
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	9c 83       	std	Y+4, r25	; 0x04
    2cd2:	8b 83       	std	Y+3, r24	; 0x03
    2cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <LCD_display_Character+0x388>
    2cdc:	9c 83       	std	Y+4, r25	; 0x04
    2cde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	9e 83       	std	Y+6, r25	; 0x06
    2ce8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cea:	8d 81       	ldd	r24, Y+5	; 0x05
    2cec:	9e 81       	ldd	r25, Y+6	; 0x06
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	69 f7       	brne	.-38     	; 0x2ccc <LCD_display_Character+0x37c>
    2cf2:	14 c0       	rjmp	.+40     	; 0x2d1c <LCD_display_Character+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf6:	78 85       	ldd	r23, Y+8	; 0x08
    2cf8:	89 85       	ldd	r24, Y+9	; 0x09
    2cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	9e 83       	std	Y+6, r25	; 0x06
    2d06:	8d 83       	std	Y+5, r24	; 0x05
    2d08:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0c:	9a 83       	std	Y+2, r25	; 0x02
    2d0e:	89 83       	std	Y+1, r24	; 0x01
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	9a 81       	ldd	r25, Y+2	; 0x02
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	f1 f7       	brne	.-4      	; 0x2d14 <LCD_display_Character+0x3c4>
    2d18:	9a 83       	std	Y+2, r25	; 0x02
    2d1a:	89 83       	std	Y+1, r24	; 0x01
	/*delay 1u*/
	_delay_ms(1);
#endif

}
    2d1c:	e9 96       	adiw	r28, 0x39	; 57
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	08 95       	ret

00002d2e <LCD_init>:

void LCD_init (void)
{
    2d2e:	df 93       	push	r29
    2d30:	cf 93       	push	r28
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
    2d36:	2e 97       	sbiw	r28, 0x0e	; 14
    2d38:	0f b6       	in	r0, 0x3f	; 63
    2d3a:	f8 94       	cli
    2d3c:	de bf       	out	0x3e, r29	; 62
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	cd bf       	out	0x3d, r28	; 61
	/*RS & Enable output pins*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2d42:	83 e0       	ldi	r24, 0x03	; 3
    2d44:	62 e0       	ldi	r22, 0x02	; 2
    2d46:	41 e0       	ldi	r20, 0x01	; 1
    2d48:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    2d4c:	83 e0       	ldi	r24, 0x03	; 3
    2d4e:	63 e0       	ldi	r22, 0x03	; 3
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <GPIO_setupPinDirection>
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	a0 ea       	ldi	r26, 0xA0	; 160
    2d5c:	b1 e4       	ldi	r27, 0x41	; 65
    2d5e:	8b 87       	std	Y+11, r24	; 0x0b
    2d60:	9c 87       	std	Y+12, r25	; 0x0c
    2d62:	ad 87       	std	Y+13, r26	; 0x0d
    2d64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	4a e7       	ldi	r20, 0x7A	; 122
    2d74:	53 e4       	ldi	r21, 0x43	; 67
    2d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	8f 83       	std	Y+7, r24	; 0x07
    2d80:	98 87       	std	Y+8, r25	; 0x08
    2d82:	a9 87       	std	Y+9, r26	; 0x09
    2d84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d86:	6f 81       	ldd	r22, Y+7	; 0x07
    2d88:	78 85       	ldd	r23, Y+8	; 0x08
    2d8a:	89 85       	ldd	r24, Y+9	; 0x09
    2d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e8       	ldi	r20, 0x80	; 128
    2d94:	5f e3       	ldi	r21, 0x3F	; 63
    2d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d9a:	88 23       	and	r24, r24
    2d9c:	2c f4       	brge	.+10     	; 0x2da8 <LCD_init+0x7a>
		__ticks = 1;
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	9e 83       	std	Y+6, r25	; 0x06
    2da4:	8d 83       	std	Y+5, r24	; 0x05
    2da6:	3f c0       	rjmp	.+126    	; 0x2e26 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2da8:	6f 81       	ldd	r22, Y+7	; 0x07
    2daa:	78 85       	ldd	r23, Y+8	; 0x08
    2dac:	89 85       	ldd	r24, Y+9	; 0x09
    2dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	3f ef       	ldi	r19, 0xFF	; 255
    2db4:	4f e7       	ldi	r20, 0x7F	; 127
    2db6:	57 e4       	ldi	r21, 0x47	; 71
    2db8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dbc:	18 16       	cp	r1, r24
    2dbe:	4c f5       	brge	.+82     	; 0x2e12 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	40 e2       	ldi	r20, 0x20	; 32
    2dce:	51 e4       	ldi	r21, 0x41	; 65
    2dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	bc 01       	movw	r22, r24
    2dda:	cd 01       	movw	r24, r26
    2ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	9e 83       	std	Y+6, r25	; 0x06
    2de6:	8d 83       	std	Y+5, r24	; 0x05
    2de8:	0f c0       	rjmp	.+30     	; 0x2e08 <LCD_init+0xda>
    2dea:	89 e1       	ldi	r24, 0x19	; 25
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	9c 83       	std	Y+4, r25	; 0x04
    2df0:	8b 83       	std	Y+3, r24	; 0x03
    2df2:	8b 81       	ldd	r24, Y+3	; 0x03
    2df4:	9c 81       	ldd	r25, Y+4	; 0x04
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	f1 f7       	brne	.-4      	; 0x2df6 <LCD_init+0xc8>
    2dfa:	9c 83       	std	Y+4, r25	; 0x04
    2dfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2e00:	9e 81       	ldd	r25, Y+6	; 0x06
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	9e 83       	std	Y+6, r25	; 0x06
    2e06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e08:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0c:	00 97       	sbiw	r24, 0x00	; 0
    2e0e:	69 f7       	brne	.-38     	; 0x2dea <LCD_init+0xbc>
    2e10:	14 c0       	rjmp	.+40     	; 0x2e3a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e12:	6f 81       	ldd	r22, Y+7	; 0x07
    2e14:	78 85       	ldd	r23, Y+8	; 0x08
    2e16:	89 85       	ldd	r24, Y+9	; 0x09
    2e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	9e 83       	std	Y+6, r25	; 0x06
    2e24:	8d 83       	std	Y+5, r24	; 0x05
    2e26:	8d 81       	ldd	r24, Y+5	; 0x05
    2e28:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	9a 81       	ldd	r25, Y+2	; 0x02
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	f1 f7       	brne	.-4      	; 0x2e32 <LCD_init+0x104>
    2e36:	9a 83       	std	Y+2, r25	; 0x02
    2e38:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2e3a:	82 e0       	ldi	r24, 0x02	; 2
    2e3c:	6f ef       	ldi	r22, 0xFF	; 255
    2e3e:	0e 94 c9 10 	call	0x2192	; 0x2192 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_SendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2e42:	88 e3       	ldi	r24, 0x38	; 56
    2e44:	0e 94 b9 12 	call	0x2572	; 0x2572 <LCD_SendCommand>

#endif

	/*send command cursor off*/
	LCD_SendCommand(LCD_CURSOR_OFF);
    2e48:	8c e0       	ldi	r24, 0x0C	; 12
    2e4a:	0e 94 b9 12 	call	0x2572	; 0x2572 <LCD_SendCommand>

	/*clear screen*/
	LCD_SendCommand(LCD_CLEAR_COMMAND);
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	0e 94 b9 12 	call	0x2572	; 0x2572 <LCD_SendCommand>
}
    2e54:	2e 96       	adiw	r28, 0x0e	; 14
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	08 95       	ret

00002e66 <LCD_string_Display>:

void LCD_string_Display (uint8 * str_ptr)
{
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <LCD_string_Display+0x6>
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	9a 83       	std	Y+2, r25	; 0x02
    2e72:	89 83       	std	Y+1, r24	; 0x01
    2e74:	0a c0       	rjmp	.+20     	; 0x2e8a <LCD_string_Display+0x24>
	while (*(str_ptr) != '\0')
	{
		LCD_display_Character(*str_ptr);
    2e76:	e9 81       	ldd	r30, Y+1	; 0x01
    2e78:	fa 81       	ldd	r31, Y+2	; 0x02
    2e7a:	80 81       	ld	r24, Z
    2e7c:	0e 94 a8 14 	call	0x2950	; 0x2950 <LCD_display_Character>
		str_ptr++;
    2e80:	89 81       	ldd	r24, Y+1	; 0x01
    2e82:	9a 81       	ldd	r25, Y+2	; 0x02
    2e84:	01 96       	adiw	r24, 0x01	; 1
    2e86:	9a 83       	std	Y+2, r25	; 0x02
    2e88:	89 83       	std	Y+1, r24	; 0x01
	LCD_SendCommand(LCD_CLEAR_COMMAND);
}

void LCD_string_Display (uint8 * str_ptr)
{
	while (*(str_ptr) != '\0')
    2e8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e8e:	80 81       	ld	r24, Z
    2e90:	88 23       	and	r24, r24
    2e92:	89 f7       	brne	.-30     	; 0x2e76 <LCD_string_Display+0x10>
	{
		LCD_display_Character(*str_ptr);
		str_ptr++;
	}
}
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	08 95       	ret

00002e9e <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 col)
{
    2e9e:	df 93       	push	r29
    2ea0:	cf 93       	push	r28
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <LCD_moveCursor+0x6>
    2ea4:	00 d0       	rcall	.+0      	; 0x2ea6 <LCD_moveCursor+0x8>
    2ea6:	0f 92       	push	r0
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	8a 83       	std	Y+2, r24	; 0x02
    2eae:	6b 83       	std	Y+3, r22	; 0x03
	 * for second row the address is 0x41 0x42 .... so it's th col num + 0x40
	 * for third row the address is 0x10 0x11 ..... so it's the col num +0x10
	 * for fourth row the address is 0x51 0x52 ..... so it's the col num + 0x50
	 */

	switch (row)
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	28 2f       	mov	r18, r24
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	3d 83       	std	Y+5, r19	; 0x05
    2eb8:	2c 83       	std	Y+4, r18	; 0x04
    2eba:	8c 81       	ldd	r24, Y+4	; 0x04
    2ebc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ebe:	81 30       	cpi	r24, 0x01	; 1
    2ec0:	91 05       	cpc	r25, r1
    2ec2:	c1 f0       	breq	.+48     	; 0x2ef4 <LCD_moveCursor+0x56>
    2ec4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ec6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ec8:	22 30       	cpi	r18, 0x02	; 2
    2eca:	31 05       	cpc	r19, r1
    2ecc:	2c f4       	brge	.+10     	; 0x2ed8 <LCD_moveCursor+0x3a>
    2ece:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	61 f0       	breq	.+24     	; 0x2eee <LCD_moveCursor+0x50>
    2ed6:	19 c0       	rjmp	.+50     	; 0x2f0a <LCD_moveCursor+0x6c>
    2ed8:	2c 81       	ldd	r18, Y+4	; 0x04
    2eda:	3d 81       	ldd	r19, Y+5	; 0x05
    2edc:	22 30       	cpi	r18, 0x02	; 2
    2ede:	31 05       	cpc	r19, r1
    2ee0:	69 f0       	breq	.+26     	; 0x2efc <LCD_moveCursor+0x5e>
    2ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee6:	83 30       	cpi	r24, 0x03	; 3
    2ee8:	91 05       	cpc	r25, r1
    2eea:	61 f0       	breq	.+24     	; 0x2f04 <LCD_moveCursor+0x66>
    2eec:	0e c0       	rjmp	.+28     	; 0x2f0a <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    2eee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	0b c0       	rjmp	.+22     	; 0x2f0a <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    2ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef6:	80 5c       	subi	r24, 0xC0	; 192
    2ef8:	89 83       	std	Y+1, r24	; 0x01
    2efa:	07 c0       	rjmp	.+14     	; 0x2f0a <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	80 5f       	subi	r24, 0xF0	; 240
    2f00:	89 83       	std	Y+1, r24	; 0x01
    2f02:	03 c0       	rjmp	.+6      	; 0x2f0a <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    2f04:	8b 81       	ldd	r24, Y+3	; 0x03
    2f06:	80 5b       	subi	r24, 0xB0	; 176
    2f08:	89 83       	std	Y+1, r24	; 0x01
	 * here the largest address is 0x5F so the MSB is always 0
	 * in this LCD from the data sheet I must put the MSB 1
	 * so I will OR the address value from the switch with 0x80
	 * here I set the cursor to the first row first col ORed with the address I got
	 */
	LCD_SendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2f0a:	89 81       	ldd	r24, Y+1	; 0x01
    2f0c:	80 68       	ori	r24, 0x80	; 128
    2f0e:	0e 94 b9 12 	call	0x2572	; 0x2572 <LCD_SendCommand>
}
    2f12:	0f 90       	pop	r0
    2f14:	0f 90       	pop	r0
    2f16:	0f 90       	pop	r0
    2f18:	0f 90       	pop	r0
    2f1a:	0f 90       	pop	r0
    2f1c:	cf 91       	pop	r28
    2f1e:	df 91       	pop	r29
    2f20:	08 95       	ret

00002f22 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2f22:	df 93       	push	r29
    2f24:	cf 93       	push	r28
    2f26:	00 d0       	rcall	.+0      	; 0x2f28 <LCD_displayStringRowColumn+0x6>
    2f28:	00 d0       	rcall	.+0      	; 0x2f2a <LCD_displayStringRowColumn+0x8>
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	89 83       	std	Y+1, r24	; 0x01
    2f30:	6a 83       	std	Y+2, r22	; 0x02
    2f32:	5c 83       	std	Y+4, r21	; 0x04
    2f34:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	6a 81       	ldd	r22, Y+2	; 0x02
    2f3a:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <LCD_moveCursor>
	LCD_string_Display(Str);
    2f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f40:	9c 81       	ldd	r25, Y+4	; 0x04
    2f42:	0e 94 33 17 	call	0x2e66	; 0x2e66 <LCD_string_Display>
}
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
    2f5c:	62 97       	sbiw	r28, 0x12	; 18
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	f8 94       	cli
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	0f be       	out	0x3f, r0	; 63
    2f66:	cd bf       	out	0x3d, r28	; 61
    2f68:	9a 8b       	std	Y+18, r25	; 0x12
    2f6a:	89 8b       	std	Y+17, r24	; 0x11
	   char buff[16]; /* String to hold the ASCII result */
	   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2f6c:	89 89       	ldd	r24, Y+17	; 0x11
    2f6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f70:	9e 01       	movw	r18, r28
    2f72:	2f 5f       	subi	r18, 0xFF	; 255
    2f74:	3f 4f       	sbci	r19, 0xFF	; 255
    2f76:	b9 01       	movw	r22, r18
    2f78:	4a e0       	ldi	r20, 0x0A	; 10
    2f7a:	50 e0       	ldi	r21, 0x00	; 0
    2f7c:	0e 94 01 1a 	call	0x3402	; 0x3402 <itoa>
	   LCD_string_Display(buff); /* Display the string */
    2f80:	ce 01       	movw	r24, r28
    2f82:	01 96       	adiw	r24, 0x01	; 1
    2f84:	0e 94 33 17 	call	0x2e66	; 0x2e66 <LCD_string_Display>
}
    2f88:	62 96       	adiw	r28, 0x12	; 18
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	f8 94       	cli
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	08 95       	ret

00002f9a <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_CLEAR_COMMAND);
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	0e 94 b9 12 	call	0x2572	; 0x2572 <LCD_SendCommand>
}
    2fa8:	cf 91       	pop	r28
    2faa:	df 91       	pop	r29
    2fac:	08 95       	ret

00002fae <__vector_7>:
/*******************************************************************************
 * 				ISR
 *******************************************************************************/

ISR (TIMER1_COMPA_vect)
{
    2fae:	1f 92       	push	r1
    2fb0:	0f 92       	push	r0
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	0f 92       	push	r0
    2fb6:	11 24       	eor	r1, r1
    2fb8:	2f 93       	push	r18
    2fba:	3f 93       	push	r19
    2fbc:	4f 93       	push	r20
    2fbe:	5f 93       	push	r21
    2fc0:	6f 93       	push	r22
    2fc2:	7f 93       	push	r23
    2fc4:	8f 93       	push	r24
    2fc6:	9f 93       	push	r25
    2fc8:	af 93       	push	r26
    2fca:	bf 93       	push	r27
    2fcc:	ef 93       	push	r30
    2fce:	ff 93       	push	r31
    2fd0:	df 93       	push	r29
    2fd2:	cf 93       	push	r28
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2fd8:	80 91 f6 00 	lds	r24, 0x00F6
    2fdc:	90 91 f7 00 	lds	r25, 0x00F7
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	29 f0       	breq	.+10     	; 0x2fee <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2fe4:	e0 91 f6 00 	lds	r30, 0x00F6
    2fe8:	f0 91 f7 00 	lds	r31, 0x00F7
    2fec:	09 95       	icall
	}
}
    2fee:	cf 91       	pop	r28
    2ff0:	df 91       	pop	r29
    2ff2:	ff 91       	pop	r31
    2ff4:	ef 91       	pop	r30
    2ff6:	bf 91       	pop	r27
    2ff8:	af 91       	pop	r26
    2ffa:	9f 91       	pop	r25
    2ffc:	8f 91       	pop	r24
    2ffe:	7f 91       	pop	r23
    3000:	6f 91       	pop	r22
    3002:	5f 91       	pop	r21
    3004:	4f 91       	pop	r20
    3006:	3f 91       	pop	r19
    3008:	2f 91       	pop	r18
    300a:	0f 90       	pop	r0
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	0f 90       	pop	r0
    3010:	1f 90       	pop	r1
    3012:	18 95       	reti

00003014 <__vector_9>:

ISR (TIMER1_OVF_vect)
{
    3014:	1f 92       	push	r1
    3016:	0f 92       	push	r0
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	0f 92       	push	r0
    301c:	11 24       	eor	r1, r1
    301e:	2f 93       	push	r18
    3020:	3f 93       	push	r19
    3022:	4f 93       	push	r20
    3024:	5f 93       	push	r21
    3026:	6f 93       	push	r22
    3028:	7f 93       	push	r23
    302a:	8f 93       	push	r24
    302c:	9f 93       	push	r25
    302e:	af 93       	push	r26
    3030:	bf 93       	push	r27
    3032:	ef 93       	push	r30
    3034:	ff 93       	push	r31
    3036:	df 93       	push	r29
    3038:	cf 93       	push	r28
    303a:	cd b7       	in	r28, 0x3d	; 61
    303c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    303e:	80 91 f6 00 	lds	r24, 0x00F6
    3042:	90 91 f7 00 	lds	r25, 0x00F7
    3046:	00 97       	sbiw	r24, 0x00	; 0
    3048:	29 f0       	breq	.+10     	; 0x3054 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    304a:	e0 91 f6 00 	lds	r30, 0x00F6
    304e:	f0 91 f7 00 	lds	r31, 0x00F7
    3052:	09 95       	icall
	}
}
    3054:	cf 91       	pop	r28
    3056:	df 91       	pop	r29
    3058:	ff 91       	pop	r31
    305a:	ef 91       	pop	r30
    305c:	bf 91       	pop	r27
    305e:	af 91       	pop	r26
    3060:	9f 91       	pop	r25
    3062:	8f 91       	pop	r24
    3064:	7f 91       	pop	r23
    3066:	6f 91       	pop	r22
    3068:	5f 91       	pop	r21
    306a:	4f 91       	pop	r20
    306c:	3f 91       	pop	r19
    306e:	2f 91       	pop	r18
    3070:	0f 90       	pop	r0
    3072:	0f be       	out	0x3f, r0	; 63
    3074:	0f 90       	pop	r0
    3076:	1f 90       	pop	r1
    3078:	18 95       	reti

0000307a <Timer1_init>:
/*******************************************************************************
 * 				Function definitions
 *******************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    307a:	df 93       	push	r29
    307c:	cf 93       	push	r28
    307e:	00 d0       	rcall	.+0      	; 0x3080 <Timer1_init+0x6>
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	9a 83       	std	Y+2, r25	; 0x02
    3086:	89 83       	std	Y+1, r24	; 0x01

	/* non-pwm */
	TCCR1A = (1<<FOC1A);
    3088:	ef e4       	ldi	r30, 0x4F	; 79
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	88 e0       	ldi	r24, 0x08	; 8
    308e:	80 83       	st	Z, r24

	/* choose mode
	 * mode = 0 if normal
	 * mode = 0b00001000 if compare  */

	TCCR1B  = Config_Ptr->mode ;
    3090:	ae e4       	ldi	r26, 0x4E	; 78
    3092:	b0 e0       	ldi	r27, 0x00	; 0
    3094:	e9 81       	ldd	r30, Y+1	; 0x01
    3096:	fa 81       	ldd	r31, Y+2	; 0x02
    3098:	85 81       	ldd	r24, Z+5	; 0x05
    309a:	8c 93       	st	X, r24

	/*initial value */
	TCNT1 = Config_Ptr->initial_value ;
    309c:	ac e4       	ldi	r26, 0x4C	; 76
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	e9 81       	ldd	r30, Y+1	; 0x01
    30a2:	fa 81       	ldd	r31, Y+2	; 0x02
    30a4:	80 81       	ld	r24, Z
    30a6:	91 81       	ldd	r25, Z+1	; 0x01
    30a8:	11 96       	adiw	r26, 0x01	; 1
    30aa:	9c 93       	st	X, r25
    30ac:	8e 93       	st	-X, r24


	if (Config_Ptr->mode == Compare)
    30ae:	e9 81       	ldd	r30, Y+1	; 0x01
    30b0:	fa 81       	ldd	r31, Y+2	; 0x02
    30b2:	85 81       	ldd	r24, Z+5	; 0x05
    30b4:	88 30       	cpi	r24, 0x08	; 8
    30b6:	89 f4       	brne	.+34     	; 0x30da <Timer1_init+0x60>
	{
		/* compare value in compare mode */
		OCR1A = Config_Ptr->compare_value ;
    30b8:	aa e4       	ldi	r26, 0x4A	; 74
    30ba:	b0 e0       	ldi	r27, 0x00	; 0
    30bc:	e9 81       	ldd	r30, Y+1	; 0x01
    30be:	fa 81       	ldd	r31, Y+2	; 0x02
    30c0:	82 81       	ldd	r24, Z+2	; 0x02
    30c2:	93 81       	ldd	r25, Z+3	; 0x03
    30c4:	11 96       	adiw	r26, 0x01	; 1
    30c6:	9c 93       	st	X, r25
    30c8:	8e 93       	st	-X, r24

		/* enable timer1 compare A interrupt */
		TIMSK |= (1<<OCIE1A);
    30ca:	a9 e5       	ldi	r26, 0x59	; 89
    30cc:	b0 e0       	ldi	r27, 0x00	; 0
    30ce:	e9 e5       	ldi	r30, 0x59	; 89
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	80 81       	ld	r24, Z
    30d4:	80 61       	ori	r24, 0x10	; 16
    30d6:	8c 93       	st	X, r24
    30d8:	0c c0       	rjmp	.+24     	; 0x30f2 <Timer1_init+0x78>
	}
	else if (Config_Ptr->mode == Normal)
    30da:	e9 81       	ldd	r30, Y+1	; 0x01
    30dc:	fa 81       	ldd	r31, Y+2	; 0x02
    30de:	85 81       	ldd	r24, Z+5	; 0x05
    30e0:	88 23       	and	r24, r24
    30e2:	39 f4       	brne	.+14     	; 0x30f2 <Timer1_init+0x78>
	{
		/* enable timer 1 overflow interrupt */
		TIMSK |= (1<<TOIE1);
    30e4:	a9 e5       	ldi	r26, 0x59	; 89
    30e6:	b0 e0       	ldi	r27, 0x00	; 0
    30e8:	e9 e5       	ldi	r30, 0x59	; 89
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	84 60       	ori	r24, 0x04	; 4
    30f0:	8c 93       	st	X, r24
	}

	/* set the clock prescaler */
	TCCR1B |= Config_Ptr->prescaler ;
    30f2:	ae e4       	ldi	r26, 0x4E	; 78
    30f4:	b0 e0       	ldi	r27, 0x00	; 0
    30f6:	ee e4       	ldi	r30, 0x4E	; 78
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	90 81       	ld	r25, Z
    30fc:	e9 81       	ldd	r30, Y+1	; 0x01
    30fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3100:	84 81       	ldd	r24, Z+4	; 0x04
    3102:	89 2b       	or	r24, r25
    3104:	8c 93       	st	X, r24
}
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	cf 91       	pop	r28
    310c:	df 91       	pop	r29
    310e:	08 95       	ret

00003110 <Timer1_deInit>:

void Timer1_deInit(void)
{
    3110:	df 93       	push	r29
    3112:	cf 93       	push	r28
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
 /*
  * set the registers to zero
  */
	TCCR1A=0;
    3118:	ef e4       	ldi	r30, 0x4F	; 79
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	10 82       	st	Z, r1
	TCCR1B=0;
    311e:	ee e4       	ldi	r30, 0x4E	; 78
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	10 82       	st	Z, r1
	TCNT1=0;
    3124:	ec e4       	ldi	r30, 0x4C	; 76
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	11 82       	std	Z+1, r1	; 0x01
    312a:	10 82       	st	Z, r1
	OCR1A=0;
    312c:	ea e4       	ldi	r30, 0x4A	; 74
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	11 82       	std	Z+1, r1	; 0x01
    3132:	10 82       	st	Z, r1
}
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	00 d0       	rcall	.+0      	; 0x3140 <Timer1_setCallBack+0x6>
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
    3144:	9a 83       	std	Y+2, r25	; 0x02
    3146:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	9a 81       	ldd	r25, Y+2	; 0x02
    314c:	90 93 f7 00 	sts	0x00F7, r25
    3150:	80 93 f6 00 	sts	0x00F6, r24
}
    3154:	0f 90       	pop	r0
    3156:	0f 90       	pop	r0
    3158:	cf 91       	pop	r28
    315a:	df 91       	pop	r29
    315c:	08 95       	ret

0000315e <UART_init>:
#include "common_macros.h"



void UART_init(USART_INITIALIZATION * data_init)
{
    315e:	df 93       	push	r29
    3160:	cf 93       	push	r28
    3162:	00 d0       	rcall	.+0      	; 0x3164 <UART_init+0x6>
    3164:	00 d0       	rcall	.+0      	; 0x3166 <UART_init+0x8>
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
    316a:	9c 83       	std	Y+4, r25	; 0x04
    316c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    316e:	1a 82       	std	Y+2, r1	; 0x02
    3170:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * For register UCSRA
	 * Bit 1 – U2X: Double the USART Transmission Speed
	 * set this bit
	 */
	UCSRA = (1<<U2X);
    3172:	eb e2       	ldi	r30, 0x2B	; 43
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	82 e0       	ldi	r24, 0x02	; 2
    3178:	80 83       	st	Z, r24
	 * we will send by polling , receive by interrupts
	 * so we will set the RX Complete interrupt
	 * Bit 4 – RXEN: Receiver Enable (SET)
	 * Bit 3 – TXEN: Transmitter Enable (SET)
	 */
	UCSRB = (1<<RXEN) | (1<<TXEN);
    317a:	ea e2       	ldi	r30, 0x2A	; 42
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	88 e1       	ldi	r24, 0x18	; 24
    3180:	80 83       	st	Z, r24

	/*
	 * For register UCSRC
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 */
	UCSRC = (1<<URSEL);
    3182:	e0 e4       	ldi	r30, 0x40	; 64
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 e8       	ldi	r24, 0x80	; 128
    3188:	80 83       	st	Z, r24
	/*
	 * for the parity bits
	 * Bit 5:4 – UPM1:0: Parity Mode
	 * we will choose depending on the config_data we got
	 */
	UCSRC |= data_init->parity;
    318a:	a0 e4       	ldi	r26, 0x40	; 64
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	e0 e4       	ldi	r30, 0x40	; 64
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	90 81       	ld	r25, Z
    3194:	eb 81       	ldd	r30, Y+3	; 0x03
    3196:	fc 81       	ldd	r31, Y+4	; 0x04
    3198:	80 81       	ld	r24, Z
    319a:	89 2b       	or	r24, r25
    319c:	8c 93       	st	X, r24
	/*
	 * for the stop bit select
	 * Bit 3 – USBS: Stop Bit Select
	 * we will choose depending on the config_data we got
	 */
	UCSRC |= data_init->stop_bits;
    319e:	a0 e4       	ldi	r26, 0x40	; 64
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	e0 e4       	ldi	r30, 0x40	; 64
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	90 81       	ld	r25, Z
    31a8:	eb 81       	ldd	r30, Y+3	; 0x03
    31aa:	fc 81       	ldd	r31, Y+4	; 0x04
    31ac:	81 81       	ldd	r24, Z+1	; 0x01
    31ae:	89 2b       	or	r24, r25
    31b0:	8c 93       	st	X, r24
	/*
	 * for the character size (number of bits per frame)
	 * Bit 2:1 – UCSZ1:0: Character Size
	 * we will choose depending on the config_data we got
	 */
	UCSRC |= data_init->num_bits;
    31b2:	a0 e4       	ldi	r26, 0x40	; 64
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	e0 e4       	ldi	r30, 0x40	; 64
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	90 81       	ld	r25, Z
    31bc:	eb 81       	ldd	r30, Y+3	; 0x03
    31be:	fc 81       	ldd	r31, Y+4	; 0x04
    31c0:	82 81       	ldd	r24, Z+2	; 0x02
    31c2:	89 2b       	or	r24, r25
    31c4:	8c 93       	st	X, r24



	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (data_init->baud_rate * 8UL))) - 1);
    31c6:	eb 81       	ldd	r30, Y+3	; 0x03
    31c8:	fc 81       	ldd	r31, Y+4	; 0x04
    31ca:	83 81       	ldd	r24, Z+3	; 0x03
    31cc:	94 81       	ldd	r25, Z+4	; 0x04
    31ce:	a5 81       	ldd	r26, Z+5	; 0x05
    31d0:	b6 81       	ldd	r27, Z+6	; 0x06
    31d2:	88 0f       	add	r24, r24
    31d4:	99 1f       	adc	r25, r25
    31d6:	aa 1f       	adc	r26, r26
    31d8:	bb 1f       	adc	r27, r27
    31da:	88 0f       	add	r24, r24
    31dc:	99 1f       	adc	r25, r25
    31de:	aa 1f       	adc	r26, r26
    31e0:	bb 1f       	adc	r27, r27
    31e2:	88 0f       	add	r24, r24
    31e4:	99 1f       	adc	r25, r25
    31e6:	aa 1f       	adc	r26, r26
    31e8:	bb 1f       	adc	r27, r27
    31ea:	9c 01       	movw	r18, r24
    31ec:	ad 01       	movw	r20, r26
    31ee:	80 e4       	ldi	r24, 0x40	; 64
    31f0:	92 e4       	ldi	r25, 0x42	; 66
    31f2:	af e0       	ldi	r26, 0x0F	; 15
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	bc 01       	movw	r22, r24
    31f8:	cd 01       	movw	r24, r26
    31fa:	0e 94 a8 19 	call	0x3350	; 0x3350 <__udivmodsi4>
    31fe:	da 01       	movw	r26, r20
    3200:	c9 01       	movw	r24, r18
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	9a 83       	std	Y+2, r25	; 0x02
    3206:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3208:	e0 e4       	ldi	r30, 0x40	; 64
    320a:	f0 e0       	ldi	r31, 0x00	; 0
    320c:	89 81       	ldd	r24, Y+1	; 0x01
    320e:	9a 81       	ldd	r25, Y+2	; 0x02
    3210:	89 2f       	mov	r24, r25
    3212:	99 27       	eor	r25, r25
    3214:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3216:	e9 e2       	ldi	r30, 0x29	; 41
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	80 83       	st	Z, r24

}
    321e:	0f 90       	pop	r0
    3220:	0f 90       	pop	r0
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	cf 91       	pop	r28
    3228:	df 91       	pop	r29
    322a:	08 95       	ret

0000322c <UART_sendByte>:


void UART_sendByte(const uint8 data)
{
    322c:	df 93       	push	r29
    322e:	cf 93       	push	r28
    3230:	0f 92       	push	r0
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE))
    3238:	eb e2       	ldi	r30, 0x2B	; 43
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	80 81       	ld	r24, Z
    323e:	88 2f       	mov	r24, r24
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	80 72       	andi	r24, 0x20	; 32
    3244:	90 70       	andi	r25, 0x00	; 0
    3246:	00 97       	sbiw	r24, 0x00	; 0
    3248:	b9 f3       	breq	.-18     	; 0x3238 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    324a:	ec e2       	ldi	r30, 0x2C	; 44
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	80 83       	st	Z, r24

}
    3252:	0f 90       	pop	r0
    3254:	cf 91       	pop	r28
    3256:	df 91       	pop	r29
    3258:	08 95       	ret

0000325a <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    325a:	df 93       	push	r29
    325c:	cf 93       	push	r28
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC))
    3262:	eb e2       	ldi	r30, 0x2B	; 43
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	88 23       	and	r24, r24
    326a:	dc f7       	brge	.-10     	; 0x3262 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    326c:	ec e2       	ldi	r30, 0x2C	; 44
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
}
    3272:	cf 91       	pop	r28
    3274:	df 91       	pop	r29
    3276:	08 95       	ret

00003278 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    3278:	df 93       	push	r29
    327a:	cf 93       	push	r28
    327c:	00 d0       	rcall	.+0      	; 0x327e <UART_sendString+0x6>
    327e:	0f 92       	push	r0
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
    3284:	9b 83       	std	Y+3, r25	; 0x03
    3286:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3288:	19 82       	std	Y+1, r1	; 0x01
    328a:	0e c0       	rjmp	.+28     	; 0x32a8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    328c:	89 81       	ldd	r24, Y+1	; 0x01
    328e:	28 2f       	mov	r18, r24
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	8a 81       	ldd	r24, Y+2	; 0x02
    3294:	9b 81       	ldd	r25, Y+3	; 0x03
    3296:	fc 01       	movw	r30, r24
    3298:	e2 0f       	add	r30, r18
    329a:	f3 1f       	adc	r31, r19
    329c:	80 81       	ld	r24, Z
    329e:	0e 94 16 19 	call	0x322c	; 0x322c <UART_sendByte>
		i++;
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	8f 5f       	subi	r24, 0xFF	; 255
    32a6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	28 2f       	mov	r18, r24
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	8a 81       	ldd	r24, Y+2	; 0x02
    32b0:	9b 81       	ldd	r25, Y+3	; 0x03
    32b2:	fc 01       	movw	r30, r24
    32b4:	e2 0f       	add	r30, r18
    32b6:	f3 1f       	adc	r31, r19
    32b8:	80 81       	ld	r24, Z
    32ba:	88 23       	and	r24, r24
    32bc:	39 f7       	brne	.-50     	; 0x328c <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	cf 91       	pop	r28
    32c6:	df 91       	pop	r29
    32c8:	08 95       	ret

000032ca <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    32ca:	0f 93       	push	r16
    32cc:	1f 93       	push	r17
    32ce:	df 93       	push	r29
    32d0:	cf 93       	push	r28
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <UART_receiveString+0xa>
    32d4:	0f 92       	push	r0
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	9b 83       	std	Y+3, r25	; 0x03
    32dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32de:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	28 2f       	mov	r18, r24
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	8a 81       	ldd	r24, Y+2	; 0x02
    32e8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ea:	8c 01       	movw	r16, r24
    32ec:	02 0f       	add	r16, r18
    32ee:	13 1f       	adc	r17, r19
    32f0:	0e 94 2d 19 	call	0x325a	; 0x325a <UART_recieveByte>
    32f4:	f8 01       	movw	r30, r16
    32f6:	80 83       	st	Z, r24
    32f8:	0f c0       	rjmp	.+30     	; 0x3318 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
    32fc:	8f 5f       	subi	r24, 0xFF	; 255
    32fe:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3300:	89 81       	ldd	r24, Y+1	; 0x01
    3302:	28 2f       	mov	r18, r24
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	8a 81       	ldd	r24, Y+2	; 0x02
    3308:	9b 81       	ldd	r25, Y+3	; 0x03
    330a:	8c 01       	movw	r16, r24
    330c:	02 0f       	add	r16, r18
    330e:	13 1f       	adc	r17, r19
    3310:	0e 94 2d 19 	call	0x325a	; 0x325a <UART_recieveByte>
    3314:	f8 01       	movw	r30, r16
    3316:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	28 2f       	mov	r18, r24
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	8a 81       	ldd	r24, Y+2	; 0x02
    3320:	9b 81       	ldd	r25, Y+3	; 0x03
    3322:	fc 01       	movw	r30, r24
    3324:	e2 0f       	add	r30, r18
    3326:	f3 1f       	adc	r31, r19
    3328:	80 81       	ld	r24, Z
    332a:	83 32       	cpi	r24, 0x23	; 35
    332c:	31 f7       	brne	.-52     	; 0x32fa <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    332e:	89 81       	ldd	r24, Y+1	; 0x01
    3330:	28 2f       	mov	r18, r24
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	8a 81       	ldd	r24, Y+2	; 0x02
    3336:	9b 81       	ldd	r25, Y+3	; 0x03
    3338:	fc 01       	movw	r30, r24
    333a:	e2 0f       	add	r30, r18
    333c:	f3 1f       	adc	r31, r19
    333e:	10 82       	st	Z, r1
}
    3340:	0f 90       	pop	r0
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	cf 91       	pop	r28
    3348:	df 91       	pop	r29
    334a:	1f 91       	pop	r17
    334c:	0f 91       	pop	r16
    334e:	08 95       	ret

00003350 <__udivmodsi4>:
    3350:	a1 e2       	ldi	r26, 0x21	; 33
    3352:	1a 2e       	mov	r1, r26
    3354:	aa 1b       	sub	r26, r26
    3356:	bb 1b       	sub	r27, r27
    3358:	fd 01       	movw	r30, r26
    335a:	0d c0       	rjmp	.+26     	; 0x3376 <__udivmodsi4_ep>

0000335c <__udivmodsi4_loop>:
    335c:	aa 1f       	adc	r26, r26
    335e:	bb 1f       	adc	r27, r27
    3360:	ee 1f       	adc	r30, r30
    3362:	ff 1f       	adc	r31, r31
    3364:	a2 17       	cp	r26, r18
    3366:	b3 07       	cpc	r27, r19
    3368:	e4 07       	cpc	r30, r20
    336a:	f5 07       	cpc	r31, r21
    336c:	20 f0       	brcs	.+8      	; 0x3376 <__udivmodsi4_ep>
    336e:	a2 1b       	sub	r26, r18
    3370:	b3 0b       	sbc	r27, r19
    3372:	e4 0b       	sbc	r30, r20
    3374:	f5 0b       	sbc	r31, r21

00003376 <__udivmodsi4_ep>:
    3376:	66 1f       	adc	r22, r22
    3378:	77 1f       	adc	r23, r23
    337a:	88 1f       	adc	r24, r24
    337c:	99 1f       	adc	r25, r25
    337e:	1a 94       	dec	r1
    3380:	69 f7       	brne	.-38     	; 0x335c <__udivmodsi4_loop>
    3382:	60 95       	com	r22
    3384:	70 95       	com	r23
    3386:	80 95       	com	r24
    3388:	90 95       	com	r25
    338a:	9b 01       	movw	r18, r22
    338c:	ac 01       	movw	r20, r24
    338e:	bd 01       	movw	r22, r26
    3390:	cf 01       	movw	r24, r30
    3392:	08 95       	ret

00003394 <__prologue_saves__>:
    3394:	2f 92       	push	r2
    3396:	3f 92       	push	r3
    3398:	4f 92       	push	r4
    339a:	5f 92       	push	r5
    339c:	6f 92       	push	r6
    339e:	7f 92       	push	r7
    33a0:	8f 92       	push	r8
    33a2:	9f 92       	push	r9
    33a4:	af 92       	push	r10
    33a6:	bf 92       	push	r11
    33a8:	cf 92       	push	r12
    33aa:	df 92       	push	r13
    33ac:	ef 92       	push	r14
    33ae:	ff 92       	push	r15
    33b0:	0f 93       	push	r16
    33b2:	1f 93       	push	r17
    33b4:	cf 93       	push	r28
    33b6:	df 93       	push	r29
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
    33bc:	ca 1b       	sub	r28, r26
    33be:	db 0b       	sbc	r29, r27
    33c0:	0f b6       	in	r0, 0x3f	; 63
    33c2:	f8 94       	cli
    33c4:	de bf       	out	0x3e, r29	; 62
    33c6:	0f be       	out	0x3f, r0	; 63
    33c8:	cd bf       	out	0x3d, r28	; 61
    33ca:	09 94       	ijmp

000033cc <__epilogue_restores__>:
    33cc:	2a 88       	ldd	r2, Y+18	; 0x12
    33ce:	39 88       	ldd	r3, Y+17	; 0x11
    33d0:	48 88       	ldd	r4, Y+16	; 0x10
    33d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    33d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    33d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    33d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    33da:	9b 84       	ldd	r9, Y+11	; 0x0b
    33dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    33de:	b9 84       	ldd	r11, Y+9	; 0x09
    33e0:	c8 84       	ldd	r12, Y+8	; 0x08
    33e2:	df 80       	ldd	r13, Y+7	; 0x07
    33e4:	ee 80       	ldd	r14, Y+6	; 0x06
    33e6:	fd 80       	ldd	r15, Y+5	; 0x05
    33e8:	0c 81       	ldd	r16, Y+4	; 0x04
    33ea:	1b 81       	ldd	r17, Y+3	; 0x03
    33ec:	aa 81       	ldd	r26, Y+2	; 0x02
    33ee:	b9 81       	ldd	r27, Y+1	; 0x01
    33f0:	ce 0f       	add	r28, r30
    33f2:	d1 1d       	adc	r29, r1
    33f4:	0f b6       	in	r0, 0x3f	; 63
    33f6:	f8 94       	cli
    33f8:	de bf       	out	0x3e, r29	; 62
    33fa:	0f be       	out	0x3f, r0	; 63
    33fc:	cd bf       	out	0x3d, r28	; 61
    33fe:	ed 01       	movw	r28, r26
    3400:	08 95       	ret

00003402 <itoa>:
    3402:	fb 01       	movw	r30, r22
    3404:	9f 01       	movw	r18, r30
    3406:	e8 94       	clt
    3408:	42 30       	cpi	r20, 0x02	; 2
    340a:	c4 f0       	brlt	.+48     	; 0x343c <itoa+0x3a>
    340c:	45 32       	cpi	r20, 0x25	; 37
    340e:	b4 f4       	brge	.+44     	; 0x343c <itoa+0x3a>
    3410:	4a 30       	cpi	r20, 0x0A	; 10
    3412:	29 f4       	brne	.+10     	; 0x341e <itoa+0x1c>
    3414:	97 fb       	bst	r25, 7
    3416:	1e f4       	brtc	.+6      	; 0x341e <itoa+0x1c>
    3418:	90 95       	com	r25
    341a:	81 95       	neg	r24
    341c:	9f 4f       	sbci	r25, 0xFF	; 255
    341e:	64 2f       	mov	r22, r20
    3420:	77 27       	eor	r23, r23
    3422:	0e 94 32 1a 	call	0x3464	; 0x3464 <__udivmodhi4>
    3426:	80 5d       	subi	r24, 0xD0	; 208
    3428:	8a 33       	cpi	r24, 0x3A	; 58
    342a:	0c f0       	brlt	.+2      	; 0x342e <itoa+0x2c>
    342c:	89 5d       	subi	r24, 0xD9	; 217
    342e:	81 93       	st	Z+, r24
    3430:	cb 01       	movw	r24, r22
    3432:	00 97       	sbiw	r24, 0x00	; 0
    3434:	a1 f7       	brne	.-24     	; 0x341e <itoa+0x1c>
    3436:	16 f4       	brtc	.+4      	; 0x343c <itoa+0x3a>
    3438:	5d e2       	ldi	r21, 0x2D	; 45
    343a:	51 93       	st	Z+, r21
    343c:	10 82       	st	Z, r1
    343e:	c9 01       	movw	r24, r18
    3440:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <strrev>

00003444 <strrev>:
    3444:	dc 01       	movw	r26, r24
    3446:	fc 01       	movw	r30, r24
    3448:	67 2f       	mov	r22, r23
    344a:	71 91       	ld	r23, Z+
    344c:	77 23       	and	r23, r23
    344e:	e1 f7       	brne	.-8      	; 0x3448 <strrev+0x4>
    3450:	32 97       	sbiw	r30, 0x02	; 2
    3452:	04 c0       	rjmp	.+8      	; 0x345c <strrev+0x18>
    3454:	7c 91       	ld	r23, X
    3456:	6d 93       	st	X+, r22
    3458:	70 83       	st	Z, r23
    345a:	62 91       	ld	r22, -Z
    345c:	ae 17       	cp	r26, r30
    345e:	bf 07       	cpc	r27, r31
    3460:	c8 f3       	brcs	.-14     	; 0x3454 <strrev+0x10>
    3462:	08 95       	ret

00003464 <__udivmodhi4>:
    3464:	aa 1b       	sub	r26, r26
    3466:	bb 1b       	sub	r27, r27
    3468:	51 e1       	ldi	r21, 0x11	; 17
    346a:	07 c0       	rjmp	.+14     	; 0x347a <__udivmodhi4_ep>

0000346c <__udivmodhi4_loop>:
    346c:	aa 1f       	adc	r26, r26
    346e:	bb 1f       	adc	r27, r27
    3470:	a6 17       	cp	r26, r22
    3472:	b7 07       	cpc	r27, r23
    3474:	10 f0       	brcs	.+4      	; 0x347a <__udivmodhi4_ep>
    3476:	a6 1b       	sub	r26, r22
    3478:	b7 0b       	sbc	r27, r23

0000347a <__udivmodhi4_ep>:
    347a:	88 1f       	adc	r24, r24
    347c:	99 1f       	adc	r25, r25
    347e:	5a 95       	dec	r21
    3480:	a9 f7       	brne	.-22     	; 0x346c <__udivmodhi4_loop>
    3482:	80 95       	com	r24
    3484:	90 95       	com	r25
    3486:	bc 01       	movw	r22, r24
    3488:	cd 01       	movw	r24, r26
    348a:	08 95       	ret

0000348c <_exit>:
    348c:	f8 94       	cli

0000348e <__stop_program>:
    348e:	ff cf       	rjmp	.-2      	; 0x348e <__stop_program>
