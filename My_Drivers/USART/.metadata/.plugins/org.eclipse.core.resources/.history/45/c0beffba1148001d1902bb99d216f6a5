/*
 * usart.c
 *
 *  Created on: 9 Oct 2022
 *      Author: hp
 */

#include "usart.h"
#include "gpio.h"
#include <avr/io.h>
#include "common_macros.h"



void UART_init(USART_INITIALIZATION * data_init)
{
	uint16 ubrr_value = 0;

	/*
	 * For register UCSRA
	 * Bit 1 – U2X: Double the USART Transmission Speed
	 * set this bit
	 */
	UCSRA = (1<<U2X);
	/*
	 * For register UCSRB
	 * we will send by polling , receive by interrupts
	 * so we will set the RX Complete interrupt
	 * Bit 7 – RXCIE: RX Complete Interrupt Enable
	 */
	UCSRB = (1<<RXCIE);

	/*
	 * Bit 4 – RXEN: Receiver Enable (SET)
	 * Bit 3 – TXEN: Transmitter Enable (SET)
	 */
	SET_BIT(UCSRB,RXEN);
	SET_BIT(UCSRB,TXEN);

	/*
	 * For register UCSRC
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 */
	UCSRC = (1<<URSEL);
	/*
	 * for the parity bits
	 * Bit 5:4 – UPM1:0: Parity Mode
	 * we will choose depending on the config_data we got
	 */
	UCSRC |= data_init->parity;

	/*
	 * for the stop bit select
	 * Bit 3 – USBS: Stop Bit Select
	 * we will choose depending on the config_data we got
	 */
	UCSRC |= data_init->stop_bits;

	/*
	 * for the character size (number of bits per frame)
	 * Bit 2:1 – UCSZ1:0: Character Size
	 * we will choose depending on the config_data we got
	 */
	UCSRC |= data_init->num_bits;

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (data_init->baud_rate * 8UL))) - 1);

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
	UBRRL = ubrr_value;

}


void UART_sendByte(const uint8 data)
{
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE))
	{
		/* wait until the flag is raised */
	}

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;

}

uint8 UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC))
	{
		/* wait until received */
	}

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
		i++;
	}
}

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
}
