
test_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000028a0  00002914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001d28  00000000  00000000  00002930  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e20  00000000  00000000  00004658  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005478  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000055b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007371  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000825c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000900c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000916c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000093f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009bc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 8c 13 	call	0x2718	; 0x2718 <main>
      7a:	0c 94 4e 14 	jmp	0x289c	; 0x289c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e7       	ldi	r26, 0x70	; 112
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e7       	ldi	r24, 0x70	; 112
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_init>:
#include <avr/io.h>
#include "std_types.h"
#include "adc.h"

void ADC_init (ADC_Initialization *data)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <ADC_init+0x6>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	9a 83       	std	Y+2, r25	; 0x02
     b42:	89 83       	std	Y+1, r24	; 0x01
	 *
	 * Bits 4:0 – MUX4:0: Analog Channel and Gain Selection Bits
	 * choose 0000 as initialization
	 * so all bits are zeros except the first 2 bits
	 */
	ADMUX = data->volt;
     b44:	a7 e2       	ldi	r26, 0x27	; 39
     b46:	b0 e0       	ldi	r27, 0x00	; 0
     b48:	e9 81       	ldd	r30, Y+1	; 0x01
     b4a:	fa 81       	ldd	r31, Y+2	; 0x02
     b4c:	80 81       	ld	r24, Z
     b4e:	8c 93       	st	X, r24
	 * set the  Bits 2:0 – ADPS2:0: ADC Prescaler Select Bits
	 * first I will set the prescaler and let all other values =0
	 * then I will OR the register with the ENABLE
	 */

	ADCSRA = data->freq;
     b50:	a6 e2       	ldi	r26, 0x26	; 38
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	e9 81       	ldd	r30, Y+1	; 0x01
     b56:	fa 81       	ldd	r31, Y+2	; 0x02
     b58:	81 81       	ldd	r24, Z+1	; 0x01
     b5a:	8c 93       	st	X, r24
	ADCSRA |=(data->state << ADEN );
     b5c:	a6 e2       	ldi	r26, 0x26	; 38
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e6 e2       	ldi	r30, 0x26	; 38
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	28 2f       	mov	r18, r24
     b68:	e9 81       	ldd	r30, Y+1	; 0x01
     b6a:	fa 81       	ldd	r31, Y+2	; 0x02
     b6c:	82 81       	ldd	r24, Z+2	; 0x02
     b6e:	88 2f       	mov	r24, r24
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	96 95       	lsr	r25
     b74:	98 2f       	mov	r25, r24
     b76:	88 27       	eor	r24, r24
     b78:	97 95       	ror	r25
     b7a:	87 95       	ror	r24
     b7c:	82 2b       	or	r24, r18
     b7e:	8c 93       	st	X, r24
}
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <ADC_readChannel>:

uint16 ADC_readChannel(uint8 ch_num)
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	0f 92       	push	r0
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	89 83       	std	Y+1, r24	; 0x01
	 * make the last 5 bits =0 , leave first 3 unchanged (anded with 1)
	 * And the channel num with 0x07 to clear all its bits except the last 3 bits
	 * then OR the channel num i got with the register ADMUX
	 * */

	ADMUX = (ADMUX & 0xE0) | (ch_num & 0x07);
     b96:	a7 e2       	ldi	r26, 0x27	; 39
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e7 e2       	ldi	r30, 0x27	; 39
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	98 2f       	mov	r25, r24
     ba2:	90 7e       	andi	r25, 0xE0	; 224
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	87 70       	andi	r24, 0x07	; 7
     ba8:	89 2b       	or	r24, r25
     baa:	8c 93       	st	X, r24

	/* Bit 6 – ADSC: ADC Start Conversion */
	SET_BIT(ADCSRA,ADSC);
     bac:	a6 e2       	ldi	r26, 0x26	; 38
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e6 e2       	ldi	r30, 0x26	; 38
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	80 64       	ori	r24, 0x40	; 64
     bb8:	8c 93       	st	X, r24

	/* loop until end of conversion
	 * check • Bit 4 – ADIF: ADC Interrupt Flag is 0
	 * leave the loop when its HIGH */

	while (BIT_IS_CLEAR(ADCSRA,ADIF))
     bba:	e6 e2       	ldi	r30, 0x26	; 38
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	88 2f       	mov	r24, r24
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	80 71       	andi	r24, 0x10	; 16
     bc6:	90 70       	andi	r25, 0x00	; 0
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	b9 f3       	breq	.-18     	; 0xbba <ADC_readChannel+0x30>
	{
		/*wait for conversion */
	}

	/* Clear ADIF by write '1' to it :) */
	SET_BIT(ADCSRA,ADIF);
     bcc:	a6 e2       	ldi	r26, 0x26	; 38
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e6 e2       	ldi	r30, 0x26	; 38
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	80 61       	ori	r24, 0x10	; 16
     bd8:	8c 93       	st	X, r24

	return ADC;
     bda:	e4 e2       	ldi	r30, 0x24	; 36
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	91 81       	ldd	r25, Z+1	; 0x01

}
     be2:	0f 90       	pop	r0
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <ADC_DeInit>:
void ADC_DeInit()
{
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
	ADMUX=0;
     bf2:	e7 e2       	ldi	r30, 0x27	; 39
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	10 82       	st	Z, r1
	ADCSRA=0;
     bf8:	e6 e2       	ldi	r30, 0x26	; 38
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	10 82       	st	Z, r1
}
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	00 d0       	rcall	.+0      	; 0xc0a <GPIO_setupPinDirection+0x6>
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <GPIO_setupPinDirection+0x8>
     c0c:	0f 92       	push	r0
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	6a 83       	std	Y+2, r22	; 0x02
     c16:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	88 30       	cpi	r24, 0x08	; 8
     c1c:	08 f0       	brcs	.+2      	; 0xc20 <GPIO_setupPinDirection+0x1c>
     c1e:	d5 c0       	rjmp	.+426    	; 0xdca <GPIO_setupPinDirection+0x1c6>
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	84 30       	cpi	r24, 0x04	; 4
     c24:	08 f0       	brcs	.+2      	; 0xc28 <GPIO_setupPinDirection+0x24>
     c26:	d1 c0       	rjmp	.+418    	; 0xdca <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	3d 83       	std	Y+5, r19	; 0x05
     c30:	2c 83       	std	Y+4, r18	; 0x04
     c32:	8c 81       	ldd	r24, Y+4	; 0x04
     c34:	9d 81       	ldd	r25, Y+5	; 0x05
     c36:	81 30       	cpi	r24, 0x01	; 1
     c38:	91 05       	cpc	r25, r1
     c3a:	09 f4       	brne	.+2      	; 0xc3e <GPIO_setupPinDirection+0x3a>
     c3c:	43 c0       	rjmp	.+134    	; 0xcc4 <GPIO_setupPinDirection+0xc0>
     c3e:	2c 81       	ldd	r18, Y+4	; 0x04
     c40:	3d 81       	ldd	r19, Y+5	; 0x05
     c42:	22 30       	cpi	r18, 0x02	; 2
     c44:	31 05       	cpc	r19, r1
     c46:	2c f4       	brge	.+10     	; 0xc52 <GPIO_setupPinDirection+0x4e>
     c48:	8c 81       	ldd	r24, Y+4	; 0x04
     c4a:	9d 81       	ldd	r25, Y+5	; 0x05
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	71 f0       	breq	.+28     	; 0xc6c <GPIO_setupPinDirection+0x68>
     c50:	bc c0       	rjmp	.+376    	; 0xdca <GPIO_setupPinDirection+0x1c6>
     c52:	2c 81       	ldd	r18, Y+4	; 0x04
     c54:	3d 81       	ldd	r19, Y+5	; 0x05
     c56:	22 30       	cpi	r18, 0x02	; 2
     c58:	31 05       	cpc	r19, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <GPIO_setupPinDirection+0x5a>
     c5c:	5f c0       	rjmp	.+190    	; 0xd1c <GPIO_setupPinDirection+0x118>
     c5e:	8c 81       	ldd	r24, Y+4	; 0x04
     c60:	9d 81       	ldd	r25, Y+5	; 0x05
     c62:	83 30       	cpi	r24, 0x03	; 3
     c64:	91 05       	cpc	r25, r1
     c66:	09 f4       	brne	.+2      	; 0xc6a <GPIO_setupPinDirection+0x66>
     c68:	85 c0       	rjmp	.+266    	; 0xd74 <GPIO_setupPinDirection+0x170>
     c6a:	af c0       	rjmp	.+350    	; 0xdca <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	a1 f4       	brne	.+40     	; 0xc9a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     c72:	aa e3       	ldi	r26, 0x3A	; 58
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	ea e3       	ldi	r30, 0x3A	; 58
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	48 2f       	mov	r20, r24
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 2e       	mov	r0, r18
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <GPIO_setupPinDirection+0x8c>
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <GPIO_setupPinDirection+0x88>
     c94:	84 2b       	or	r24, r20
     c96:	8c 93       	st	X, r24
     c98:	98 c0       	rjmp	.+304    	; 0xdca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     c9a:	aa e3       	ldi	r26, 0x3A	; 58
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	ea e3       	ldi	r30, 0x3A	; 58
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 2e       	mov	r0, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <GPIO_setupPinDirection+0xb4>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <GPIO_setupPinDirection+0xb0>
     cbc:	80 95       	com	r24
     cbe:	84 23       	and	r24, r20
     cc0:	8c 93       	st	X, r24
     cc2:	83 c0       	rjmp	.+262    	; 0xdca <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	a1 f4       	brne	.+40     	; 0xcf2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     cca:	a7 e3       	ldi	r26, 0x37	; 55
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e7 e3       	ldi	r30, 0x37	; 55
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <GPIO_setupPinDirection+0xe4>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <GPIO_setupPinDirection+0xe0>
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	6c c0       	rjmp	.+216    	; 0xdca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     cf2:	a7 e3       	ldi	r26, 0x37	; 55
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e7 e3       	ldi	r30, 0x37	; 55
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <GPIO_setupPinDirection+0x10c>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <GPIO_setupPinDirection+0x108>
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	57 c0       	rjmp	.+174    	; 0xdca <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	a1 f4       	brne	.+40     	; 0xd4a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     d22:	a4 e3       	ldi	r26, 0x34	; 52
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e4 e3       	ldi	r30, 0x34	; 52
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	48 2f       	mov	r20, r24
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 2e       	mov	r0, r18
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <GPIO_setupPinDirection+0x13c>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <GPIO_setupPinDirection+0x138>
     d44:	84 2b       	or	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	40 c0       	rjmp	.+128    	; 0xdca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     d4a:	a4 e3       	ldi	r26, 0x34	; 52
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e4 e3       	ldi	r30, 0x34	; 52
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	48 2f       	mov	r20, r24
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 2e       	mov	r0, r18
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <GPIO_setupPinDirection+0x164>
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	0a 94       	dec	r0
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <GPIO_setupPinDirection+0x160>
     d6c:	80 95       	com	r24
     d6e:	84 23       	and	r24, r20
     d70:	8c 93       	st	X, r24
     d72:	2b c0       	rjmp	.+86     	; 0xdca <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	a1 f4       	brne	.+40     	; 0xda2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     d7a:	a1 e3       	ldi	r26, 0x31	; 49
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e1 e3       	ldi	r30, 0x31	; 49
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <GPIO_setupPinDirection+0x194>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <GPIO_setupPinDirection+0x190>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	14 c0       	rjmp	.+40     	; 0xdca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     da2:	a1 e3       	ldi	r26, 0x31	; 49
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e1 e3       	ldi	r30, 0x31	; 49
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <GPIO_setupPinDirection+0x1bc>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <GPIO_setupPinDirection+0x1b8>
     dc4:	80 95       	com	r24
     dc6:	84 23       	and	r24, r20
     dc8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	00 d0       	rcall	.+0      	; 0xde0 <GPIO_writePin+0x6>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <GPIO_writePin+0x8>
     de2:	0f 92       	push	r0
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	6a 83       	std	Y+2, r22	; 0x02
     dec:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	88 30       	cpi	r24, 0x08	; 8
     df2:	08 f0       	brcs	.+2      	; 0xdf6 <GPIO_writePin+0x1c>
     df4:	d5 c0       	rjmp	.+426    	; 0xfa0 <GPIO_writePin+0x1c6>
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	84 30       	cpi	r24, 0x04	; 4
     dfa:	08 f0       	brcs	.+2      	; 0xdfe <GPIO_writePin+0x24>
     dfc:	d1 c0       	rjmp	.+418    	; 0xfa0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	3d 83       	std	Y+5, r19	; 0x05
     e06:	2c 83       	std	Y+4, r18	; 0x04
     e08:	8c 81       	ldd	r24, Y+4	; 0x04
     e0a:	9d 81       	ldd	r25, Y+5	; 0x05
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	91 05       	cpc	r25, r1
     e10:	09 f4       	brne	.+2      	; 0xe14 <GPIO_writePin+0x3a>
     e12:	43 c0       	rjmp	.+134    	; 0xe9a <GPIO_writePin+0xc0>
     e14:	2c 81       	ldd	r18, Y+4	; 0x04
     e16:	3d 81       	ldd	r19, Y+5	; 0x05
     e18:	22 30       	cpi	r18, 0x02	; 2
     e1a:	31 05       	cpc	r19, r1
     e1c:	2c f4       	brge	.+10     	; 0xe28 <GPIO_writePin+0x4e>
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
     e20:	9d 81       	ldd	r25, Y+5	; 0x05
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	71 f0       	breq	.+28     	; 0xe42 <GPIO_writePin+0x68>
     e26:	bc c0       	rjmp	.+376    	; 0xfa0 <GPIO_writePin+0x1c6>
     e28:	2c 81       	ldd	r18, Y+4	; 0x04
     e2a:	3d 81       	ldd	r19, Y+5	; 0x05
     e2c:	22 30       	cpi	r18, 0x02	; 2
     e2e:	31 05       	cpc	r19, r1
     e30:	09 f4       	brne	.+2      	; 0xe34 <GPIO_writePin+0x5a>
     e32:	5f c0       	rjmp	.+190    	; 0xef2 <GPIO_writePin+0x118>
     e34:	8c 81       	ldd	r24, Y+4	; 0x04
     e36:	9d 81       	ldd	r25, Y+5	; 0x05
     e38:	83 30       	cpi	r24, 0x03	; 3
     e3a:	91 05       	cpc	r25, r1
     e3c:	09 f4       	brne	.+2      	; 0xe40 <GPIO_writePin+0x66>
     e3e:	85 c0       	rjmp	.+266    	; 0xf4a <GPIO_writePin+0x170>
     e40:	af c0       	rjmp	.+350    	; 0xfa0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	a1 f4       	brne	.+40     	; 0xe70 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     e48:	ab e3       	ldi	r26, 0x3B	; 59
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	eb e3       	ldi	r30, 0x3B	; 59
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <GPIO_writePin+0x8c>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <GPIO_writePin+0x88>
     e6a:	84 2b       	or	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	98 c0       	rjmp	.+304    	; 0xfa0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     e70:	ab e3       	ldi	r26, 0x3B	; 59
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	eb e3       	ldi	r30, 0x3B	; 59
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <GPIO_writePin+0xb4>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <GPIO_writePin+0xb0>
     e92:	80 95       	com	r24
     e94:	84 23       	and	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	83 c0       	rjmp	.+262    	; 0xfa0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	a1 f4       	brne	.+40     	; 0xec8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     ea0:	a8 e3       	ldi	r26, 0x38	; 56
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e8 e3       	ldi	r30, 0x38	; 56
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <GPIO_writePin+0xe4>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <GPIO_writePin+0xe0>
     ec2:	84 2b       	or	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	6c c0       	rjmp	.+216    	; 0xfa0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     ec8:	a8 e3       	ldi	r26, 0x38	; 56
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e8 e3       	ldi	r30, 0x38	; 56
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <GPIO_writePin+0x10c>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <GPIO_writePin+0x108>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	57 c0       	rjmp	.+174    	; 0xfa0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	a1 f4       	brne	.+40     	; 0xf20 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     ef8:	a5 e3       	ldi	r26, 0x35	; 53
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e5 e3       	ldi	r30, 0x35	; 53
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 2e       	mov	r0, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <GPIO_writePin+0x13c>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <GPIO_writePin+0x138>
     f1a:	84 2b       	or	r24, r20
     f1c:	8c 93       	st	X, r24
     f1e:	40 c0       	rjmp	.+128    	; 0xfa0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     f20:	a5 e3       	ldi	r26, 0x35	; 53
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e5 e3       	ldi	r30, 0x35	; 53
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <GPIO_writePin+0x164>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <GPIO_writePin+0x160>
     f42:	80 95       	com	r24
     f44:	84 23       	and	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	2b c0       	rjmp	.+86     	; 0xfa0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	a1 f4       	brne	.+40     	; 0xf78 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     f50:	a2 e3       	ldi	r26, 0x32	; 50
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e2 e3       	ldi	r30, 0x32	; 50
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <GPIO_writePin+0x194>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <GPIO_writePin+0x190>
     f72:	84 2b       	or	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	14 c0       	rjmp	.+40     	; 0xfa0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     f78:	a2 e3       	ldi	r26, 0x32	; 50
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e2 e3       	ldi	r30, 0x32	; 50
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <GPIO_writePin+0x1bc>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <GPIO_writePin+0x1b8>
     f9a:	80 95       	com	r24
     f9c:	84 23       	and	r24, r20
     f9e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <GPIO_readPin+0x6>
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <GPIO_readPin+0x8>
     fb8:	0f 92       	push	r0
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	8a 83       	std	Y+2, r24	; 0x02
     fc0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     fc2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	88 30       	cpi	r24, 0x08	; 8
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <GPIO_readPin+0x1c>
     fca:	84 c0       	rjmp	.+264    	; 0x10d4 <GPIO_readPin+0x124>
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <GPIO_readPin+0x24>
     fd2:	80 c0       	rjmp	.+256    	; 0x10d4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	3d 83       	std	Y+5, r19	; 0x05
     fdc:	2c 83       	std	Y+4, r18	; 0x04
     fde:	4c 81       	ldd	r20, Y+4	; 0x04
     fe0:	5d 81       	ldd	r21, Y+5	; 0x05
     fe2:	41 30       	cpi	r20, 0x01	; 1
     fe4:	51 05       	cpc	r21, r1
     fe6:	79 f1       	breq	.+94     	; 0x1046 <GPIO_readPin+0x96>
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	82 30       	cpi	r24, 0x02	; 2
     fee:	91 05       	cpc	r25, r1
     ff0:	34 f4       	brge	.+12     	; 0xffe <GPIO_readPin+0x4e>
     ff2:	2c 81       	ldd	r18, Y+4	; 0x04
     ff4:	3d 81       	ldd	r19, Y+5	; 0x05
     ff6:	21 15       	cp	r18, r1
     ff8:	31 05       	cpc	r19, r1
     ffa:	69 f0       	breq	.+26     	; 0x1016 <GPIO_readPin+0x66>
     ffc:	6b c0       	rjmp	.+214    	; 0x10d4 <GPIO_readPin+0x124>
     ffe:	4c 81       	ldd	r20, Y+4	; 0x04
    1000:	5d 81       	ldd	r21, Y+5	; 0x05
    1002:	42 30       	cpi	r20, 0x02	; 2
    1004:	51 05       	cpc	r21, r1
    1006:	b9 f1       	breq	.+110    	; 0x1076 <GPIO_readPin+0xc6>
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	9d 81       	ldd	r25, Y+5	; 0x05
    100c:	83 30       	cpi	r24, 0x03	; 3
    100e:	91 05       	cpc	r25, r1
    1010:	09 f4       	brne	.+2      	; 0x1014 <GPIO_readPin+0x64>
    1012:	49 c0       	rjmp	.+146    	; 0x10a6 <GPIO_readPin+0xf6>
    1014:	5f c0       	rjmp	.+190    	; 0x10d4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1016:	e9 e3       	ldi	r30, 0x39	; 57
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	a9 01       	movw	r20, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <GPIO_readPin+0x7e>
    102a:	55 95       	asr	r21
    102c:	47 95       	ror	r20
    102e:	8a 95       	dec	r24
    1030:	e2 f7       	brpl	.-8      	; 0x102a <GPIO_readPin+0x7a>
    1032:	ca 01       	movw	r24, r20
    1034:	81 70       	andi	r24, 0x01	; 1
    1036:	90 70       	andi	r25, 0x00	; 0
    1038:	88 23       	and	r24, r24
    103a:	19 f0       	breq	.+6      	; 0x1042 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	49 c0       	rjmp	.+146    	; 0x10d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1042:	19 82       	std	Y+1, r1	; 0x01
    1044:	47 c0       	rjmp	.+142    	; 0x10d4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1046:	e6 e3       	ldi	r30, 0x36	; 54
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	88 2f       	mov	r24, r24
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	a9 01       	movw	r20, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <GPIO_readPin+0xae>
    105a:	55 95       	asr	r21
    105c:	47 95       	ror	r20
    105e:	8a 95       	dec	r24
    1060:	e2 f7       	brpl	.-8      	; 0x105a <GPIO_readPin+0xaa>
    1062:	ca 01       	movw	r24, r20
    1064:	81 70       	andi	r24, 0x01	; 1
    1066:	90 70       	andi	r25, 0x00	; 0
    1068:	88 23       	and	r24, r24
    106a:	19 f0       	breq	.+6      	; 0x1072 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	89 83       	std	Y+1, r24	; 0x01
    1070:	31 c0       	rjmp	.+98     	; 0x10d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1072:	19 82       	std	Y+1, r1	; 0x01
    1074:	2f c0       	rjmp	.+94     	; 0x10d4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1076:	e3 e3       	ldi	r30, 0x33	; 51
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	88 2f       	mov	r24, r24
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	a9 01       	movw	r20, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <GPIO_readPin+0xde>
    108a:	55 95       	asr	r21
    108c:	47 95       	ror	r20
    108e:	8a 95       	dec	r24
    1090:	e2 f7       	brpl	.-8      	; 0x108a <GPIO_readPin+0xda>
    1092:	ca 01       	movw	r24, r20
    1094:	81 70       	andi	r24, 0x01	; 1
    1096:	90 70       	andi	r25, 0x00	; 0
    1098:	88 23       	and	r24, r24
    109a:	19 f0       	breq	.+6      	; 0x10a2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	19 c0       	rjmp	.+50     	; 0x10d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10a2:	19 82       	std	Y+1, r1	; 0x01
    10a4:	17 c0       	rjmp	.+46     	; 0x10d4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    10a6:	e0 e3       	ldi	r30, 0x30	; 48
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	a9 01       	movw	r20, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <GPIO_readPin+0x10e>
    10ba:	55 95       	asr	r21
    10bc:	47 95       	ror	r20
    10be:	8a 95       	dec	r24
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <GPIO_readPin+0x10a>
    10c2:	ca 01       	movw	r24, r20
    10c4:	81 70       	andi	r24, 0x01	; 1
    10c6:	90 70       	andi	r25, 0x00	; 0
    10c8:	88 23       	and	r24, r24
    10ca:	19 f0       	breq	.+6      	; 0x10d2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10d2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <GPIO_setupPortDirection+0x6>
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <GPIO_setupPortDirection+0x8>
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	84 30       	cpi	r24, 0x04	; 4
    10fa:	90 f5       	brcc	.+100    	; 0x1160 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	3c 83       	std	Y+4, r19	; 0x04
    1104:	2b 83       	std	Y+3, r18	; 0x03
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	91 05       	cpc	r25, r1
    110e:	d1 f0       	breq	.+52     	; 0x1144 <GPIO_setupPortDirection+0x5e>
    1110:	2b 81       	ldd	r18, Y+3	; 0x03
    1112:	3c 81       	ldd	r19, Y+4	; 0x04
    1114:	22 30       	cpi	r18, 0x02	; 2
    1116:	31 05       	cpc	r19, r1
    1118:	2c f4       	brge	.+10     	; 0x1124 <GPIO_setupPortDirection+0x3e>
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	9c 81       	ldd	r25, Y+4	; 0x04
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	61 f0       	breq	.+24     	; 0x113a <GPIO_setupPortDirection+0x54>
    1122:	1e c0       	rjmp	.+60     	; 0x1160 <GPIO_setupPortDirection+0x7a>
    1124:	2b 81       	ldd	r18, Y+3	; 0x03
    1126:	3c 81       	ldd	r19, Y+4	; 0x04
    1128:	22 30       	cpi	r18, 0x02	; 2
    112a:	31 05       	cpc	r19, r1
    112c:	81 f0       	breq	.+32     	; 0x114e <GPIO_setupPortDirection+0x68>
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	83 30       	cpi	r24, 0x03	; 3
    1134:	91 05       	cpc	r25, r1
    1136:	81 f0       	breq	.+32     	; 0x1158 <GPIO_setupPortDirection+0x72>
    1138:	13 c0       	rjmp	.+38     	; 0x1160 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    113a:	ea e3       	ldi	r30, 0x3A	; 58
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	80 83       	st	Z, r24
    1142:	0e c0       	rjmp	.+28     	; 0x1160 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1144:	e7 e3       	ldi	r30, 0x37	; 55
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	80 83       	st	Z, r24
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    114e:	e4 e3       	ldi	r30, 0x34	; 52
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	80 83       	st	Z, r24
    1156:	04 c0       	rjmp	.+8      	; 0x1160 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1158:	e1 e3       	ldi	r30, 0x31	; 49
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	00 d0       	rcall	.+0      	; 0x1174 <GPIO_writePort+0x6>
    1174:	00 d0       	rcall	.+0      	; 0x1176 <GPIO_writePort+0x8>
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	84 30       	cpi	r24, 0x04	; 4
    1182:	90 f5       	brcc	.+100    	; 0x11e8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	3c 83       	std	Y+4, r19	; 0x04
    118c:	2b 83       	std	Y+3, r18	; 0x03
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	91 05       	cpc	r25, r1
    1196:	d1 f0       	breq	.+52     	; 0x11cc <GPIO_writePort+0x5e>
    1198:	2b 81       	ldd	r18, Y+3	; 0x03
    119a:	3c 81       	ldd	r19, Y+4	; 0x04
    119c:	22 30       	cpi	r18, 0x02	; 2
    119e:	31 05       	cpc	r19, r1
    11a0:	2c f4       	brge	.+10     	; 0x11ac <GPIO_writePort+0x3e>
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	61 f0       	breq	.+24     	; 0x11c2 <GPIO_writePort+0x54>
    11aa:	1e c0       	rjmp	.+60     	; 0x11e8 <GPIO_writePort+0x7a>
    11ac:	2b 81       	ldd	r18, Y+3	; 0x03
    11ae:	3c 81       	ldd	r19, Y+4	; 0x04
    11b0:	22 30       	cpi	r18, 0x02	; 2
    11b2:	31 05       	cpc	r19, r1
    11b4:	81 f0       	breq	.+32     	; 0x11d6 <GPIO_writePort+0x68>
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	91 05       	cpc	r25, r1
    11be:	81 f0       	breq	.+32     	; 0x11e0 <GPIO_writePort+0x72>
    11c0:	13 c0       	rjmp	.+38     	; 0x11e8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    11c2:	eb e3       	ldi	r30, 0x3B	; 59
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	80 83       	st	Z, r24
    11ca:	0e c0       	rjmp	.+28     	; 0x11e8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    11cc:	e8 e3       	ldi	r30, 0x38	; 56
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	80 83       	st	Z, r24
    11d4:	09 c0       	rjmp	.+18     	; 0x11e8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    11d6:	e5 e3       	ldi	r30, 0x35	; 53
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	80 83       	st	Z, r24
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    11e0:	e2 e3       	ldi	r30, 0x32	; 50
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	80 83       	st	Z, r24
			break;
		}
	}
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <GPIO_readPort+0x6>
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <GPIO_readPort+0x8>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1204:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	84 30       	cpi	r24, 0x04	; 4
    120a:	90 f5       	brcc	.+100    	; 0x1270 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	3c 83       	std	Y+4, r19	; 0x04
    1214:	2b 83       	std	Y+3, r18	; 0x03
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	91 05       	cpc	r25, r1
    121e:	d1 f0       	breq	.+52     	; 0x1254 <GPIO_readPort+0x5e>
    1220:	2b 81       	ldd	r18, Y+3	; 0x03
    1222:	3c 81       	ldd	r19, Y+4	; 0x04
    1224:	22 30       	cpi	r18, 0x02	; 2
    1226:	31 05       	cpc	r19, r1
    1228:	2c f4       	brge	.+10     	; 0x1234 <GPIO_readPort+0x3e>
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	61 f0       	breq	.+24     	; 0x124a <GPIO_readPort+0x54>
    1232:	1e c0       	rjmp	.+60     	; 0x1270 <GPIO_readPort+0x7a>
    1234:	2b 81       	ldd	r18, Y+3	; 0x03
    1236:	3c 81       	ldd	r19, Y+4	; 0x04
    1238:	22 30       	cpi	r18, 0x02	; 2
    123a:	31 05       	cpc	r19, r1
    123c:	81 f0       	breq	.+32     	; 0x125e <GPIO_readPort+0x68>
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	83 30       	cpi	r24, 0x03	; 3
    1244:	91 05       	cpc	r25, r1
    1246:	81 f0       	breq	.+32     	; 0x1268 <GPIO_readPort+0x72>
    1248:	13 c0       	rjmp	.+38     	; 0x1270 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    124a:	e9 e3       	ldi	r30, 0x39	; 57
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	0e c0       	rjmp	.+28     	; 0x1270 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1254:	e6 e3       	ldi	r30, 0x36	; 54
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	09 c0       	rjmp	.+18     	; 0x1270 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    125e:	e3 e3       	ldi	r30, 0x33	; 51
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1268:	e0 e3       	ldi	r30, 0x30	; 48
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1270:	89 81       	ldd	r24, Y+1	; 0x01
}
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <LCD_SendCommand>:

/*-------------------------------------------------------------------------*/
/*-------------------------FUNCTION DEFINITIONS----------------------------*/
/*-------------------------------------------------------------------------*/
void LCD_SendCommand (uint8 command)
{
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	c3 56       	subi	r28, 0x63	; 99
    128e:	d0 40       	sbci	r29, 0x00	; 0
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	fe 01       	movw	r30, r28
    129c:	ed 59       	subi	r30, 0x9D	; 157
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	80 83       	st	Z, r24

	/*RS=0 */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
    12ac:	fe 01       	movw	r30, r28
    12ae:	e1 5a       	subi	r30, 0xA1	; 161
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a0 e8       	ldi	r26, 0x80	; 128
    12b8:	bf e3       	ldi	r27, 0x3F	; 63
    12ba:	80 83       	st	Z, r24
    12bc:	91 83       	std	Z+1, r25	; 0x01
    12be:	a2 83       	std	Z+2, r26	; 0x02
    12c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c2:	8e 01       	movw	r16, r28
    12c4:	05 5a       	subi	r16, 0xA5	; 165
    12c6:	1f 4f       	sbci	r17, 0xFF	; 255
    12c8:	fe 01       	movw	r30, r28
    12ca:	e1 5a       	subi	r30, 0xA1	; 161
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	60 81       	ld	r22, Z
    12d0:	71 81       	ldd	r23, Z+1	; 0x01
    12d2:	82 81       	ldd	r24, Z+2	; 0x02
    12d4:	93 81       	ldd	r25, Z+3	; 0x03
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	4a e7       	ldi	r20, 0x7A	; 122
    12dc:	55 e4       	ldi	r21, 0x45	; 69
    12de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	f8 01       	movw	r30, r16
    12e8:	80 83       	st	Z, r24
    12ea:	91 83       	std	Z+1, r25	; 0x01
    12ec:	a2 83       	std	Z+2, r26	; 0x02
    12ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12f0:	fe 01       	movw	r30, r28
    12f2:	e5 5a       	subi	r30, 0xA5	; 165
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	60 81       	ld	r22, Z
    12f8:	71 81       	ldd	r23, Z+1	; 0x01
    12fa:	82 81       	ldd	r24, Z+2	; 0x02
    12fc:	93 81       	ldd	r25, Z+3	; 0x03
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e8       	ldi	r20, 0x80	; 128
    1304:	5f e3       	ldi	r21, 0x3F	; 63
    1306:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    130a:	88 23       	and	r24, r24
    130c:	44 f4       	brge	.+16     	; 0x131e <LCD_SendCommand+0x9e>
		__ticks = 1;
    130e:	fe 01       	movw	r30, r28
    1310:	e7 5a       	subi	r30, 0xA7	; 167
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	91 83       	std	Z+1, r25	; 0x01
    131a:	80 83       	st	Z, r24
    131c:	64 c0       	rjmp	.+200    	; 0x13e6 <LCD_SendCommand+0x166>
	else if (__tmp > 65535)
    131e:	fe 01       	movw	r30, r28
    1320:	e5 5a       	subi	r30, 0xA5	; 165
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	60 81       	ld	r22, Z
    1326:	71 81       	ldd	r23, Z+1	; 0x01
    1328:	82 81       	ldd	r24, Z+2	; 0x02
    132a:	93 81       	ldd	r25, Z+3	; 0x03
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	3f ef       	ldi	r19, 0xFF	; 255
    1330:	4f e7       	ldi	r20, 0x7F	; 127
    1332:	57 e4       	ldi	r21, 0x47	; 71
    1334:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1338:	18 16       	cp	r1, r24
    133a:	0c f0       	brlt	.+2      	; 0x133e <LCD_SendCommand+0xbe>
    133c:	43 c0       	rjmp	.+134    	; 0x13c4 <LCD_SendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133e:	fe 01       	movw	r30, r28
    1340:	e1 5a       	subi	r30, 0xA1	; 161
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	60 81       	ld	r22, Z
    1346:	71 81       	ldd	r23, Z+1	; 0x01
    1348:	82 81       	ldd	r24, Z+2	; 0x02
    134a:	93 81       	ldd	r25, Z+3	; 0x03
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e2       	ldi	r20, 0x20	; 32
    1352:	51 e4       	ldi	r21, 0x41	; 65
    1354:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	8e 01       	movw	r16, r28
    135e:	07 5a       	subi	r16, 0xA7	; 167
    1360:	1f 4f       	sbci	r17, 0xFF	; 255
    1362:	bc 01       	movw	r22, r24
    1364:	cd 01       	movw	r24, r26
    1366:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	f8 01       	movw	r30, r16
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	80 83       	st	Z, r24
    1374:	1f c0       	rjmp	.+62     	; 0x13b4 <LCD_SendCommand+0x134>
    1376:	fe 01       	movw	r30, r28
    1378:	e9 5a       	subi	r30, 0xA9	; 169
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	80 e9       	ldi	r24, 0x90	; 144
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1384:	fe 01       	movw	r30, r28
    1386:	e9 5a       	subi	r30, 0xA9	; 169
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	80 81       	ld	r24, Z
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <LCD_SendCommand+0x10e>
    1392:	fe 01       	movw	r30, r28
    1394:	e9 5a       	subi	r30, 0xA9	; 169
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	91 83       	std	Z+1, r25	; 0x01
    139a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139c:	de 01       	movw	r26, r28
    139e:	a7 5a       	subi	r26, 0xA7	; 167
    13a0:	bf 4f       	sbci	r27, 0xFF	; 255
    13a2:	fe 01       	movw	r30, r28
    13a4:	e7 5a       	subi	r30, 0xA7	; 167
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	80 81       	ld	r24, Z
    13aa:	91 81       	ldd	r25, Z+1	; 0x01
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	11 96       	adiw	r26, 0x01	; 1
    13b0:	9c 93       	st	X, r25
    13b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b4:	fe 01       	movw	r30, r28
    13b6:	e7 5a       	subi	r30, 0xA7	; 167
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	80 81       	ld	r24, Z
    13bc:	91 81       	ldd	r25, Z+1	; 0x01
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	d1 f6       	brne	.-76     	; 0x1376 <LCD_SendCommand+0xf6>
    13c2:	27 c0       	rjmp	.+78     	; 0x1412 <LCD_SendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c4:	8e 01       	movw	r16, r28
    13c6:	07 5a       	subi	r16, 0xA7	; 167
    13c8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ca:	fe 01       	movw	r30, r28
    13cc:	e5 5a       	subi	r30, 0xA5	; 165
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	60 81       	ld	r22, Z
    13d2:	71 81       	ldd	r23, Z+1	; 0x01
    13d4:	82 81       	ldd	r24, Z+2	; 0x02
    13d6:	93 81       	ldd	r25, Z+3	; 0x03
    13d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	f8 01       	movw	r30, r16
    13e2:	91 83       	std	Z+1, r25	; 0x01
    13e4:	80 83       	st	Z, r24
    13e6:	de 01       	movw	r26, r28
    13e8:	ab 5a       	subi	r26, 0xAB	; 171
    13ea:	bf 4f       	sbci	r27, 0xFF	; 255
    13ec:	fe 01       	movw	r30, r28
    13ee:	e7 5a       	subi	r30, 0xA7	; 167
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	80 81       	ld	r24, Z
    13f4:	91 81       	ldd	r25, Z+1	; 0x01
    13f6:	8d 93       	st	X+, r24
    13f8:	9c 93       	st	X, r25
    13fa:	fe 01       	movw	r30, r28
    13fc:	eb 5a       	subi	r30, 0xAB	; 171
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	80 81       	ld	r24, Z
    1402:	91 81       	ldd	r25, Z+1	; 0x01
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <LCD_SendCommand+0x184>
    1408:	fe 01       	movw	r30, r28
    140a:	eb 5a       	subi	r30, 0xAB	; 171
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	91 83       	std	Z+1, r25	; 0x01
    1410:	80 83       	st	Z, r24
	//delay 1u
	_delay_ms(1);

	/*enable =1 */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	62 e0       	ldi	r22, 0x02	; 2
    1416:	41 e0       	ldi	r20, 0x01	; 1
    1418:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
    141c:	fe 01       	movw	r30, r28
    141e:	ef 5a       	subi	r30, 0xAF	; 175
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e8       	ldi	r26, 0x80	; 128
    1428:	bf e3       	ldi	r27, 0x3F	; 63
    142a:	80 83       	st	Z, r24
    142c:	91 83       	std	Z+1, r25	; 0x01
    142e:	a2 83       	std	Z+2, r26	; 0x02
    1430:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1432:	8e 01       	movw	r16, r28
    1434:	03 5b       	subi	r16, 0xB3	; 179
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
    1438:	fe 01       	movw	r30, r28
    143a:	ef 5a       	subi	r30, 0xAF	; 175
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	4a e7       	ldi	r20, 0x7A	; 122
    144c:	55 e4       	ldi	r21, 0x45	; 69
    144e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	f8 01       	movw	r30, r16
    1458:	80 83       	st	Z, r24
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	a2 83       	std	Z+2, r26	; 0x02
    145e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1460:	fe 01       	movw	r30, r28
    1462:	e3 5b       	subi	r30, 0xB3	; 179
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	60 81       	ld	r22, Z
    1468:	71 81       	ldd	r23, Z+1	; 0x01
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e8       	ldi	r20, 0x80	; 128
    1474:	5f e3       	ldi	r21, 0x3F	; 63
    1476:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    147a:	88 23       	and	r24, r24
    147c:	44 f4       	brge	.+16     	; 0x148e <LCD_SendCommand+0x20e>
		__ticks = 1;
    147e:	fe 01       	movw	r30, r28
    1480:	e5 5b       	subi	r30, 0xB5	; 181
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	91 83       	std	Z+1, r25	; 0x01
    148a:	80 83       	st	Z, r24
    148c:	64 c0       	rjmp	.+200    	; 0x1556 <LCD_SendCommand+0x2d6>
	else if (__tmp > 65535)
    148e:	fe 01       	movw	r30, r28
    1490:	e3 5b       	subi	r30, 0xB3	; 179
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	60 81       	ld	r22, Z
    1496:	71 81       	ldd	r23, Z+1	; 0x01
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	93 81       	ldd	r25, Z+3	; 0x03
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	3f ef       	ldi	r19, 0xFF	; 255
    14a0:	4f e7       	ldi	r20, 0x7F	; 127
    14a2:	57 e4       	ldi	r21, 0x47	; 71
    14a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14a8:	18 16       	cp	r1, r24
    14aa:	0c f0       	brlt	.+2      	; 0x14ae <LCD_SendCommand+0x22e>
    14ac:	43 c0       	rjmp	.+134    	; 0x1534 <LCD_SendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ae:	fe 01       	movw	r30, r28
    14b0:	ef 5a       	subi	r30, 0xAF	; 175
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	60 81       	ld	r22, Z
    14b6:	71 81       	ldd	r23, Z+1	; 0x01
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	93 81       	ldd	r25, Z+3	; 0x03
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e2       	ldi	r20, 0x20	; 32
    14c2:	51 e4       	ldi	r21, 0x41	; 65
    14c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8e 01       	movw	r16, r28
    14ce:	05 5b       	subi	r16, 0xB5	; 181
    14d0:	1f 4f       	sbci	r17, 0xFF	; 255
    14d2:	bc 01       	movw	r22, r24
    14d4:	cd 01       	movw	r24, r26
    14d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	f8 01       	movw	r30, r16
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	80 83       	st	Z, r24
    14e4:	1f c0       	rjmp	.+62     	; 0x1524 <LCD_SendCommand+0x2a4>
    14e6:	fe 01       	movw	r30, r28
    14e8:	e7 5b       	subi	r30, 0xB7	; 183
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 e9       	ldi	r24, 0x90	; 144
    14ee:	91 e0       	ldi	r25, 0x01	; 1
    14f0:	91 83       	std	Z+1, r25	; 0x01
    14f2:	80 83       	st	Z, r24
    14f4:	fe 01       	movw	r30, r28
    14f6:	e7 5b       	subi	r30, 0xB7	; 183
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	80 81       	ld	r24, Z
    14fc:	91 81       	ldd	r25, Z+1	; 0x01
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <LCD_SendCommand+0x27e>
    1502:	fe 01       	movw	r30, r28
    1504:	e7 5b       	subi	r30, 0xB7	; 183
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	91 83       	std	Z+1, r25	; 0x01
    150a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150c:	de 01       	movw	r26, r28
    150e:	a5 5b       	subi	r26, 0xB5	; 181
    1510:	bf 4f       	sbci	r27, 0xFF	; 255
    1512:	fe 01       	movw	r30, r28
    1514:	e5 5b       	subi	r30, 0xB5	; 181
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	80 81       	ld	r24, Z
    151a:	91 81       	ldd	r25, Z+1	; 0x01
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	11 96       	adiw	r26, 0x01	; 1
    1520:	9c 93       	st	X, r25
    1522:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1524:	fe 01       	movw	r30, r28
    1526:	e5 5b       	subi	r30, 0xB5	; 181
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	d1 f6       	brne	.-76     	; 0x14e6 <LCD_SendCommand+0x266>
    1532:	27 c0       	rjmp	.+78     	; 0x1582 <LCD_SendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1534:	8e 01       	movw	r16, r28
    1536:	05 5b       	subi	r16, 0xB5	; 181
    1538:	1f 4f       	sbci	r17, 0xFF	; 255
    153a:	fe 01       	movw	r30, r28
    153c:	e3 5b       	subi	r30, 0xB3	; 179
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	60 81       	ld	r22, Z
    1542:	71 81       	ldd	r23, Z+1	; 0x01
    1544:	82 81       	ldd	r24, Z+2	; 0x02
    1546:	93 81       	ldd	r25, Z+3	; 0x03
    1548:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	f8 01       	movw	r30, r16
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	80 83       	st	Z, r24
    1556:	de 01       	movw	r26, r28
    1558:	a9 5b       	subi	r26, 0xB9	; 185
    155a:	bf 4f       	sbci	r27, 0xFF	; 255
    155c:	fe 01       	movw	r30, r28
    155e:	e5 5b       	subi	r30, 0xB5	; 181
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	80 81       	ld	r24, Z
    1564:	91 81       	ldd	r25, Z+1	; 0x01
    1566:	8d 93       	st	X+, r24
    1568:	9c 93       	st	X, r25
    156a:	fe 01       	movw	r30, r28
    156c:	e9 5b       	subi	r30, 0xB9	; 185
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	80 81       	ld	r24, Z
    1572:	91 81       	ldd	r25, Z+1	; 0x01
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <LCD_SendCommand+0x2f4>
    1578:	fe 01       	movw	r30, r28
    157a:	e9 5b       	subi	r30, 0xB9	; 185
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	91 83       	std	Z+1, r25	; 0x01
    1580:	80 83       	st	Z, r24
	/*delay 1u */
	_delay_ms(1);

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1582:	fe 01       	movw	r30, r28
    1584:	ed 59       	subi	r30, 0x9D	; 157
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 81       	ld	r24, Z
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	80 71       	andi	r24, 0x10	; 16
    1590:	90 70       	andi	r25, 0x00	; 0
    1592:	95 95       	asr	r25
    1594:	87 95       	ror	r24
    1596:	95 95       	asr	r25
    1598:	87 95       	ror	r24
    159a:	95 95       	asr	r25
    159c:	87 95       	ror	r24
    159e:	95 95       	asr	r25
    15a0:	87 95       	ror	r24
    15a2:	98 2f       	mov	r25, r24
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	63 e0       	ldi	r22, 0x03	; 3
    15a8:	49 2f       	mov	r20, r25
    15aa:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    15ae:	fe 01       	movw	r30, r28
    15b0:	ed 59       	subi	r30, 0x9D	; 157
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	80 81       	ld	r24, Z
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	80 72       	andi	r24, 0x20	; 32
    15bc:	90 70       	andi	r25, 0x00	; 0
    15be:	95 95       	asr	r25
    15c0:	87 95       	ror	r24
    15c2:	95 95       	asr	r25
    15c4:	87 95       	ror	r24
    15c6:	95 95       	asr	r25
    15c8:	87 95       	ror	r24
    15ca:	95 95       	asr	r25
    15cc:	87 95       	ror	r24
    15ce:	95 95       	asr	r25
    15d0:	87 95       	ror	r24
    15d2:	98 2f       	mov	r25, r24
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	64 e0       	ldi	r22, 0x04	; 4
    15d8:	49 2f       	mov	r20, r25
    15da:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    15de:	fe 01       	movw	r30, r28
    15e0:	ed 59       	subi	r30, 0x9D	; 157
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	80 81       	ld	r24, Z
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	80 74       	andi	r24, 0x40	; 64
    15ec:	90 70       	andi	r25, 0x00	; 0
    15ee:	08 2e       	mov	r0, r24
    15f0:	89 2f       	mov	r24, r25
    15f2:	00 0c       	add	r0, r0
    15f4:	88 1f       	adc	r24, r24
    15f6:	99 0b       	sbc	r25, r25
    15f8:	00 0c       	add	r0, r0
    15fa:	88 1f       	adc	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	98 2f       	mov	r25, r24
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	65 e0       	ldi	r22, 0x05	; 5
    1604:	49 2f       	mov	r20, r25
    1606:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    160a:	fe 01       	movw	r30, r28
    160c:	ed 59       	subi	r30, 0x9D	; 157
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	80 81       	ld	r24, Z
    1612:	98 2f       	mov	r25, r24
    1614:	99 1f       	adc	r25, r25
    1616:	99 27       	eor	r25, r25
    1618:	99 1f       	adc	r25, r25
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	66 e0       	ldi	r22, 0x06	; 6
    161e:	49 2f       	mov	r20, r25
    1620:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
    1624:	fe 01       	movw	r30, r28
    1626:	ed 5b       	subi	r30, 0xBD	; 189
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a0 e8       	ldi	r26, 0x80	; 128
    1630:	bf e3       	ldi	r27, 0x3F	; 63
    1632:	80 83       	st	Z, r24
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	a2 83       	std	Z+2, r26	; 0x02
    1638:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163a:	8e 01       	movw	r16, r28
    163c:	01 5c       	subi	r16, 0xC1	; 193
    163e:	1f 4f       	sbci	r17, 0xFF	; 255
    1640:	fe 01       	movw	r30, r28
    1642:	ed 5b       	subi	r30, 0xBD	; 189
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	60 81       	ld	r22, Z
    1648:	71 81       	ldd	r23, Z+1	; 0x01
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	4a e7       	ldi	r20, 0x7A	; 122
    1654:	55 e4       	ldi	r21, 0x45	; 69
    1656:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	f8 01       	movw	r30, r16
    1660:	80 83       	st	Z, r24
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	a2 83       	std	Z+2, r26	; 0x02
    1666:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1668:	fe 01       	movw	r30, r28
    166a:	ff 96       	adiw	r30, 0x3f	; 63
    166c:	60 81       	ld	r22, Z
    166e:	71 81       	ldd	r23, Z+1	; 0x01
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	93 81       	ldd	r25, Z+3	; 0x03
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e8       	ldi	r20, 0x80	; 128
    167a:	5f e3       	ldi	r21, 0x3F	; 63
    167c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1680:	88 23       	and	r24, r24
    1682:	2c f4       	brge	.+10     	; 0x168e <LCD_SendCommand+0x40e>
		__ticks = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9e af       	std	Y+62, r25	; 0x3e
    168a:	8d af       	std	Y+61, r24	; 0x3d
    168c:	46 c0       	rjmp	.+140    	; 0x171a <LCD_SendCommand+0x49a>
	else if (__tmp > 65535)
    168e:	fe 01       	movw	r30, r28
    1690:	ff 96       	adiw	r30, 0x3f	; 63
    1692:	60 81       	ld	r22, Z
    1694:	71 81       	ldd	r23, Z+1	; 0x01
    1696:	82 81       	ldd	r24, Z+2	; 0x02
    1698:	93 81       	ldd	r25, Z+3	; 0x03
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	3f ef       	ldi	r19, 0xFF	; 255
    169e:	4f e7       	ldi	r20, 0x7F	; 127
    16a0:	57 e4       	ldi	r21, 0x47	; 71
    16a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16a6:	18 16       	cp	r1, r24
    16a8:	64 f5       	brge	.+88     	; 0x1702 <LCD_SendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16aa:	fe 01       	movw	r30, r28
    16ac:	ed 5b       	subi	r30, 0xBD	; 189
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	60 81       	ld	r22, Z
    16b2:	71 81       	ldd	r23, Z+1	; 0x01
    16b4:	82 81       	ldd	r24, Z+2	; 0x02
    16b6:	93 81       	ldd	r25, Z+3	; 0x03
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e2       	ldi	r20, 0x20	; 32
    16be:	51 e4       	ldi	r21, 0x41	; 65
    16c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	9e af       	std	Y+62, r25	; 0x3e
    16d6:	8d af       	std	Y+61, r24	; 0x3d
    16d8:	0f c0       	rjmp	.+30     	; 0x16f8 <LCD_SendCommand+0x478>
    16da:	80 e9       	ldi	r24, 0x90	; 144
    16dc:	91 e0       	ldi	r25, 0x01	; 1
    16de:	9c af       	std	Y+60, r25	; 0x3c
    16e0:	8b af       	std	Y+59, r24	; 0x3b
    16e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    16e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <LCD_SendCommand+0x466>
    16ea:	9c af       	std	Y+60, r25	; 0x3c
    16ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    16f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	9e af       	std	Y+62, r25	; 0x3e
    16f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    16fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	69 f7       	brne	.-38     	; 0x16da <LCD_SendCommand+0x45a>
    1700:	16 c0       	rjmp	.+44     	; 0x172e <LCD_SendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1702:	fe 01       	movw	r30, r28
    1704:	ff 96       	adiw	r30, 0x3f	; 63
    1706:	60 81       	ld	r22, Z
    1708:	71 81       	ldd	r23, Z+1	; 0x01
    170a:	82 81       	ldd	r24, Z+2	; 0x02
    170c:	93 81       	ldd	r25, Z+3	; 0x03
    170e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	9e af       	std	Y+62, r25	; 0x3e
    1718:	8d af       	std	Y+61, r24	; 0x3d
    171a:	8d ad       	ldd	r24, Y+61	; 0x3d
    171c:	9e ad       	ldd	r25, Y+62	; 0x3e
    171e:	9a af       	std	Y+58, r25	; 0x3a
    1720:	89 af       	std	Y+57, r24	; 0x39
    1722:	89 ad       	ldd	r24, Y+57	; 0x39
    1724:	9a ad       	ldd	r25, Y+58	; 0x3a
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <LCD_SendCommand+0x4a6>
    172a:	9a af       	std	Y+58, r25	; 0x3a
    172c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	62 e0       	ldi	r22, 0x02	; 2
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	a0 e8       	ldi	r26, 0x80	; 128
    173e:	bf e3       	ldi	r27, 0x3F	; 63
    1740:	8d ab       	std	Y+53, r24	; 0x35
    1742:	9e ab       	std	Y+54, r25	; 0x36
    1744:	af ab       	std	Y+55, r26	; 0x37
    1746:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1748:	6d a9       	ldd	r22, Y+53	; 0x35
    174a:	7e a9       	ldd	r23, Y+54	; 0x36
    174c:	8f a9       	ldd	r24, Y+55	; 0x37
    174e:	98 ad       	ldd	r25, Y+56	; 0x38
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	4a e7       	ldi	r20, 0x7A	; 122
    1756:	55 e4       	ldi	r21, 0x45	; 69
    1758:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	89 ab       	std	Y+49, r24	; 0x31
    1762:	9a ab       	std	Y+50, r25	; 0x32
    1764:	ab ab       	std	Y+51, r26	; 0x33
    1766:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1768:	69 a9       	ldd	r22, Y+49	; 0x31
    176a:	7a a9       	ldd	r23, Y+50	; 0x32
    176c:	8b a9       	ldd	r24, Y+51	; 0x33
    176e:	9c a9       	ldd	r25, Y+52	; 0x34
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e8       	ldi	r20, 0x80	; 128
    1776:	5f e3       	ldi	r21, 0x3F	; 63
    1778:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    177c:	88 23       	and	r24, r24
    177e:	2c f4       	brge	.+10     	; 0x178a <LCD_SendCommand+0x50a>
		__ticks = 1;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	98 ab       	std	Y+48, r25	; 0x30
    1786:	8f a7       	std	Y+47, r24	; 0x2f
    1788:	3f c0       	rjmp	.+126    	; 0x1808 <LCD_SendCommand+0x588>
	else if (__tmp > 65535)
    178a:	69 a9       	ldd	r22, Y+49	; 0x31
    178c:	7a a9       	ldd	r23, Y+50	; 0x32
    178e:	8b a9       	ldd	r24, Y+51	; 0x33
    1790:	9c a9       	ldd	r25, Y+52	; 0x34
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	3f ef       	ldi	r19, 0xFF	; 255
    1796:	4f e7       	ldi	r20, 0x7F	; 127
    1798:	57 e4       	ldi	r21, 0x47	; 71
    179a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    179e:	18 16       	cp	r1, r24
    17a0:	4c f5       	brge	.+82     	; 0x17f4 <LCD_SendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a2:	6d a9       	ldd	r22, Y+53	; 0x35
    17a4:	7e a9       	ldd	r23, Y+54	; 0x36
    17a6:	8f a9       	ldd	r24, Y+55	; 0x37
    17a8:	98 ad       	ldd	r25, Y+56	; 0x38
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e2       	ldi	r20, 0x20	; 32
    17b0:	51 e4       	ldi	r21, 0x41	; 65
    17b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	bc 01       	movw	r22, r24
    17bc:	cd 01       	movw	r24, r26
    17be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	98 ab       	std	Y+48, r25	; 0x30
    17c8:	8f a7       	std	Y+47, r24	; 0x2f
    17ca:	0f c0       	rjmp	.+30     	; 0x17ea <LCD_SendCommand+0x56a>
    17cc:	80 e9       	ldi	r24, 0x90	; 144
    17ce:	91 e0       	ldi	r25, 0x01	; 1
    17d0:	9e a7       	std	Y+46, r25	; 0x2e
    17d2:	8d a7       	std	Y+45, r24	; 0x2d
    17d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    17d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <LCD_SendCommand+0x558>
    17dc:	9e a7       	std	Y+46, r25	; 0x2e
    17de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e2:	98 a9       	ldd	r25, Y+48	; 0x30
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	98 ab       	std	Y+48, r25	; 0x30
    17e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ec:	98 a9       	ldd	r25, Y+48	; 0x30
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	69 f7       	brne	.-38     	; 0x17cc <LCD_SendCommand+0x54c>
    17f2:	14 c0       	rjmp	.+40     	; 0x181c <LCD_SendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f4:	69 a9       	ldd	r22, Y+49	; 0x31
    17f6:	7a a9       	ldd	r23, Y+50	; 0x32
    17f8:	8b a9       	ldd	r24, Y+51	; 0x33
    17fa:	9c a9       	ldd	r25, Y+52	; 0x34
    17fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	98 ab       	std	Y+48, r25	; 0x30
    1806:	8f a7       	std	Y+47, r24	; 0x2f
    1808:	8f a5       	ldd	r24, Y+47	; 0x2f
    180a:	98 a9       	ldd	r25, Y+48	; 0x30
    180c:	9c a7       	std	Y+44, r25	; 0x2c
    180e:	8b a7       	std	Y+43, r24	; 0x2b
    1810:	8b a5       	ldd	r24, Y+43	; 0x2b
    1812:	9c a5       	ldd	r25, Y+44	; 0x2c
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <LCD_SendCommand+0x594>
    1818:	9c a7       	std	Y+44, r25	; 0x2c
    181a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	62 e0       	ldi	r22, 0x02	; 2
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	a0 e8       	ldi	r26, 0x80	; 128
    182c:	bf e3       	ldi	r27, 0x3F	; 63
    182e:	8f a3       	std	Y+39, r24	; 0x27
    1830:	98 a7       	std	Y+40, r25	; 0x28
    1832:	a9 a7       	std	Y+41, r26	; 0x29
    1834:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1836:	6f a1       	ldd	r22, Y+39	; 0x27
    1838:	78 a5       	ldd	r23, Y+40	; 0x28
    183a:	89 a5       	ldd	r24, Y+41	; 0x29
    183c:	9a a5       	ldd	r25, Y+42	; 0x2a
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	4a e7       	ldi	r20, 0x7A	; 122
    1844:	55 e4       	ldi	r21, 0x45	; 69
    1846:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	8b a3       	std	Y+35, r24	; 0x23
    1850:	9c a3       	std	Y+36, r25	; 0x24
    1852:	ad a3       	std	Y+37, r26	; 0x25
    1854:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1856:	6b a1       	ldd	r22, Y+35	; 0x23
    1858:	7c a1       	ldd	r23, Y+36	; 0x24
    185a:	8d a1       	ldd	r24, Y+37	; 0x25
    185c:	9e a1       	ldd	r25, Y+38	; 0x26
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e8       	ldi	r20, 0x80	; 128
    1864:	5f e3       	ldi	r21, 0x3F	; 63
    1866:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    186a:	88 23       	and	r24, r24
    186c:	2c f4       	brge	.+10     	; 0x1878 <LCD_SendCommand+0x5f8>
		__ticks = 1;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9a a3       	std	Y+34, r25	; 0x22
    1874:	89 a3       	std	Y+33, r24	; 0x21
    1876:	3f c0       	rjmp	.+126    	; 0x18f6 <LCD_SendCommand+0x676>
	else if (__tmp > 65535)
    1878:	6b a1       	ldd	r22, Y+35	; 0x23
    187a:	7c a1       	ldd	r23, Y+36	; 0x24
    187c:	8d a1       	ldd	r24, Y+37	; 0x25
    187e:	9e a1       	ldd	r25, Y+38	; 0x26
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	3f ef       	ldi	r19, 0xFF	; 255
    1884:	4f e7       	ldi	r20, 0x7F	; 127
    1886:	57 e4       	ldi	r21, 0x47	; 71
    1888:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    188c:	18 16       	cp	r1, r24
    188e:	4c f5       	brge	.+82     	; 0x18e2 <LCD_SendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1890:	6f a1       	ldd	r22, Y+39	; 0x27
    1892:	78 a5       	ldd	r23, Y+40	; 0x28
    1894:	89 a5       	ldd	r24, Y+41	; 0x29
    1896:	9a a5       	ldd	r25, Y+42	; 0x2a
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e2       	ldi	r20, 0x20	; 32
    189e:	51 e4       	ldi	r21, 0x41	; 65
    18a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	9a a3       	std	Y+34, r25	; 0x22
    18b6:	89 a3       	std	Y+33, r24	; 0x21
    18b8:	0f c0       	rjmp	.+30     	; 0x18d8 <LCD_SendCommand+0x658>
    18ba:	80 e9       	ldi	r24, 0x90	; 144
    18bc:	91 e0       	ldi	r25, 0x01	; 1
    18be:	98 a3       	std	Y+32, r25	; 0x20
    18c0:	8f 8f       	std	Y+31, r24	; 0x1f
    18c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18c4:	98 a1       	ldd	r25, Y+32	; 0x20
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <LCD_SendCommand+0x646>
    18ca:	98 a3       	std	Y+32, r25	; 0x20
    18cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ce:	89 a1       	ldd	r24, Y+33	; 0x21
    18d0:	9a a1       	ldd	r25, Y+34	; 0x22
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	9a a3       	std	Y+34, r25	; 0x22
    18d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d8:	89 a1       	ldd	r24, Y+33	; 0x21
    18da:	9a a1       	ldd	r25, Y+34	; 0x22
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	69 f7       	brne	.-38     	; 0x18ba <LCD_SendCommand+0x63a>
    18e0:	14 c0       	rjmp	.+40     	; 0x190a <LCD_SendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e2:	6b a1       	ldd	r22, Y+35	; 0x23
    18e4:	7c a1       	ldd	r23, Y+36	; 0x24
    18e6:	8d a1       	ldd	r24, Y+37	; 0x25
    18e8:	9e a1       	ldd	r25, Y+38	; 0x26
    18ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	9a a3       	std	Y+34, r25	; 0x22
    18f4:	89 a3       	std	Y+33, r24	; 0x21
    18f6:	89 a1       	ldd	r24, Y+33	; 0x21
    18f8:	9a a1       	ldd	r25, Y+34	; 0x22
    18fa:	9e 8f       	std	Y+30, r25	; 0x1e
    18fc:	8d 8f       	std	Y+29, r24	; 0x1d
    18fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1900:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	f1 f7       	brne	.-4      	; 0x1902 <LCD_SendCommand+0x682>
    1906:	9e 8f       	std	Y+30, r25	; 0x1e
    1908:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    190a:	fe 01       	movw	r30, r28
    190c:	ed 59       	subi	r30, 0x9D	; 157
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	80 81       	ld	r24, Z
    1912:	98 2f       	mov	r25, r24
    1914:	91 70       	andi	r25, 0x01	; 1
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	63 e0       	ldi	r22, 0x03	; 3
    191a:	49 2f       	mov	r20, r25
    191c:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1920:	fe 01       	movw	r30, r28
    1922:	ed 59       	subi	r30, 0x9D	; 157
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	80 81       	ld	r24, Z
    1928:	88 2f       	mov	r24, r24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	82 70       	andi	r24, 0x02	; 2
    192e:	90 70       	andi	r25, 0x00	; 0
    1930:	95 95       	asr	r25
    1932:	87 95       	ror	r24
    1934:	98 2f       	mov	r25, r24
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	64 e0       	ldi	r22, 0x04	; 4
    193a:	49 2f       	mov	r20, r25
    193c:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1940:	fe 01       	movw	r30, r28
    1942:	ed 59       	subi	r30, 0x9D	; 157
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 81       	ld	r24, Z
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	84 70       	andi	r24, 0x04	; 4
    194e:	90 70       	andi	r25, 0x00	; 0
    1950:	95 95       	asr	r25
    1952:	87 95       	ror	r24
    1954:	95 95       	asr	r25
    1956:	87 95       	ror	r24
    1958:	98 2f       	mov	r25, r24
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	65 e0       	ldi	r22, 0x05	; 5
    195e:	49 2f       	mov	r20, r25
    1960:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1964:	fe 01       	movw	r30, r28
    1966:	ed 59       	subi	r30, 0x9D	; 157
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	80 81       	ld	r24, Z
    196c:	88 2f       	mov	r24, r24
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	88 70       	andi	r24, 0x08	; 8
    1972:	90 70       	andi	r25, 0x00	; 0
    1974:	95 95       	asr	r25
    1976:	87 95       	ror	r24
    1978:	95 95       	asr	r25
    197a:	87 95       	ror	r24
    197c:	95 95       	asr	r25
    197e:	87 95       	ror	r24
    1980:	98 2f       	mov	r25, r24
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	66 e0       	ldi	r22, 0x06	; 6
    1986:	49 2f       	mov	r20, r25
    1988:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	a0 e8       	ldi	r26, 0x80	; 128
    1992:	bf e3       	ldi	r27, 0x3F	; 63
    1994:	89 8f       	std	Y+25, r24	; 0x19
    1996:	9a 8f       	std	Y+26, r25	; 0x1a
    1998:	ab 8f       	std	Y+27, r26	; 0x1b
    199a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199c:	69 8d       	ldd	r22, Y+25	; 0x19
    199e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	4a e7       	ldi	r20, 0x7A	; 122
    19aa:	55 e4       	ldi	r21, 0x45	; 69
    19ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	8d 8b       	std	Y+21, r24	; 0x15
    19b6:	9e 8b       	std	Y+22, r25	; 0x16
    19b8:	af 8b       	std	Y+23, r26	; 0x17
    19ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19bc:	6d 89       	ldd	r22, Y+21	; 0x15
    19be:	7e 89       	ldd	r23, Y+22	; 0x16
    19c0:	8f 89       	ldd	r24, Y+23	; 0x17
    19c2:	98 8d       	ldd	r25, Y+24	; 0x18
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e8       	ldi	r20, 0x80	; 128
    19ca:	5f e3       	ldi	r21, 0x3F	; 63
    19cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19d0:	88 23       	and	r24, r24
    19d2:	2c f4       	brge	.+10     	; 0x19de <LCD_SendCommand+0x75e>
		__ticks = 1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9c 8b       	std	Y+20, r25	; 0x14
    19da:	8b 8b       	std	Y+19, r24	; 0x13
    19dc:	3f c0       	rjmp	.+126    	; 0x1a5c <LCD_SendCommand+0x7dc>
	else if (__tmp > 65535)
    19de:	6d 89       	ldd	r22, Y+21	; 0x15
    19e0:	7e 89       	ldd	r23, Y+22	; 0x16
    19e2:	8f 89       	ldd	r24, Y+23	; 0x17
    19e4:	98 8d       	ldd	r25, Y+24	; 0x18
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	3f ef       	ldi	r19, 0xFF	; 255
    19ea:	4f e7       	ldi	r20, 0x7F	; 127
    19ec:	57 e4       	ldi	r21, 0x47	; 71
    19ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19f2:	18 16       	cp	r1, r24
    19f4:	4c f5       	brge	.+82     	; 0x1a48 <LCD_SendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f6:	69 8d       	ldd	r22, Y+25	; 0x19
    19f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e2       	ldi	r20, 0x20	; 32
    1a04:	51 e4       	ldi	r21, 0x41	; 65
    1a06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	bc 01       	movw	r22, r24
    1a10:	cd 01       	movw	r24, r26
    1a12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	9c 8b       	std	Y+20, r25	; 0x14
    1a1c:	8b 8b       	std	Y+19, r24	; 0x13
    1a1e:	0f c0       	rjmp	.+30     	; 0x1a3e <LCD_SendCommand+0x7be>
    1a20:	80 e9       	ldi	r24, 0x90	; 144
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	9a 8b       	std	Y+18, r25	; 0x12
    1a26:	89 8b       	std	Y+17, r24	; 0x11
    1a28:	89 89       	ldd	r24, Y+17	; 0x11
    1a2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <LCD_SendCommand+0x7ac>
    1a30:	9a 8b       	std	Y+18, r25	; 0x12
    1a32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a34:	8b 89       	ldd	r24, Y+19	; 0x13
    1a36:	9c 89       	ldd	r25, Y+20	; 0x14
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	9c 8b       	std	Y+20, r25	; 0x14
    1a3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a40:	9c 89       	ldd	r25, Y+20	; 0x14
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	69 f7       	brne	.-38     	; 0x1a20 <LCD_SendCommand+0x7a0>
    1a46:	14 c0       	rjmp	.+40     	; 0x1a70 <LCD_SendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a48:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	9c 8b       	std	Y+20, r25	; 0x14
    1a5a:	8b 8b       	std	Y+19, r24	; 0x13
    1a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a60:	98 8b       	std	Y+16, r25	; 0x10
    1a62:	8f 87       	std	Y+15, r24	; 0x0f
    1a64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a66:	98 89       	ldd	r25, Y+16	; 0x10
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <LCD_SendCommand+0x7e8>
    1a6c:	98 8b       	std	Y+16, r25	; 0x10
    1a6e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	62 e0       	ldi	r22, 0x02	; 2
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a0 e8       	ldi	r26, 0x80	; 128
    1a80:	bf e3       	ldi	r27, 0x3F	; 63
    1a82:	8b 87       	std	Y+11, r24	; 0x0b
    1a84:	9c 87       	std	Y+12, r25	; 0x0c
    1a86:	ad 87       	std	Y+13, r26	; 0x0d
    1a88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	4a e7       	ldi	r20, 0x7A	; 122
    1a98:	55 e4       	ldi	r21, 0x45	; 69
    1a9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	8f 83       	std	Y+7, r24	; 0x07
    1aa4:	98 87       	std	Y+8, r25	; 0x08
    1aa6:	a9 87       	std	Y+9, r26	; 0x09
    1aa8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1aac:	78 85       	ldd	r23, Y+8	; 0x08
    1aae:	89 85       	ldd	r24, Y+9	; 0x09
    1ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e8       	ldi	r20, 0x80	; 128
    1ab8:	5f e3       	ldi	r21, 0x3F	; 63
    1aba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1abe:	88 23       	and	r24, r24
    1ac0:	2c f4       	brge	.+10     	; 0x1acc <LCD_SendCommand+0x84c>
		__ticks = 1;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9e 83       	std	Y+6, r25	; 0x06
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
    1aca:	3f c0       	rjmp	.+126    	; 0x1b4a <LCD_SendCommand+0x8ca>
	else if (__tmp > 65535)
    1acc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ace:	78 85       	ldd	r23, Y+8	; 0x08
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	3f ef       	ldi	r19, 0xFF	; 255
    1ad8:	4f e7       	ldi	r20, 0x7F	; 127
    1ada:	57 e4       	ldi	r21, 0x47	; 71
    1adc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ae0:	18 16       	cp	r1, r24
    1ae2:	4c f5       	brge	.+82     	; 0x1b36 <LCD_SendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e2       	ldi	r20, 0x20	; 32
    1af2:	51 e4       	ldi	r21, 0x41	; 65
    1af4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	bc 01       	movw	r22, r24
    1afe:	cd 01       	movw	r24, r26
    1b00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	9e 83       	std	Y+6, r25	; 0x06
    1b0a:	8d 83       	std	Y+5, r24	; 0x05
    1b0c:	0f c0       	rjmp	.+30     	; 0x1b2c <LCD_SendCommand+0x8ac>
    1b0e:	80 e9       	ldi	r24, 0x90	; 144
    1b10:	91 e0       	ldi	r25, 0x01	; 1
    1b12:	9c 83       	std	Y+4, r25	; 0x04
    1b14:	8b 83       	std	Y+3, r24	; 0x03
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <LCD_SendCommand+0x89a>
    1b1e:	9c 83       	std	Y+4, r25	; 0x04
    1b20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	9e 83       	std	Y+6, r25	; 0x06
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	69 f7       	brne	.-38     	; 0x1b0e <LCD_SendCommand+0x88e>
    1b34:	14 c0       	rjmp	.+40     	; 0x1b5e <LCD_SendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b36:	6f 81       	ldd	r22, Y+7	; 0x07
    1b38:	78 85       	ldd	r23, Y+8	; 0x08
    1b3a:	89 85       	ldd	r24, Y+9	; 0x09
    1b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	9e 83       	std	Y+6, r25	; 0x06
    1b48:	8d 83       	std	Y+5, r24	; 0x05
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <LCD_SendCommand+0x8d6>
    1b5a:	9a 83       	std	Y+2, r25	; 0x02
    1b5c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	/*delay 1u*/
	_delay_ms(1);
#endif

}
    1b5e:	cd 59       	subi	r28, 0x9D	; 157
    1b60:	df 4f       	sbci	r29, 0xFF	; 255
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	1f 91       	pop	r17
    1b72:	0f 91       	pop	r16
    1b74:	08 95       	ret

00001b76 <LCD_display_Character>:

void LCD_display_Character (uint8 character)
{
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	c3 56       	subi	r28, 0x63	; 99
    1b84:	d0 40       	sbci	r29, 0x00	; 0
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	fe 01       	movw	r30, r28
    1b92:	ed 59       	subi	r30, 0x9D	; 157
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	80 83       	st	Z, r24
	/*RS=1*/
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	61 e0       	ldi	r22, 0x01	; 1
    1b9c:	41 e0       	ldi	r20, 0x01	; 1
    1b9e:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	e1 5a       	subi	r30, 0xA1	; 161
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 e8       	ldi	r26, 0x80	; 128
    1bae:	bf e3       	ldi	r27, 0x3F	; 63
    1bb0:	80 83       	st	Z, r24
    1bb2:	91 83       	std	Z+1, r25	; 0x01
    1bb4:	a2 83       	std	Z+2, r26	; 0x02
    1bb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb8:	8e 01       	movw	r16, r28
    1bba:	05 5a       	subi	r16, 0xA5	; 165
    1bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e1 5a       	subi	r30, 0xA1	; 161
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	60 81       	ld	r22, Z
    1bc6:	71 81       	ldd	r23, Z+1	; 0x01
    1bc8:	82 81       	ldd	r24, Z+2	; 0x02
    1bca:	93 81       	ldd	r25, Z+3	; 0x03
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	4a e7       	ldi	r20, 0x7A	; 122
    1bd2:	55 e4       	ldi	r21, 0x45	; 69
    1bd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	f8 01       	movw	r30, r16
    1bde:	80 83       	st	Z, r24
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	a2 83       	std	Z+2, r26	; 0x02
    1be4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1be6:	fe 01       	movw	r30, r28
    1be8:	e5 5a       	subi	r30, 0xA5	; 165
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	44 f4       	brge	.+16     	; 0x1c14 <LCD_display_Character+0x9e>
		__ticks = 1;
    1c04:	fe 01       	movw	r30, r28
    1c06:	e7 5a       	subi	r30, 0xA7	; 167
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	91 83       	std	Z+1, r25	; 0x01
    1c10:	80 83       	st	Z, r24
    1c12:	64 c0       	rjmp	.+200    	; 0x1cdc <LCD_display_Character+0x166>
	else if (__tmp > 65535)
    1c14:	fe 01       	movw	r30, r28
    1c16:	e5 5a       	subi	r30, 0xA5	; 165
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	60 81       	ld	r22, Z
    1c1c:	71 81       	ldd	r23, Z+1	; 0x01
    1c1e:	82 81       	ldd	r24, Z+2	; 0x02
    1c20:	93 81       	ldd	r25, Z+3	; 0x03
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	3f ef       	ldi	r19, 0xFF	; 255
    1c26:	4f e7       	ldi	r20, 0x7F	; 127
    1c28:	57 e4       	ldi	r21, 0x47	; 71
    1c2a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c2e:	18 16       	cp	r1, r24
    1c30:	0c f0       	brlt	.+2      	; 0x1c34 <LCD_display_Character+0xbe>
    1c32:	43 c0       	rjmp	.+134    	; 0x1cba <LCD_display_Character+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c34:	fe 01       	movw	r30, r28
    1c36:	e1 5a       	subi	r30, 0xA1	; 161
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	60 81       	ld	r22, Z
    1c3c:	71 81       	ldd	r23, Z+1	; 0x01
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e2       	ldi	r20, 0x20	; 32
    1c48:	51 e4       	ldi	r21, 0x41	; 65
    1c4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	8e 01       	movw	r16, r28
    1c54:	07 5a       	subi	r16, 0xA7	; 167
    1c56:	1f 4f       	sbci	r17, 0xFF	; 255
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	f8 01       	movw	r30, r16
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
    1c6a:	1f c0       	rjmp	.+62     	; 0x1caa <LCD_display_Character+0x134>
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e9 5a       	subi	r30, 0xA9	; 169
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 e9       	ldi	r24, 0x90	; 144
    1c74:	91 e0       	ldi	r25, 0x01	; 1
    1c76:	91 83       	std	Z+1, r25	; 0x01
    1c78:	80 83       	st	Z, r24
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e9 5a       	subi	r30, 0xA9	; 169
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	80 81       	ld	r24, Z
    1c82:	91 81       	ldd	r25, Z+1	; 0x01
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <LCD_display_Character+0x10e>
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e9 5a       	subi	r30, 0xA9	; 169
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c92:	de 01       	movw	r26, r28
    1c94:	a7 5a       	subi	r26, 0xA7	; 167
    1c96:	bf 4f       	sbci	r27, 0xFF	; 255
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e7 5a       	subi	r30, 0xA7	; 167
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	11 96       	adiw	r26, 0x01	; 1
    1ca6:	9c 93       	st	X, r25
    1ca8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1caa:	fe 01       	movw	r30, r28
    1cac:	e7 5a       	subi	r30, 0xA7	; 167
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	80 81       	ld	r24, Z
    1cb2:	91 81       	ldd	r25, Z+1	; 0x01
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	d1 f6       	brne	.-76     	; 0x1c6c <LCD_display_Character+0xf6>
    1cb8:	27 c0       	rjmp	.+78     	; 0x1d08 <LCD_display_Character+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cba:	8e 01       	movw	r16, r28
    1cbc:	07 5a       	subi	r16, 0xA7	; 167
    1cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e5 5a       	subi	r30, 0xA5	; 165
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	60 81       	ld	r22, Z
    1cc8:	71 81       	ldd	r23, Z+1	; 0x01
    1cca:	82 81       	ldd	r24, Z+2	; 0x02
    1ccc:	93 81       	ldd	r25, Z+3	; 0x03
    1cce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	80 83       	st	Z, r24
    1cdc:	de 01       	movw	r26, r28
    1cde:	ab 5a       	subi	r26, 0xAB	; 171
    1ce0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e7 5a       	subi	r30, 0xA7	; 167
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	80 81       	ld	r24, Z
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
    1cec:	8d 93       	st	X+, r24
    1cee:	9c 93       	st	X, r25
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	eb 5a       	subi	r30, 0xAB	; 171
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	80 81       	ld	r24, Z
    1cf8:	91 81       	ldd	r25, Z+1	; 0x01
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <LCD_display_Character+0x184>
    1cfe:	fe 01       	movw	r30, r28
    1d00:	eb 5a       	subi	r30, 0xAB	; 171
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	91 83       	std	Z+1, r25	; 0x01
    1d06:	80 83       	st	Z, r24
	/*delay 1u*/
	_delay_ms(1);

	/*enable =1*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	62 e0       	ldi	r22, 0x02	; 2
    1d0c:	41 e0       	ldi	r20, 0x01	; 1
    1d0e:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
    1d12:	fe 01       	movw	r30, r28
    1d14:	ef 5a       	subi	r30, 0xAF	; 175
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	a0 e8       	ldi	r26, 0x80	; 128
    1d1e:	bf e3       	ldi	r27, 0x3F	; 63
    1d20:	80 83       	st	Z, r24
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	a2 83       	std	Z+2, r26	; 0x02
    1d26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d28:	8e 01       	movw	r16, r28
    1d2a:	03 5b       	subi	r16, 0xB3	; 179
    1d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2e:	fe 01       	movw	r30, r28
    1d30:	ef 5a       	subi	r30, 0xAF	; 175
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	60 81       	ld	r22, Z
    1d36:	71 81       	ldd	r23, Z+1	; 0x01
    1d38:	82 81       	ldd	r24, Z+2	; 0x02
    1d3a:	93 81       	ldd	r25, Z+3	; 0x03
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	4a e7       	ldi	r20, 0x7A	; 122
    1d42:	55 e4       	ldi	r21, 0x45	; 69
    1d44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	f8 01       	movw	r30, r16
    1d4e:	80 83       	st	Z, r24
    1d50:	91 83       	std	Z+1, r25	; 0x01
    1d52:	a2 83       	std	Z+2, r26	; 0x02
    1d54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d56:	fe 01       	movw	r30, r28
    1d58:	e3 5b       	subi	r30, 0xB3	; 179
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	60 81       	ld	r22, Z
    1d5e:	71 81       	ldd	r23, Z+1	; 0x01
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e8       	ldi	r20, 0x80	; 128
    1d6a:	5f e3       	ldi	r21, 0x3F	; 63
    1d6c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d70:	88 23       	and	r24, r24
    1d72:	44 f4       	brge	.+16     	; 0x1d84 <LCD_display_Character+0x20e>
		__ticks = 1;
    1d74:	fe 01       	movw	r30, r28
    1d76:	e5 5b       	subi	r30, 0xB5	; 181
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	91 83       	std	Z+1, r25	; 0x01
    1d80:	80 83       	st	Z, r24
    1d82:	64 c0       	rjmp	.+200    	; 0x1e4c <LCD_display_Character+0x2d6>
	else if (__tmp > 65535)
    1d84:	fe 01       	movw	r30, r28
    1d86:	e3 5b       	subi	r30, 0xB3	; 179
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	60 81       	ld	r22, Z
    1d8c:	71 81       	ldd	r23, Z+1	; 0x01
    1d8e:	82 81       	ldd	r24, Z+2	; 0x02
    1d90:	93 81       	ldd	r25, Z+3	; 0x03
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	3f ef       	ldi	r19, 0xFF	; 255
    1d96:	4f e7       	ldi	r20, 0x7F	; 127
    1d98:	57 e4       	ldi	r21, 0x47	; 71
    1d9a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d9e:	18 16       	cp	r1, r24
    1da0:	0c f0       	brlt	.+2      	; 0x1da4 <LCD_display_Character+0x22e>
    1da2:	43 c0       	rjmp	.+134    	; 0x1e2a <LCD_display_Character+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da4:	fe 01       	movw	r30, r28
    1da6:	ef 5a       	subi	r30, 0xAF	; 175
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	60 81       	ld	r22, Z
    1dac:	71 81       	ldd	r23, Z+1	; 0x01
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	93 81       	ldd	r25, Z+3	; 0x03
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e2       	ldi	r20, 0x20	; 32
    1db8:	51 e4       	ldi	r21, 0x41	; 65
    1dba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	8e 01       	movw	r16, r28
    1dc4:	05 5b       	subi	r16, 0xB5	; 181
    1dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc8:	bc 01       	movw	r22, r24
    1dca:	cd 01       	movw	r24, r26
    1dcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	91 83       	std	Z+1, r25	; 0x01
    1dd8:	80 83       	st	Z, r24
    1dda:	1f c0       	rjmp	.+62     	; 0x1e1a <LCD_display_Character+0x2a4>
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e7 5b       	subi	r30, 0xB7	; 183
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	80 e9       	ldi	r24, 0x90	; 144
    1de4:	91 e0       	ldi	r25, 0x01	; 1
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	80 83       	st	Z, r24
    1dea:	fe 01       	movw	r30, r28
    1dec:	e7 5b       	subi	r30, 0xB7	; 183
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	80 81       	ld	r24, Z
    1df2:	91 81       	ldd	r25, Z+1	; 0x01
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_display_Character+0x27e>
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e7 5b       	subi	r30, 0xB7	; 183
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e02:	de 01       	movw	r26, r28
    1e04:	a5 5b       	subi	r26, 0xB5	; 181
    1e06:	bf 4f       	sbci	r27, 0xFF	; 255
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e5 5b       	subi	r30, 0xB5	; 181
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 81       	ld	r24, Z
    1e10:	91 81       	ldd	r25, Z+1	; 0x01
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	11 96       	adiw	r26, 0x01	; 1
    1e16:	9c 93       	st	X, r25
    1e18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e5 5b       	subi	r30, 0xB5	; 181
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	d1 f6       	brne	.-76     	; 0x1ddc <LCD_display_Character+0x266>
    1e28:	27 c0       	rjmp	.+78     	; 0x1e78 <LCD_display_Character+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2a:	8e 01       	movw	r16, r28
    1e2c:	05 5b       	subi	r16, 0xB5	; 181
    1e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e30:	fe 01       	movw	r30, r28
    1e32:	e3 5b       	subi	r30, 0xB3	; 179
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	60 81       	ld	r22, Z
    1e38:	71 81       	ldd	r23, Z+1	; 0x01
    1e3a:	82 81       	ldd	r24, Z+2	; 0x02
    1e3c:	93 81       	ldd	r25, Z+3	; 0x03
    1e3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	f8 01       	movw	r30, r16
    1e48:	91 83       	std	Z+1, r25	; 0x01
    1e4a:	80 83       	st	Z, r24
    1e4c:	de 01       	movw	r26, r28
    1e4e:	a9 5b       	subi	r26, 0xB9	; 185
    1e50:	bf 4f       	sbci	r27, 0xFF	; 255
    1e52:	fe 01       	movw	r30, r28
    1e54:	e5 5b       	subi	r30, 0xB5	; 181
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	8d 93       	st	X+, r24
    1e5e:	9c 93       	st	X, r25
    1e60:	fe 01       	movw	r30, r28
    1e62:	e9 5b       	subi	r30, 0xB9	; 185
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 81       	ld	r24, Z
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <LCD_display_Character+0x2f4>
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e9 5b       	subi	r30, 0xB9	; 185
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	80 83       	st	Z, r24
	/*delay 1u*/
	_delay_ms(1);

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(character,4));
    1e78:	fe 01       	movw	r30, r28
    1e7a:	ed 59       	subi	r30, 0x9D	; 157
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 2f       	mov	r24, r24
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	80 71       	andi	r24, 0x10	; 16
    1e86:	90 70       	andi	r25, 0x00	; 0
    1e88:	95 95       	asr	r25
    1e8a:	87 95       	ror	r24
    1e8c:	95 95       	asr	r25
    1e8e:	87 95       	ror	r24
    1e90:	95 95       	asr	r25
    1e92:	87 95       	ror	r24
    1e94:	95 95       	asr	r25
    1e96:	87 95       	ror	r24
    1e98:	98 2f       	mov	r25, r24
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	63 e0       	ldi	r22, 0x03	; 3
    1e9e:	49 2f       	mov	r20, r25
    1ea0:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(character,5));
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ed 59       	subi	r30, 0x9D	; 157
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	80 81       	ld	r24, Z
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	80 72       	andi	r24, 0x20	; 32
    1eb2:	90 70       	andi	r25, 0x00	; 0
    1eb4:	95 95       	asr	r25
    1eb6:	87 95       	ror	r24
    1eb8:	95 95       	asr	r25
    1eba:	87 95       	ror	r24
    1ebc:	95 95       	asr	r25
    1ebe:	87 95       	ror	r24
    1ec0:	95 95       	asr	r25
    1ec2:	87 95       	ror	r24
    1ec4:	95 95       	asr	r25
    1ec6:	87 95       	ror	r24
    1ec8:	98 2f       	mov	r25, r24
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	64 e0       	ldi	r22, 0x04	; 4
    1ece:	49 2f       	mov	r20, r25
    1ed0:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(character,6));
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	ed 59       	subi	r30, 0x9D	; 157
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	80 81       	ld	r24, Z
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	80 74       	andi	r24, 0x40	; 64
    1ee2:	90 70       	andi	r25, 0x00	; 0
    1ee4:	08 2e       	mov	r0, r24
    1ee6:	89 2f       	mov	r24, r25
    1ee8:	00 0c       	add	r0, r0
    1eea:	88 1f       	adc	r24, r24
    1eec:	99 0b       	sbc	r25, r25
    1eee:	00 0c       	add	r0, r0
    1ef0:	88 1f       	adc	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	98 2f       	mov	r25, r24
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	65 e0       	ldi	r22, 0x05	; 5
    1efa:	49 2f       	mov	r20, r25
    1efc:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(character,7));
    1f00:	fe 01       	movw	r30, r28
    1f02:	ed 59       	subi	r30, 0x9D	; 157
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	80 81       	ld	r24, Z
    1f08:	98 2f       	mov	r25, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	99 27       	eor	r25, r25
    1f0e:	99 1f       	adc	r25, r25
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	66 e0       	ldi	r22, 0x06	; 6
    1f14:	49 2f       	mov	r20, r25
    1f16:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	ed 5b       	subi	r30, 0xBD	; 189
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	a0 e8       	ldi	r26, 0x80	; 128
    1f26:	bf e3       	ldi	r27, 0x3F	; 63
    1f28:	80 83       	st	Z, r24
    1f2a:	91 83       	std	Z+1, r25	; 0x01
    1f2c:	a2 83       	std	Z+2, r26	; 0x02
    1f2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f30:	8e 01       	movw	r16, r28
    1f32:	01 5c       	subi	r16, 0xC1	; 193
    1f34:	1f 4f       	sbci	r17, 0xFF	; 255
    1f36:	fe 01       	movw	r30, r28
    1f38:	ed 5b       	subi	r30, 0xBD	; 189
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	60 81       	ld	r22, Z
    1f3e:	71 81       	ldd	r23, Z+1	; 0x01
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	93 81       	ldd	r25, Z+3	; 0x03
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	4a e7       	ldi	r20, 0x7A	; 122
    1f4a:	55 e4       	ldi	r21, 0x45	; 69
    1f4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	f8 01       	movw	r30, r16
    1f56:	80 83       	st	Z, r24
    1f58:	91 83       	std	Z+1, r25	; 0x01
    1f5a:	a2 83       	std	Z+2, r26	; 0x02
    1f5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f5e:	fe 01       	movw	r30, r28
    1f60:	ff 96       	adiw	r30, 0x3f	; 63
    1f62:	60 81       	ld	r22, Z
    1f64:	71 81       	ldd	r23, Z+1	; 0x01
    1f66:	82 81       	ldd	r24, Z+2	; 0x02
    1f68:	93 81       	ldd	r25, Z+3	; 0x03
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e8       	ldi	r20, 0x80	; 128
    1f70:	5f e3       	ldi	r21, 0x3F	; 63
    1f72:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f76:	88 23       	and	r24, r24
    1f78:	2c f4       	brge	.+10     	; 0x1f84 <LCD_display_Character+0x40e>
		__ticks = 1;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9e af       	std	Y+62, r25	; 0x3e
    1f80:	8d af       	std	Y+61, r24	; 0x3d
    1f82:	46 c0       	rjmp	.+140    	; 0x2010 <LCD_display_Character+0x49a>
	else if (__tmp > 65535)
    1f84:	fe 01       	movw	r30, r28
    1f86:	ff 96       	adiw	r30, 0x3f	; 63
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	3f ef       	ldi	r19, 0xFF	; 255
    1f94:	4f e7       	ldi	r20, 0x7F	; 127
    1f96:	57 e4       	ldi	r21, 0x47	; 71
    1f98:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f9c:	18 16       	cp	r1, r24
    1f9e:	64 f5       	brge	.+88     	; 0x1ff8 <LCD_display_Character+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	ed 5b       	subi	r30, 0xBD	; 189
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	60 81       	ld	r22, Z
    1fa8:	71 81       	ldd	r23, Z+1	; 0x01
    1faa:	82 81       	ldd	r24, Z+2	; 0x02
    1fac:	93 81       	ldd	r25, Z+3	; 0x03
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e2       	ldi	r20, 0x20	; 32
    1fb4:	51 e4       	ldi	r21, 0x41	; 65
    1fb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9e af       	std	Y+62, r25	; 0x3e
    1fcc:	8d af       	std	Y+61, r24	; 0x3d
    1fce:	0f c0       	rjmp	.+30     	; 0x1fee <LCD_display_Character+0x478>
    1fd0:	80 e9       	ldi	r24, 0x90	; 144
    1fd2:	91 e0       	ldi	r25, 0x01	; 1
    1fd4:	9c af       	std	Y+60, r25	; 0x3c
    1fd6:	8b af       	std	Y+59, r24	; 0x3b
    1fd8:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fda:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <LCD_display_Character+0x466>
    1fe0:	9c af       	std	Y+60, r25	; 0x3c
    1fe2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fe6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	9e af       	std	Y+62, r25	; 0x3e
    1fec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fee:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ff0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	69 f7       	brne	.-38     	; 0x1fd0 <LCD_display_Character+0x45a>
    1ff6:	16 c0       	rjmp	.+44     	; 0x2024 <LCD_display_Character+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	ff 96       	adiw	r30, 0x3f	; 63
    1ffc:	60 81       	ld	r22, Z
    1ffe:	71 81       	ldd	r23, Z+1	; 0x01
    2000:	82 81       	ldd	r24, Z+2	; 0x02
    2002:	93 81       	ldd	r25, Z+3	; 0x03
    2004:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9e af       	std	Y+62, r25	; 0x3e
    200e:	8d af       	std	Y+61, r24	; 0x3d
    2010:	8d ad       	ldd	r24, Y+61	; 0x3d
    2012:	9e ad       	ldd	r25, Y+62	; 0x3e
    2014:	9a af       	std	Y+58, r25	; 0x3a
    2016:	89 af       	std	Y+57, r24	; 0x39
    2018:	89 ad       	ldd	r24, Y+57	; 0x39
    201a:	9a ad       	ldd	r25, Y+58	; 0x3a
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <LCD_display_Character+0x4a6>
    2020:	9a af       	std	Y+58, r25	; 0x3a
    2022:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	62 e0       	ldi	r22, 0x02	; 2
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a0 e8       	ldi	r26, 0x80	; 128
    2034:	bf e3       	ldi	r27, 0x3F	; 63
    2036:	8d ab       	std	Y+53, r24	; 0x35
    2038:	9e ab       	std	Y+54, r25	; 0x36
    203a:	af ab       	std	Y+55, r26	; 0x37
    203c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203e:	6d a9       	ldd	r22, Y+53	; 0x35
    2040:	7e a9       	ldd	r23, Y+54	; 0x36
    2042:	8f a9       	ldd	r24, Y+55	; 0x37
    2044:	98 ad       	ldd	r25, Y+56	; 0x38
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	4a e7       	ldi	r20, 0x7A	; 122
    204c:	55 e4       	ldi	r21, 0x45	; 69
    204e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	89 ab       	std	Y+49, r24	; 0x31
    2058:	9a ab       	std	Y+50, r25	; 0x32
    205a:	ab ab       	std	Y+51, r26	; 0x33
    205c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    205e:	69 a9       	ldd	r22, Y+49	; 0x31
    2060:	7a a9       	ldd	r23, Y+50	; 0x32
    2062:	8b a9       	ldd	r24, Y+51	; 0x33
    2064:	9c a9       	ldd	r25, Y+52	; 0x34
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e8       	ldi	r20, 0x80	; 128
    206c:	5f e3       	ldi	r21, 0x3F	; 63
    206e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2072:	88 23       	and	r24, r24
    2074:	2c f4       	brge	.+10     	; 0x2080 <LCD_display_Character+0x50a>
		__ticks = 1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	98 ab       	std	Y+48, r25	; 0x30
    207c:	8f a7       	std	Y+47, r24	; 0x2f
    207e:	3f c0       	rjmp	.+126    	; 0x20fe <LCD_display_Character+0x588>
	else if (__tmp > 65535)
    2080:	69 a9       	ldd	r22, Y+49	; 0x31
    2082:	7a a9       	ldd	r23, Y+50	; 0x32
    2084:	8b a9       	ldd	r24, Y+51	; 0x33
    2086:	9c a9       	ldd	r25, Y+52	; 0x34
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	3f ef       	ldi	r19, 0xFF	; 255
    208c:	4f e7       	ldi	r20, 0x7F	; 127
    208e:	57 e4       	ldi	r21, 0x47	; 71
    2090:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2094:	18 16       	cp	r1, r24
    2096:	4c f5       	brge	.+82     	; 0x20ea <LCD_display_Character+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2098:	6d a9       	ldd	r22, Y+53	; 0x35
    209a:	7e a9       	ldd	r23, Y+54	; 0x36
    209c:	8f a9       	ldd	r24, Y+55	; 0x37
    209e:	98 ad       	ldd	r25, Y+56	; 0x38
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e2       	ldi	r20, 0x20	; 32
    20a6:	51 e4       	ldi	r21, 0x41	; 65
    20a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	98 ab       	std	Y+48, r25	; 0x30
    20be:	8f a7       	std	Y+47, r24	; 0x2f
    20c0:	0f c0       	rjmp	.+30     	; 0x20e0 <LCD_display_Character+0x56a>
    20c2:	80 e9       	ldi	r24, 0x90	; 144
    20c4:	91 e0       	ldi	r25, 0x01	; 1
    20c6:	9e a7       	std	Y+46, r25	; 0x2e
    20c8:	8d a7       	std	Y+45, r24	; 0x2d
    20ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    20cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <LCD_display_Character+0x558>
    20d2:	9e a7       	std	Y+46, r25	; 0x2e
    20d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d8:	98 a9       	ldd	r25, Y+48	; 0x30
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	98 ab       	std	Y+48, r25	; 0x30
    20de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20e2:	98 a9       	ldd	r25, Y+48	; 0x30
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	69 f7       	brne	.-38     	; 0x20c2 <LCD_display_Character+0x54c>
    20e8:	14 c0       	rjmp	.+40     	; 0x2112 <LCD_display_Character+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ea:	69 a9       	ldd	r22, Y+49	; 0x31
    20ec:	7a a9       	ldd	r23, Y+50	; 0x32
    20ee:	8b a9       	ldd	r24, Y+51	; 0x33
    20f0:	9c a9       	ldd	r25, Y+52	; 0x34
    20f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	98 ab       	std	Y+48, r25	; 0x30
    20fc:	8f a7       	std	Y+47, r24	; 0x2f
    20fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2100:	98 a9       	ldd	r25, Y+48	; 0x30
    2102:	9c a7       	std	Y+44, r25	; 0x2c
    2104:	8b a7       	std	Y+43, r24	; 0x2b
    2106:	8b a5       	ldd	r24, Y+43	; 0x2b
    2108:	9c a5       	ldd	r25, Y+44	; 0x2c
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <LCD_display_Character+0x594>
    210e:	9c a7       	std	Y+44, r25	; 0x2c
    2110:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	62 e0       	ldi	r22, 0x02	; 2
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	a0 e8       	ldi	r26, 0x80	; 128
    2122:	bf e3       	ldi	r27, 0x3F	; 63
    2124:	8f a3       	std	Y+39, r24	; 0x27
    2126:	98 a7       	std	Y+40, r25	; 0x28
    2128:	a9 a7       	std	Y+41, r26	; 0x29
    212a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212c:	6f a1       	ldd	r22, Y+39	; 0x27
    212e:	78 a5       	ldd	r23, Y+40	; 0x28
    2130:	89 a5       	ldd	r24, Y+41	; 0x29
    2132:	9a a5       	ldd	r25, Y+42	; 0x2a
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	4a e7       	ldi	r20, 0x7A	; 122
    213a:	55 e4       	ldi	r21, 0x45	; 69
    213c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	8b a3       	std	Y+35, r24	; 0x23
    2146:	9c a3       	std	Y+36, r25	; 0x24
    2148:	ad a3       	std	Y+37, r26	; 0x25
    214a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    214c:	6b a1       	ldd	r22, Y+35	; 0x23
    214e:	7c a1       	ldd	r23, Y+36	; 0x24
    2150:	8d a1       	ldd	r24, Y+37	; 0x25
    2152:	9e a1       	ldd	r25, Y+38	; 0x26
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e8       	ldi	r20, 0x80	; 128
    215a:	5f e3       	ldi	r21, 0x3F	; 63
    215c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2160:	88 23       	and	r24, r24
    2162:	2c f4       	brge	.+10     	; 0x216e <LCD_display_Character+0x5f8>
		__ticks = 1;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	9a a3       	std	Y+34, r25	; 0x22
    216a:	89 a3       	std	Y+33, r24	; 0x21
    216c:	3f c0       	rjmp	.+126    	; 0x21ec <LCD_display_Character+0x676>
	else if (__tmp > 65535)
    216e:	6b a1       	ldd	r22, Y+35	; 0x23
    2170:	7c a1       	ldd	r23, Y+36	; 0x24
    2172:	8d a1       	ldd	r24, Y+37	; 0x25
    2174:	9e a1       	ldd	r25, Y+38	; 0x26
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	3f ef       	ldi	r19, 0xFF	; 255
    217a:	4f e7       	ldi	r20, 0x7F	; 127
    217c:	57 e4       	ldi	r21, 0x47	; 71
    217e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2182:	18 16       	cp	r1, r24
    2184:	4c f5       	brge	.+82     	; 0x21d8 <LCD_display_Character+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2186:	6f a1       	ldd	r22, Y+39	; 0x27
    2188:	78 a5       	ldd	r23, Y+40	; 0x28
    218a:	89 a5       	ldd	r24, Y+41	; 0x29
    218c:	9a a5       	ldd	r25, Y+42	; 0x2a
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e2       	ldi	r20, 0x20	; 32
    2194:	51 e4       	ldi	r21, 0x41	; 65
    2196:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	bc 01       	movw	r22, r24
    21a0:	cd 01       	movw	r24, r26
    21a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	9a a3       	std	Y+34, r25	; 0x22
    21ac:	89 a3       	std	Y+33, r24	; 0x21
    21ae:	0f c0       	rjmp	.+30     	; 0x21ce <LCD_display_Character+0x658>
    21b0:	80 e9       	ldi	r24, 0x90	; 144
    21b2:	91 e0       	ldi	r25, 0x01	; 1
    21b4:	98 a3       	std	Y+32, r25	; 0x20
    21b6:	8f 8f       	std	Y+31, r24	; 0x1f
    21b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21ba:	98 a1       	ldd	r25, Y+32	; 0x20
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <LCD_display_Character+0x646>
    21c0:	98 a3       	std	Y+32, r25	; 0x20
    21c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c4:	89 a1       	ldd	r24, Y+33	; 0x21
    21c6:	9a a1       	ldd	r25, Y+34	; 0x22
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	9a a3       	std	Y+34, r25	; 0x22
    21cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ce:	89 a1       	ldd	r24, Y+33	; 0x21
    21d0:	9a a1       	ldd	r25, Y+34	; 0x22
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	69 f7       	brne	.-38     	; 0x21b0 <LCD_display_Character+0x63a>
    21d6:	14 c0       	rjmp	.+40     	; 0x2200 <LCD_display_Character+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d8:	6b a1       	ldd	r22, Y+35	; 0x23
    21da:	7c a1       	ldd	r23, Y+36	; 0x24
    21dc:	8d a1       	ldd	r24, Y+37	; 0x25
    21de:	9e a1       	ldd	r25, Y+38	; 0x26
    21e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	9a a3       	std	Y+34, r25	; 0x22
    21ea:	89 a3       	std	Y+33, r24	; 0x21
    21ec:	89 a1       	ldd	r24, Y+33	; 0x21
    21ee:	9a a1       	ldd	r25, Y+34	; 0x22
    21f0:	9e 8f       	std	Y+30, r25	; 0x1e
    21f2:	8d 8f       	std	Y+29, r24	; 0x1d
    21f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <LCD_display_Character+0x682>
    21fc:	9e 8f       	std	Y+30, r25	; 0x1e
    21fe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(character,0));
    2200:	fe 01       	movw	r30, r28
    2202:	ed 59       	subi	r30, 0x9D	; 157
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 81       	ld	r24, Z
    2208:	98 2f       	mov	r25, r24
    220a:	91 70       	andi	r25, 0x01	; 1
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	63 e0       	ldi	r22, 0x03	; 3
    2210:	49 2f       	mov	r20, r25
    2212:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(character,1));
    2216:	fe 01       	movw	r30, r28
    2218:	ed 59       	subi	r30, 0x9D	; 157
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	80 81       	ld	r24, Z
    221e:	88 2f       	mov	r24, r24
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	82 70       	andi	r24, 0x02	; 2
    2224:	90 70       	andi	r25, 0x00	; 0
    2226:	95 95       	asr	r25
    2228:	87 95       	ror	r24
    222a:	98 2f       	mov	r25, r24
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	64 e0       	ldi	r22, 0x04	; 4
    2230:	49 2f       	mov	r20, r25
    2232:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(character,2));
    2236:	fe 01       	movw	r30, r28
    2238:	ed 59       	subi	r30, 0x9D	; 157
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 81       	ld	r24, Z
    223e:	88 2f       	mov	r24, r24
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	84 70       	andi	r24, 0x04	; 4
    2244:	90 70       	andi	r25, 0x00	; 0
    2246:	95 95       	asr	r25
    2248:	87 95       	ror	r24
    224a:	95 95       	asr	r25
    224c:	87 95       	ror	r24
    224e:	98 2f       	mov	r25, r24
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	65 e0       	ldi	r22, 0x05	; 5
    2254:	49 2f       	mov	r20, r25
    2256:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(character,3));
    225a:	fe 01       	movw	r30, r28
    225c:	ed 59       	subi	r30, 0x9D	; 157
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 81       	ld	r24, Z
    2262:	88 2f       	mov	r24, r24
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	88 70       	andi	r24, 0x08	; 8
    2268:	90 70       	andi	r25, 0x00	; 0
    226a:	95 95       	asr	r25
    226c:	87 95       	ror	r24
    226e:	95 95       	asr	r25
    2270:	87 95       	ror	r24
    2272:	95 95       	asr	r25
    2274:	87 95       	ror	r24
    2276:	98 2f       	mov	r25, r24
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	66 e0       	ldi	r22, 0x06	; 6
    227c:	49 2f       	mov	r20, r25
    227e:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	a0 e8       	ldi	r26, 0x80	; 128
    2288:	bf e3       	ldi	r27, 0x3F	; 63
    228a:	89 8f       	std	Y+25, r24	; 0x19
    228c:	9a 8f       	std	Y+26, r25	; 0x1a
    228e:	ab 8f       	std	Y+27, r26	; 0x1b
    2290:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2292:	69 8d       	ldd	r22, Y+25	; 0x19
    2294:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2296:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2298:	9c 8d       	ldd	r25, Y+28	; 0x1c
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a e7       	ldi	r20, 0x7A	; 122
    22a0:	55 e4       	ldi	r21, 0x45	; 69
    22a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8d 8b       	std	Y+21, r24	; 0x15
    22ac:	9e 8b       	std	Y+22, r25	; 0x16
    22ae:	af 8b       	std	Y+23, r26	; 0x17
    22b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22b2:	6d 89       	ldd	r22, Y+21	; 0x15
    22b4:	7e 89       	ldd	r23, Y+22	; 0x16
    22b6:	8f 89       	ldd	r24, Y+23	; 0x17
    22b8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e8       	ldi	r20, 0x80	; 128
    22c0:	5f e3       	ldi	r21, 0x3F	; 63
    22c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22c6:	88 23       	and	r24, r24
    22c8:	2c f4       	brge	.+10     	; 0x22d4 <LCD_display_Character+0x75e>
		__ticks = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9c 8b       	std	Y+20, r25	; 0x14
    22d0:	8b 8b       	std	Y+19, r24	; 0x13
    22d2:	3f c0       	rjmp	.+126    	; 0x2352 <LCD_display_Character+0x7dc>
	else if (__tmp > 65535)
    22d4:	6d 89       	ldd	r22, Y+21	; 0x15
    22d6:	7e 89       	ldd	r23, Y+22	; 0x16
    22d8:	8f 89       	ldd	r24, Y+23	; 0x17
    22da:	98 8d       	ldd	r25, Y+24	; 0x18
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	3f ef       	ldi	r19, 0xFF	; 255
    22e0:	4f e7       	ldi	r20, 0x7F	; 127
    22e2:	57 e4       	ldi	r21, 0x47	; 71
    22e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22e8:	18 16       	cp	r1, r24
    22ea:	4c f5       	brge	.+82     	; 0x233e <LCD_display_Character+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ec:	69 8d       	ldd	r22, Y+25	; 0x19
    22ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e2       	ldi	r20, 0x20	; 32
    22fa:	51 e4       	ldi	r21, 0x41	; 65
    22fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9c 8b       	std	Y+20, r25	; 0x14
    2312:	8b 8b       	std	Y+19, r24	; 0x13
    2314:	0f c0       	rjmp	.+30     	; 0x2334 <LCD_display_Character+0x7be>
    2316:	80 e9       	ldi	r24, 0x90	; 144
    2318:	91 e0       	ldi	r25, 0x01	; 1
    231a:	9a 8b       	std	Y+18, r25	; 0x12
    231c:	89 8b       	std	Y+17, r24	; 0x11
    231e:	89 89       	ldd	r24, Y+17	; 0x11
    2320:	9a 89       	ldd	r25, Y+18	; 0x12
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <LCD_display_Character+0x7ac>
    2326:	9a 8b       	std	Y+18, r25	; 0x12
    2328:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232a:	8b 89       	ldd	r24, Y+19	; 0x13
    232c:	9c 89       	ldd	r25, Y+20	; 0x14
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	9c 8b       	std	Y+20, r25	; 0x14
    2332:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2334:	8b 89       	ldd	r24, Y+19	; 0x13
    2336:	9c 89       	ldd	r25, Y+20	; 0x14
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	69 f7       	brne	.-38     	; 0x2316 <LCD_display_Character+0x7a0>
    233c:	14 c0       	rjmp	.+40     	; 0x2366 <LCD_display_Character+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233e:	6d 89       	ldd	r22, Y+21	; 0x15
    2340:	7e 89       	ldd	r23, Y+22	; 0x16
    2342:	8f 89       	ldd	r24, Y+23	; 0x17
    2344:	98 8d       	ldd	r25, Y+24	; 0x18
    2346:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9c 8b       	std	Y+20, r25	; 0x14
    2350:	8b 8b       	std	Y+19, r24	; 0x13
    2352:	8b 89       	ldd	r24, Y+19	; 0x13
    2354:	9c 89       	ldd	r25, Y+20	; 0x14
    2356:	98 8b       	std	Y+16, r25	; 0x10
    2358:	8f 87       	std	Y+15, r24	; 0x0f
    235a:	8f 85       	ldd	r24, Y+15	; 0x0f
    235c:	98 89       	ldd	r25, Y+16	; 0x10
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <LCD_display_Character+0x7e8>
    2362:	98 8b       	std	Y+16, r25	; 0x10
    2364:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	62 e0       	ldi	r22, 0x02	; 2
    236a:	40 e0       	ldi	r20, 0x00	; 0
    236c:	0e 94 ed 06 	call	0xdda	; 0xdda <GPIO_writePin>
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	a0 e8       	ldi	r26, 0x80	; 128
    2376:	bf e3       	ldi	r27, 0x3F	; 63
    2378:	8b 87       	std	Y+11, r24	; 0x0b
    237a:	9c 87       	std	Y+12, r25	; 0x0c
    237c:	ad 87       	std	Y+13, r26	; 0x0d
    237e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2380:	6b 85       	ldd	r22, Y+11	; 0x0b
    2382:	7c 85       	ldd	r23, Y+12	; 0x0c
    2384:	8d 85       	ldd	r24, Y+13	; 0x0d
    2386:	9e 85       	ldd	r25, Y+14	; 0x0e
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	4a e7       	ldi	r20, 0x7A	; 122
    238e:	55 e4       	ldi	r21, 0x45	; 69
    2390:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	8f 83       	std	Y+7, r24	; 0x07
    239a:	98 87       	std	Y+8, r25	; 0x08
    239c:	a9 87       	std	Y+9, r26	; 0x09
    239e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e8       	ldi	r20, 0x80	; 128
    23ae:	5f e3       	ldi	r21, 0x3F	; 63
    23b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23b4:	88 23       	and	r24, r24
    23b6:	2c f4       	brge	.+10     	; 0x23c2 <LCD_display_Character+0x84c>
		__ticks = 1;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	9e 83       	std	Y+6, r25	; 0x06
    23be:	8d 83       	std	Y+5, r24	; 0x05
    23c0:	3f c0       	rjmp	.+126    	; 0x2440 <LCD_display_Character+0x8ca>
	else if (__tmp > 65535)
    23c2:	6f 81       	ldd	r22, Y+7	; 0x07
    23c4:	78 85       	ldd	r23, Y+8	; 0x08
    23c6:	89 85       	ldd	r24, Y+9	; 0x09
    23c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	3f ef       	ldi	r19, 0xFF	; 255
    23ce:	4f e7       	ldi	r20, 0x7F	; 127
    23d0:	57 e4       	ldi	r21, 0x47	; 71
    23d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23d6:	18 16       	cp	r1, r24
    23d8:	4c f5       	brge	.+82     	; 0x242c <LCD_display_Character+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23da:	6b 85       	ldd	r22, Y+11	; 0x0b
    23dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23de:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e2       	ldi	r20, 0x20	; 32
    23e8:	51 e4       	ldi	r21, 0x41	; 65
    23ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	9e 83       	std	Y+6, r25	; 0x06
    2400:	8d 83       	std	Y+5, r24	; 0x05
    2402:	0f c0       	rjmp	.+30     	; 0x2422 <LCD_display_Character+0x8ac>
    2404:	80 e9       	ldi	r24, 0x90	; 144
    2406:	91 e0       	ldi	r25, 0x01	; 1
    2408:	9c 83       	std	Y+4, r25	; 0x04
    240a:	8b 83       	std	Y+3, r24	; 0x03
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	9c 81       	ldd	r25, Y+4	; 0x04
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	f1 f7       	brne	.-4      	; 0x2410 <LCD_display_Character+0x89a>
    2414:	9c 83       	std	Y+4, r25	; 0x04
    2416:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	9e 81       	ldd	r25, Y+6	; 0x06
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	9e 83       	std	Y+6, r25	; 0x06
    2420:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	9e 81       	ldd	r25, Y+6	; 0x06
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	69 f7       	brne	.-38     	; 0x2404 <LCD_display_Character+0x88e>
    242a:	14 c0       	rjmp	.+40     	; 0x2454 <LCD_display_Character+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242c:	6f 81       	ldd	r22, Y+7	; 0x07
    242e:	78 85       	ldd	r23, Y+8	; 0x08
    2430:	89 85       	ldd	r24, Y+9	; 0x09
    2432:	9a 85       	ldd	r25, Y+10	; 0x0a
    2434:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	9e 83       	std	Y+6, r25	; 0x06
    243e:	8d 83       	std	Y+5, r24	; 0x05
    2440:	8d 81       	ldd	r24, Y+5	; 0x05
    2442:	9e 81       	ldd	r25, Y+6	; 0x06
    2444:	9a 83       	std	Y+2, r25	; 0x02
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <LCD_display_Character+0x8d6>
    2450:	9a 83       	std	Y+2, r25	; 0x02
    2452:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	/*delay 1u*/
	_delay_ms(1);
#endif

}
    2454:	cd 59       	subi	r28, 0x9D	; 157
    2456:	df 4f       	sbci	r29, 0xFF	; 255
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	1f 91       	pop	r17
    2468:	0f 91       	pop	r16
    246a:	08 95       	ret

0000246c <LCD_init>:

void LCD_init (void)
{
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	2e 97       	sbiw	r28, 0x0e	; 14
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
	/*RS & Enable output pins*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	61 e0       	ldi	r22, 0x01	; 1
    2484:	41 e0       	ldi	r20, 0x01	; 1
    2486:	0e 94 02 06 	call	0xc04	; 0xc04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	62 e0       	ldi	r22, 0x02	; 2
    248e:	41 e0       	ldi	r20, 0x01	; 1
    2490:	0e 94 02 06 	call	0xc04	; 0xc04 <GPIO_setupPinDirection>
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	a0 ea       	ldi	r26, 0xA0	; 160
    249a:	b1 e4       	ldi	r27, 0x41	; 65
    249c:	8b 87       	std	Y+11, r24	; 0x0b
    249e:	9c 87       	std	Y+12, r25	; 0x0c
    24a0:	ad 87       	std	Y+13, r26	; 0x0d
    24a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	4a e7       	ldi	r20, 0x7A	; 122
    24b2:	55 e4       	ldi	r21, 0x45	; 69
    24b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	8f 83       	std	Y+7, r24	; 0x07
    24be:	98 87       	std	Y+8, r25	; 0x08
    24c0:	a9 87       	std	Y+9, r26	; 0x09
    24c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24c4:	6f 81       	ldd	r22, Y+7	; 0x07
    24c6:	78 85       	ldd	r23, Y+8	; 0x08
    24c8:	89 85       	ldd	r24, Y+9	; 0x09
    24ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e8       	ldi	r20, 0x80	; 128
    24d2:	5f e3       	ldi	r21, 0x3F	; 63
    24d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24d8:	88 23       	and	r24, r24
    24da:	2c f4       	brge	.+10     	; 0x24e6 <LCD_init+0x7a>
		__ticks = 1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9e 83       	std	Y+6, r25	; 0x06
    24e2:	8d 83       	std	Y+5, r24	; 0x05
    24e4:	3f c0       	rjmp	.+126    	; 0x2564 <LCD_init+0xf8>
	else if (__tmp > 65535)
    24e6:	6f 81       	ldd	r22, Y+7	; 0x07
    24e8:	78 85       	ldd	r23, Y+8	; 0x08
    24ea:	89 85       	ldd	r24, Y+9	; 0x09
    24ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	3f ef       	ldi	r19, 0xFF	; 255
    24f2:	4f e7       	ldi	r20, 0x7F	; 127
    24f4:	57 e4       	ldi	r21, 0x47	; 71
    24f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24fa:	18 16       	cp	r1, r24
    24fc:	4c f5       	brge	.+82     	; 0x2550 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2500:	7c 85       	ldd	r23, Y+12	; 0x0c
    2502:	8d 85       	ldd	r24, Y+13	; 0x0d
    2504:	9e 85       	ldd	r25, Y+14	; 0x0e
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e2       	ldi	r20, 0x20	; 32
    250c:	51 e4       	ldi	r21, 0x41	; 65
    250e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	bc 01       	movw	r22, r24
    2518:	cd 01       	movw	r24, r26
    251a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	9e 83       	std	Y+6, r25	; 0x06
    2524:	8d 83       	std	Y+5, r24	; 0x05
    2526:	0f c0       	rjmp	.+30     	; 0x2546 <LCD_init+0xda>
    2528:	80 e9       	ldi	r24, 0x90	; 144
    252a:	91 e0       	ldi	r25, 0x01	; 1
    252c:	9c 83       	std	Y+4, r25	; 0x04
    252e:	8b 83       	std	Y+3, r24	; 0x03
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	9c 81       	ldd	r25, Y+4	; 0x04
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <LCD_init+0xc8>
    2538:	9c 83       	std	Y+4, r25	; 0x04
    253a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253c:	8d 81       	ldd	r24, Y+5	; 0x05
    253e:	9e 81       	ldd	r25, Y+6	; 0x06
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	9e 83       	std	Y+6, r25	; 0x06
    2544:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	9e 81       	ldd	r25, Y+6	; 0x06
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	69 f7       	brne	.-38     	; 0x2528 <LCD_init+0xbc>
    254e:	14 c0       	rjmp	.+40     	; 0x2578 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2550:	6f 81       	ldd	r22, Y+7	; 0x07
    2552:	78 85       	ldd	r23, Y+8	; 0x08
    2554:	89 85       	ldd	r24, Y+9	; 0x09
    2556:	9a 85       	ldd	r25, Y+10	; 0x0a
    2558:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	9e 83       	std	Y+6, r25	; 0x06
    2562:	8d 83       	std	Y+5, r24	; 0x05
    2564:	8d 81       	ldd	r24, Y+5	; 0x05
    2566:	9e 81       	ldd	r25, Y+6	; 0x06
    2568:	9a 83       	std	Y+2, r25	; 0x02
    256a:	89 83       	std	Y+1, r24	; 0x01
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	9a 81       	ldd	r25, Y+2	; 0x02
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <LCD_init+0x104>
    2574:	9a 83       	std	Y+2, r25	; 0x02
    2576:	89 83       	std	Y+1, r24	; 0x01
	/*delay 20u */
	_delay_ms(20);

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	63 e0       	ldi	r22, 0x03	; 3
    257c:	41 e0       	ldi	r20, 0x01	; 1
    257e:	0e 94 02 06 	call	0xc04	; 0xc04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	64 e0       	ldi	r22, 0x04	; 4
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	0e 94 02 06 	call	0xc04	; 0xc04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	65 e0       	ldi	r22, 0x05	; 5
    2590:	41 e0       	ldi	r20, 0x01	; 1
    2592:	0e 94 02 06 	call	0xc04	; 0xc04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	66 e0       	ldi	r22, 0x06	; 6
    259a:	41 e0       	ldi	r20, 0x01	; 1
    259c:	0e 94 02 06 	call	0xc04	; 0xc04 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    25a0:	83 e3       	ldi	r24, 0x33	; 51
    25a2:	0e 94 40 09 	call	0x1280	; 0x1280 <LCD_SendCommand>
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    25a6:	82 e3       	ldi	r24, 0x32	; 50
    25a8:	0e 94 40 09 	call	0x1280	; 0x1280 <LCD_SendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    25ac:	88 e2       	ldi	r24, 0x28	; 40
    25ae:	0e 94 40 09 	call	0x1280	; 0x1280 <LCD_SendCommand>
	LCD_SendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	/*send command cursor off*/
	LCD_SendCommand(LCD_CURSOR_OFF);
    25b2:	8c e0       	ldi	r24, 0x0C	; 12
    25b4:	0e 94 40 09 	call	0x1280	; 0x1280 <LCD_SendCommand>

	/*clear screen*/
	LCD_SendCommand(LCD_CLEAR_COMMAND);
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	0e 94 40 09 	call	0x1280	; 0x1280 <LCD_SendCommand>
}
    25be:	2e 96       	adiw	r28, 0x0e	; 14
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	de bf       	out	0x3e, r29	; 62
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	cd bf       	out	0x3d, r28	; 61
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <LCD_string_Display>:

void LCD_string_Display (uint8 * str_ptr)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <LCD_string_Display+0x6>
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	9a 83       	std	Y+2, r25	; 0x02
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	0a c0       	rjmp	.+20     	; 0x25f4 <LCD_string_Display+0x24>
	while (*(str_ptr) != '\0')
	{
		LCD_display_Character(*str_ptr);
    25e0:	e9 81       	ldd	r30, Y+1	; 0x01
    25e2:	fa 81       	ldd	r31, Y+2	; 0x02
    25e4:	80 81       	ld	r24, Z
    25e6:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <LCD_display_Character>
		str_ptr++;
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	01 96       	adiw	r24, 0x01	; 1
    25f0:	9a 83       	std	Y+2, r25	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
	LCD_SendCommand(LCD_CLEAR_COMMAND);
}

void LCD_string_Display (uint8 * str_ptr)
{
	while (*(str_ptr) != '\0')
    25f4:	e9 81       	ldd	r30, Y+1	; 0x01
    25f6:	fa 81       	ldd	r31, Y+2	; 0x02
    25f8:	80 81       	ld	r24, Z
    25fa:	88 23       	and	r24, r24
    25fc:	89 f7       	brne	.-30     	; 0x25e0 <LCD_string_Display+0x10>
	{
		LCD_display_Character(*str_ptr);
		str_ptr++;
	}
}
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret

00002608 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 col)
{
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	00 d0       	rcall	.+0      	; 0x260e <LCD_moveCursor+0x6>
    260e:	00 d0       	rcall	.+0      	; 0x2610 <LCD_moveCursor+0x8>
    2610:	0f 92       	push	r0
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
    2616:	8a 83       	std	Y+2, r24	; 0x02
    2618:	6b 83       	std	Y+3, r22	; 0x03
	 * for second row the address is 0x41 0x42 .... so it's th col num + 0x40
	 * for third row the address is 0x10 0x11 ..... so it's the col num +0x10
	 * for fourth row the address is 0x51 0x52 ..... so it's the col num + 0x50
	 */

	switch (row)
    261a:	8a 81       	ldd	r24, Y+2	; 0x02
    261c:	28 2f       	mov	r18, r24
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	3d 83       	std	Y+5, r19	; 0x05
    2622:	2c 83       	std	Y+4, r18	; 0x04
    2624:	8c 81       	ldd	r24, Y+4	; 0x04
    2626:	9d 81       	ldd	r25, Y+5	; 0x05
    2628:	81 30       	cpi	r24, 0x01	; 1
    262a:	91 05       	cpc	r25, r1
    262c:	c1 f0       	breq	.+48     	; 0x265e <LCD_moveCursor+0x56>
    262e:	2c 81       	ldd	r18, Y+4	; 0x04
    2630:	3d 81       	ldd	r19, Y+5	; 0x05
    2632:	22 30       	cpi	r18, 0x02	; 2
    2634:	31 05       	cpc	r19, r1
    2636:	2c f4       	brge	.+10     	; 0x2642 <LCD_moveCursor+0x3a>
    2638:	8c 81       	ldd	r24, Y+4	; 0x04
    263a:	9d 81       	ldd	r25, Y+5	; 0x05
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	61 f0       	breq	.+24     	; 0x2658 <LCD_moveCursor+0x50>
    2640:	19 c0       	rjmp	.+50     	; 0x2674 <LCD_moveCursor+0x6c>
    2642:	2c 81       	ldd	r18, Y+4	; 0x04
    2644:	3d 81       	ldd	r19, Y+5	; 0x05
    2646:	22 30       	cpi	r18, 0x02	; 2
    2648:	31 05       	cpc	r19, r1
    264a:	69 f0       	breq	.+26     	; 0x2666 <LCD_moveCursor+0x5e>
    264c:	8c 81       	ldd	r24, Y+4	; 0x04
    264e:	9d 81       	ldd	r25, Y+5	; 0x05
    2650:	83 30       	cpi	r24, 0x03	; 3
    2652:	91 05       	cpc	r25, r1
    2654:	61 f0       	breq	.+24     	; 0x266e <LCD_moveCursor+0x66>
    2656:	0e c0       	rjmp	.+28     	; 0x2674 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	0b c0       	rjmp	.+22     	; 0x2674 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    265e:	8b 81       	ldd	r24, Y+3	; 0x03
    2660:	80 5c       	subi	r24, 0xC0	; 192
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	07 c0       	rjmp	.+14     	; 0x2674 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	80 5f       	subi	r24, 0xF0	; 240
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	03 c0       	rjmp	.+6      	; 0x2674 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	80 5b       	subi	r24, 0xB0	; 176
    2672:	89 83       	std	Y+1, r24	; 0x01
	 * here the largest address is 0x5F so the MSB is always 0
	 * in this LCD from the data sheet I must put the MSB 1
	 * so I will OR the address value from the switch with 0x80
	 * here I set the cursor to the first row first col ORed with the address I got
	 */
	LCD_SendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	80 68       	ori	r24, 0x80	; 128
    2678:	0e 94 40 09 	call	0x1280	; 0x1280 <LCD_SendCommand>
}
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	00 d0       	rcall	.+0      	; 0x2692 <LCD_displayStringRowColumn+0x6>
    2692:	00 d0       	rcall	.+0      	; 0x2694 <LCD_displayStringRowColumn+0x8>
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	6a 83       	std	Y+2, r22	; 0x02
    269c:	5c 83       	std	Y+4, r21	; 0x04
    269e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	6a 81       	ldd	r22, Y+2	; 0x02
    26a4:	0e 94 04 13 	call	0x2608	; 0x2608 <LCD_moveCursor>
	LCD_string_Display(Str);
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	9c 81       	ldd	r25, Y+4	; 0x04
    26ac:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <LCD_string_Display>
}
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	62 97       	sbiw	r28, 0x12	; 18
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	9a 8b       	std	Y+18, r25	; 0x12
    26d4:	89 8b       	std	Y+17, r24	; 0x11
	   char buff[16]; /* String to hold the ASCII result */
	   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    26d6:	89 89       	ldd	r24, Y+17	; 0x11
    26d8:	9a 89       	ldd	r25, Y+18	; 0x12
    26da:	9e 01       	movw	r18, r28
    26dc:	2f 5f       	subi	r18, 0xFF	; 255
    26de:	3f 4f       	sbci	r19, 0xFF	; 255
    26e0:	b9 01       	movw	r22, r18
    26e2:	4a e0       	ldi	r20, 0x0A	; 10
    26e4:	50 e0       	ldi	r21, 0x00	; 0
    26e6:	0e 94 09 14 	call	0x2812	; 0x2812 <itoa>
	   LCD_string_Display(buff); /* Display the string */
    26ea:	ce 01       	movw	r24, r28
    26ec:	01 96       	adiw	r24, 0x01	; 1
    26ee:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <LCD_string_Display>
}
    26f2:	62 96       	adiw	r28, 0x12	; 18
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_CLEAR_COMMAND);
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	0e 94 40 09 	call	0x1280	; 0x1280 <LCD_SendCommand>
}
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <main>:
#include "lcd.h"
#include "adc.h"


int main (void)
{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	2a 97       	sbiw	r28, 0x0a	; 10
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
	ADC_Initialization  data ={AVCC , F_cpu_128 , ENABLE};
    272c:	ce 01       	movw	r24, r28
    272e:	03 96       	adiw	r24, 0x03	; 3
    2730:	9f 83       	std	Y+7, r25	; 0x07
    2732:	8e 83       	std	Y+6, r24	; 0x06
    2734:	e8 e7       	ldi	r30, 0x78	; 120
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	f9 87       	std	Y+9, r31	; 0x09
    273a:	e8 87       	std	Y+8, r30	; 0x08
    273c:	f3 e0       	ldi	r31, 0x03	; 3
    273e:	fa 87       	std	Y+10, r31	; 0x0a
    2740:	e8 85       	ldd	r30, Y+8	; 0x08
    2742:	f9 85       	ldd	r31, Y+9	; 0x09
    2744:	00 80       	ld	r0, Z
    2746:	88 85       	ldd	r24, Y+8	; 0x08
    2748:	99 85       	ldd	r25, Y+9	; 0x09
    274a:	01 96       	adiw	r24, 0x01	; 1
    274c:	99 87       	std	Y+9, r25	; 0x09
    274e:	88 87       	std	Y+8, r24	; 0x08
    2750:	ee 81       	ldd	r30, Y+6	; 0x06
    2752:	ff 81       	ldd	r31, Y+7	; 0x07
    2754:	00 82       	st	Z, r0
    2756:	8e 81       	ldd	r24, Y+6	; 0x06
    2758:	9f 81       	ldd	r25, Y+7	; 0x07
    275a:	01 96       	adiw	r24, 0x01	; 1
    275c:	9f 83       	std	Y+7, r25	; 0x07
    275e:	8e 83       	std	Y+6, r24	; 0x06
    2760:	9a 85       	ldd	r25, Y+10	; 0x0a
    2762:	91 50       	subi	r25, 0x01	; 1
    2764:	9a 87       	std	Y+10, r25	; 0x0a
    2766:	ea 85       	ldd	r30, Y+10	; 0x0a
    2768:	ee 23       	and	r30, r30
    276a:	51 f7       	brne	.-44     	; 0x2740 <main+0x28>
	uint16 res_value;

	LCD_init();
    276c:	0e 94 36 12 	call	0x246c	; 0x246c <LCD_init>
	ADC_init(&data);
    2770:	ce 01       	movw	r24, r28
    2772:	03 96       	adiw	r24, 0x03	; 3
    2774:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_init>

	while (1)
	{
		/* Read ADC channel 0 where the potentiometer is connected */
		res_value = ADC_readChannel(0);
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <ADC_readChannel>
    277e:	9a 83       	std	Y+2, r25	; 0x02
    2780:	89 83       	std	Y+1, r24	; 0x01

		LCD_string_Display("ADC value = ");
    2782:	80 e6       	ldi	r24, 0x60	; 96
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <LCD_string_Display>
		LCD_intgerToString(res_value);
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	9a 81       	ldd	r25, Y+2	; 0x02
    278e:	0e 94 5f 13 	call	0x26be	; 0x26be <LCD_intgerToString>
		LCD_string_Display("  ");
    2792:	8d e6       	ldi	r24, 0x6D	; 109
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <LCD_string_Display>
		LCD_moveCursor(0, 0);
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	60 e0       	ldi	r22, 0x00	; 0
    279e:	0e 94 04 13 	call	0x2608	; 0x2608 <LCD_moveCursor>
    27a2:	ea cf       	rjmp	.-44     	; 0x2778 <main+0x60>

000027a4 <__prologue_saves__>:
    27a4:	2f 92       	push	r2
    27a6:	3f 92       	push	r3
    27a8:	4f 92       	push	r4
    27aa:	5f 92       	push	r5
    27ac:	6f 92       	push	r6
    27ae:	7f 92       	push	r7
    27b0:	8f 92       	push	r8
    27b2:	9f 92       	push	r9
    27b4:	af 92       	push	r10
    27b6:	bf 92       	push	r11
    27b8:	cf 92       	push	r12
    27ba:	df 92       	push	r13
    27bc:	ef 92       	push	r14
    27be:	ff 92       	push	r15
    27c0:	0f 93       	push	r16
    27c2:	1f 93       	push	r17
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	ca 1b       	sub	r28, r26
    27ce:	db 0b       	sbc	r29, r27
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	09 94       	ijmp

000027dc <__epilogue_restores__>:
    27dc:	2a 88       	ldd	r2, Y+18	; 0x12
    27de:	39 88       	ldd	r3, Y+17	; 0x11
    27e0:	48 88       	ldd	r4, Y+16	; 0x10
    27e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    27e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    27e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    27e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    27ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    27ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    27ee:	b9 84       	ldd	r11, Y+9	; 0x09
    27f0:	c8 84       	ldd	r12, Y+8	; 0x08
    27f2:	df 80       	ldd	r13, Y+7	; 0x07
    27f4:	ee 80       	ldd	r14, Y+6	; 0x06
    27f6:	fd 80       	ldd	r15, Y+5	; 0x05
    27f8:	0c 81       	ldd	r16, Y+4	; 0x04
    27fa:	1b 81       	ldd	r17, Y+3	; 0x03
    27fc:	aa 81       	ldd	r26, Y+2	; 0x02
    27fe:	b9 81       	ldd	r27, Y+1	; 0x01
    2800:	ce 0f       	add	r28, r30
    2802:	d1 1d       	adc	r29, r1
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	ed 01       	movw	r28, r26
    2810:	08 95       	ret

00002812 <itoa>:
    2812:	fb 01       	movw	r30, r22
    2814:	9f 01       	movw	r18, r30
    2816:	e8 94       	clt
    2818:	42 30       	cpi	r20, 0x02	; 2
    281a:	c4 f0       	brlt	.+48     	; 0x284c <itoa+0x3a>
    281c:	45 32       	cpi	r20, 0x25	; 37
    281e:	b4 f4       	brge	.+44     	; 0x284c <itoa+0x3a>
    2820:	4a 30       	cpi	r20, 0x0A	; 10
    2822:	29 f4       	brne	.+10     	; 0x282e <itoa+0x1c>
    2824:	97 fb       	bst	r25, 7
    2826:	1e f4       	brtc	.+6      	; 0x282e <itoa+0x1c>
    2828:	90 95       	com	r25
    282a:	81 95       	neg	r24
    282c:	9f 4f       	sbci	r25, 0xFF	; 255
    282e:	64 2f       	mov	r22, r20
    2830:	77 27       	eor	r23, r23
    2832:	0e 94 3a 14 	call	0x2874	; 0x2874 <__udivmodhi4>
    2836:	80 5d       	subi	r24, 0xD0	; 208
    2838:	8a 33       	cpi	r24, 0x3A	; 58
    283a:	0c f0       	brlt	.+2      	; 0x283e <itoa+0x2c>
    283c:	89 5d       	subi	r24, 0xD9	; 217
    283e:	81 93       	st	Z+, r24
    2840:	cb 01       	movw	r24, r22
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	a1 f7       	brne	.-24     	; 0x282e <itoa+0x1c>
    2846:	16 f4       	brtc	.+4      	; 0x284c <itoa+0x3a>
    2848:	5d e2       	ldi	r21, 0x2D	; 45
    284a:	51 93       	st	Z+, r21
    284c:	10 82       	st	Z, r1
    284e:	c9 01       	movw	r24, r18
    2850:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <strrev>

00002854 <strrev>:
    2854:	dc 01       	movw	r26, r24
    2856:	fc 01       	movw	r30, r24
    2858:	67 2f       	mov	r22, r23
    285a:	71 91       	ld	r23, Z+
    285c:	77 23       	and	r23, r23
    285e:	e1 f7       	brne	.-8      	; 0x2858 <strrev+0x4>
    2860:	32 97       	sbiw	r30, 0x02	; 2
    2862:	04 c0       	rjmp	.+8      	; 0x286c <strrev+0x18>
    2864:	7c 91       	ld	r23, X
    2866:	6d 93       	st	X+, r22
    2868:	70 83       	st	Z, r23
    286a:	62 91       	ld	r22, -Z
    286c:	ae 17       	cp	r26, r30
    286e:	bf 07       	cpc	r27, r31
    2870:	c8 f3       	brcs	.-14     	; 0x2864 <strrev+0x10>
    2872:	08 95       	ret

00002874 <__udivmodhi4>:
    2874:	aa 1b       	sub	r26, r26
    2876:	bb 1b       	sub	r27, r27
    2878:	51 e1       	ldi	r21, 0x11	; 17
    287a:	07 c0       	rjmp	.+14     	; 0x288a <__udivmodhi4_ep>

0000287c <__udivmodhi4_loop>:
    287c:	aa 1f       	adc	r26, r26
    287e:	bb 1f       	adc	r27, r27
    2880:	a6 17       	cp	r26, r22
    2882:	b7 07       	cpc	r27, r23
    2884:	10 f0       	brcs	.+4      	; 0x288a <__udivmodhi4_ep>
    2886:	a6 1b       	sub	r26, r22
    2888:	b7 0b       	sbc	r27, r23

0000288a <__udivmodhi4_ep>:
    288a:	88 1f       	adc	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	5a 95       	dec	r21
    2890:	a9 f7       	brne	.-22     	; 0x287c <__udivmodhi4_loop>
    2892:	80 95       	com	r24
    2894:	90 95       	com	r25
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	08 95       	ret

0000289c <_exit>:
    289c:	f8 94       	cli

0000289e <__stop_program>:
    289e:	ff cf       	rjmp	.-2      	; 0x289e <__stop_program>
