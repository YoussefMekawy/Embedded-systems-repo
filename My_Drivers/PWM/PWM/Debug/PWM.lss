
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000013c6  0000143a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000d68  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000009f7  00000000  00000000  000022ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00002ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000195  00000000  00000000  00002de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b12  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ead  00000000  00000000  00004a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e5d  00000000  00000000  00005937  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00006794  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ae  00000000  00000000  000068f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000896  00000000  00000000  00006ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00007438  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 68 09 	call	0x12d0	; 0x12d0 <main>
      7a:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 11 03 	call	0x622	; 0x622 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 9f 03 	call	0x73e	; 0x73e <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 9f 03 	call	0x73e	; 0x73e <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 17 05 	call	0xa2e	; 0xa2e <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 17 05 	call	0xa2e	; 0xa2e <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 42 04 	call	0x884	; 0x884 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 17 05 	call	0xa2e	; 0xa2e <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 17 05 	call	0xa2e	; 0xa2e <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 42 04 	call	0x884	; 0x884 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 17 05 	call	0xa2e	; 0xa2e <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 17 05 	call	0xa2e	; 0xa2e <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 42 04 	call	0x884	; 0x884 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__epilogue_restores__>

00000622 <__gesf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 17 05 	call	0xa2e	; 0xa2e <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 17 05 	call	0xa2e	; 0xa2e <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gesf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gesf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gesf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__epilogue_restores__+0x18>

00000682 <__floatsisf>:
     682:	a8 e0       	ldi	r26, 0x08	; 8
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__prologue_saves__+0x12>
     68e:	9b 01       	movw	r18, r22
     690:	ac 01       	movw	r20, r24
     692:	83 e0       	ldi	r24, 0x03	; 3
     694:	89 83       	std	Y+1, r24	; 0x01
     696:	da 01       	movw	r26, r20
     698:	c9 01       	movw	r24, r18
     69a:	88 27       	eor	r24, r24
     69c:	b7 fd       	sbrc	r27, 7
     69e:	83 95       	inc	r24
     6a0:	99 27       	eor	r25, r25
     6a2:	aa 27       	eor	r26, r26
     6a4:	bb 27       	eor	r27, r27
     6a6:	b8 2e       	mov	r11, r24
     6a8:	21 15       	cp	r18, r1
     6aa:	31 05       	cpc	r19, r1
     6ac:	41 05       	cpc	r20, r1
     6ae:	51 05       	cpc	r21, r1
     6b0:	19 f4       	brne	.+6      	; 0x6b8 <__floatsisf+0x36>
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	89 83       	std	Y+1, r24	; 0x01
     6b6:	3a c0       	rjmp	.+116    	; 0x72c <__floatsisf+0xaa>
     6b8:	88 23       	and	r24, r24
     6ba:	a9 f0       	breq	.+42     	; 0x6e6 <__floatsisf+0x64>
     6bc:	20 30       	cpi	r18, 0x00	; 0
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	38 07       	cpc	r19, r24
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	48 07       	cpc	r20, r24
     6c6:	80 e8       	ldi	r24, 0x80	; 128
     6c8:	58 07       	cpc	r21, r24
     6ca:	29 f4       	brne	.+10     	; 0x6d6 <__floatsisf+0x54>
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	9f ec       	ldi	r25, 0xCF	; 207
     6d4:	30 c0       	rjmp	.+96     	; 0x736 <__floatsisf+0xb4>
     6d6:	ee 24       	eor	r14, r14
     6d8:	ff 24       	eor	r15, r15
     6da:	87 01       	movw	r16, r14
     6dc:	e2 1a       	sub	r14, r18
     6de:	f3 0a       	sbc	r15, r19
     6e0:	04 0b       	sbc	r16, r20
     6e2:	15 0b       	sbc	r17, r21
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <__floatsisf+0x68>
     6e6:	79 01       	movw	r14, r18
     6e8:	8a 01       	movw	r16, r20
     6ea:	8e e1       	ldi	r24, 0x1E	; 30
     6ec:	c8 2e       	mov	r12, r24
     6ee:	d1 2c       	mov	r13, r1
     6f0:	dc 82       	std	Y+4, r13	; 0x04
     6f2:	cb 82       	std	Y+3, r12	; 0x03
     6f4:	ed 82       	std	Y+5, r14	; 0x05
     6f6:	fe 82       	std	Y+6, r15	; 0x06
     6f8:	0f 83       	std	Y+7, r16	; 0x07
     6fa:	18 87       	std	Y+8, r17	; 0x08
     6fc:	c8 01       	movw	r24, r16
     6fe:	b7 01       	movw	r22, r14
     700:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__clzsi2>
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	18 16       	cp	r1, r24
     708:	19 06       	cpc	r1, r25
     70a:	84 f4       	brge	.+32     	; 0x72c <__floatsisf+0xaa>
     70c:	08 2e       	mov	r0, r24
     70e:	04 c0       	rjmp	.+8      	; 0x718 <__floatsisf+0x96>
     710:	ee 0c       	add	r14, r14
     712:	ff 1c       	adc	r15, r15
     714:	00 1f       	adc	r16, r16
     716:	11 1f       	adc	r17, r17
     718:	0a 94       	dec	r0
     71a:	d2 f7       	brpl	.-12     	; 0x710 <__floatsisf+0x8e>
     71c:	ed 82       	std	Y+5, r14	; 0x05
     71e:	fe 82       	std	Y+6, r15	; 0x06
     720:	0f 83       	std	Y+7, r16	; 0x07
     722:	18 87       	std	Y+8, r17	; 0x08
     724:	c8 1a       	sub	r12, r24
     726:	d9 0a       	sbc	r13, r25
     728:	dc 82       	std	Y+4, r13	; 0x04
     72a:	cb 82       	std	Y+3, r12	; 0x03
     72c:	ba 82       	std	Y+2, r11	; 0x02
     72e:	ce 01       	movw	r24, r28
     730:	01 96       	adiw	r24, 0x01	; 1
     732:	0e 94 42 04 	call	0x884	; 0x884 <__pack_f>
     736:	28 96       	adiw	r28, 0x08	; 8
     738:	e9 e0       	ldi	r30, 0x09	; 9
     73a:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__epilogue_restores__+0x12>

0000073e <__fixsfsi>:
     73e:	ac e0       	ldi	r26, 0x0C	; 12
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	e5 ea       	ldi	r30, 0xA5	; 165
     744:	f3 e0       	ldi	r31, 0x03	; 3
     746:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__prologue_saves__+0x20>
     74a:	69 83       	std	Y+1, r22	; 0x01
     74c:	7a 83       	std	Y+2, r23	; 0x02
     74e:	8b 83       	std	Y+3, r24	; 0x03
     750:	9c 83       	std	Y+4, r25	; 0x04
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	be 01       	movw	r22, r28
     758:	6b 5f       	subi	r22, 0xFB	; 251
     75a:	7f 4f       	sbci	r23, 0xFF	; 255
     75c:	0e 94 17 05 	call	0xa2e	; 0xa2e <__unpack_f>
     760:	8d 81       	ldd	r24, Y+5	; 0x05
     762:	82 30       	cpi	r24, 0x02	; 2
     764:	61 f1       	breq	.+88     	; 0x7be <__fixsfsi+0x80>
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	50 f1       	brcs	.+84     	; 0x7be <__fixsfsi+0x80>
     76a:	84 30       	cpi	r24, 0x04	; 4
     76c:	21 f4       	brne	.+8      	; 0x776 <__fixsfsi+0x38>
     76e:	8e 81       	ldd	r24, Y+6	; 0x06
     770:	88 23       	and	r24, r24
     772:	51 f1       	breq	.+84     	; 0x7c8 <__fixsfsi+0x8a>
     774:	2e c0       	rjmp	.+92     	; 0x7d2 <__fixsfsi+0x94>
     776:	2f 81       	ldd	r18, Y+7	; 0x07
     778:	38 85       	ldd	r19, Y+8	; 0x08
     77a:	37 fd       	sbrc	r19, 7
     77c:	20 c0       	rjmp	.+64     	; 0x7be <__fixsfsi+0x80>
     77e:	6e 81       	ldd	r22, Y+6	; 0x06
     780:	2f 31       	cpi	r18, 0x1F	; 31
     782:	31 05       	cpc	r19, r1
     784:	1c f0       	brlt	.+6      	; 0x78c <__fixsfsi+0x4e>
     786:	66 23       	and	r22, r22
     788:	f9 f0       	breq	.+62     	; 0x7c8 <__fixsfsi+0x8a>
     78a:	23 c0       	rjmp	.+70     	; 0x7d2 <__fixsfsi+0x94>
     78c:	8e e1       	ldi	r24, 0x1E	; 30
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	82 1b       	sub	r24, r18
     792:	93 0b       	sbc	r25, r19
     794:	29 85       	ldd	r18, Y+9	; 0x09
     796:	3a 85       	ldd	r19, Y+10	; 0x0a
     798:	4b 85       	ldd	r20, Y+11	; 0x0b
     79a:	5c 85       	ldd	r21, Y+12	; 0x0c
     79c:	04 c0       	rjmp	.+8      	; 0x7a6 <__fixsfsi+0x68>
     79e:	56 95       	lsr	r21
     7a0:	47 95       	ror	r20
     7a2:	37 95       	ror	r19
     7a4:	27 95       	ror	r18
     7a6:	8a 95       	dec	r24
     7a8:	d2 f7       	brpl	.-12     	; 0x79e <__fixsfsi+0x60>
     7aa:	66 23       	and	r22, r22
     7ac:	b1 f0       	breq	.+44     	; 0x7da <__fixsfsi+0x9c>
     7ae:	50 95       	com	r21
     7b0:	40 95       	com	r20
     7b2:	30 95       	com	r19
     7b4:	21 95       	neg	r18
     7b6:	3f 4f       	sbci	r19, 0xFF	; 255
     7b8:	4f 4f       	sbci	r20, 0xFF	; 255
     7ba:	5f 4f       	sbci	r21, 0xFF	; 255
     7bc:	0e c0       	rjmp	.+28     	; 0x7da <__fixsfsi+0x9c>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	09 c0       	rjmp	.+18     	; 0x7da <__fixsfsi+0x9c>
     7c8:	2f ef       	ldi	r18, 0xFF	; 255
     7ca:	3f ef       	ldi	r19, 0xFF	; 255
     7cc:	4f ef       	ldi	r20, 0xFF	; 255
     7ce:	5f e7       	ldi	r21, 0x7F	; 127
     7d0:	04 c0       	rjmp	.+8      	; 0x7da <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e8       	ldi	r21, 0x80	; 128
     7da:	b9 01       	movw	r22, r18
     7dc:	ca 01       	movw	r24, r20
     7de:	2c 96       	adiw	r28, 0x0c	; 12
     7e0:	e2 e0       	ldi	r30, 0x02	; 2
     7e2:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__epilogue_restores__+0x20>

000007e6 <__clzsi2>:
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	7b 01       	movw	r14, r22
     7f0:	8c 01       	movw	r16, r24
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	e8 16       	cp	r14, r24
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	f8 06       	cpc	r15, r24
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	08 07       	cpc	r16, r24
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	18 07       	cpc	r17, r24
     802:	88 f4       	brcc	.+34     	; 0x826 <__clzsi2+0x40>
     804:	8f ef       	ldi	r24, 0xFF	; 255
     806:	e8 16       	cp	r14, r24
     808:	f1 04       	cpc	r15, r1
     80a:	01 05       	cpc	r16, r1
     80c:	11 05       	cpc	r17, r1
     80e:	31 f0       	breq	.+12     	; 0x81c <__clzsi2+0x36>
     810:	28 f0       	brcs	.+10     	; 0x81c <__clzsi2+0x36>
     812:	88 e0       	ldi	r24, 0x08	; 8
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	a0 e0       	ldi	r26, 0x00	; 0
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	17 c0       	rjmp	.+46     	; 0x84a <__clzsi2+0x64>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	a0 e0       	ldi	r26, 0x00	; 0
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	12 c0       	rjmp	.+36     	; 0x84a <__clzsi2+0x64>
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	e8 16       	cp	r14, r24
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	f8 06       	cpc	r15, r24
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	08 07       	cpc	r16, r24
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	18 07       	cpc	r17, r24
     836:	28 f0       	brcs	.+10     	; 0x842 <__clzsi2+0x5c>
     838:	88 e1       	ldi	r24, 0x18	; 24
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	a0 e0       	ldi	r26, 0x00	; 0
     83e:	b0 e0       	ldi	r27, 0x00	; 0
     840:	04 c0       	rjmp	.+8      	; 0x84a <__clzsi2+0x64>
     842:	80 e1       	ldi	r24, 0x10	; 16
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	a0 e0       	ldi	r26, 0x00	; 0
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	20 e2       	ldi	r18, 0x20	; 32
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	28 1b       	sub	r18, r24
     854:	39 0b       	sbc	r19, r25
     856:	4a 0b       	sbc	r20, r26
     858:	5b 0b       	sbc	r21, r27
     85a:	04 c0       	rjmp	.+8      	; 0x864 <__stack+0x5>
     85c:	16 95       	lsr	r17
     85e:	07 95       	ror	r16
     860:	f7 94       	ror	r15
     862:	e7 94       	ror	r14
     864:	8a 95       	dec	r24
     866:	d2 f7       	brpl	.-12     	; 0x85c <__clzsi2+0x76>
     868:	f7 01       	movw	r30, r14
     86a:	e8 59       	subi	r30, 0x98	; 152
     86c:	ff 4f       	sbci	r31, 0xFF	; 255
     86e:	80 81       	ld	r24, Z
     870:	28 1b       	sub	r18, r24
     872:	31 09       	sbc	r19, r1
     874:	41 09       	sbc	r20, r1
     876:	51 09       	sbc	r21, r1
     878:	c9 01       	movw	r24, r18
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	08 95       	ret

00000884 <__pack_f>:
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	fc 01       	movw	r30, r24
     890:	e4 80       	ldd	r14, Z+4	; 0x04
     892:	f5 80       	ldd	r15, Z+5	; 0x05
     894:	06 81       	ldd	r16, Z+6	; 0x06
     896:	17 81       	ldd	r17, Z+7	; 0x07
     898:	d1 80       	ldd	r13, Z+1	; 0x01
     89a:	80 81       	ld	r24, Z
     89c:	82 30       	cpi	r24, 0x02	; 2
     89e:	48 f4       	brcc	.+18     	; 0x8b2 <__pack_f+0x2e>
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e1       	ldi	r26, 0x10	; 16
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	e8 2a       	or	r14, r24
     8aa:	f9 2a       	or	r15, r25
     8ac:	0a 2b       	or	r16, r26
     8ae:	1b 2b       	or	r17, r27
     8b0:	a5 c0       	rjmp	.+330    	; 0x9fc <__pack_f+0x178>
     8b2:	84 30       	cpi	r24, 0x04	; 4
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <__pack_f+0x34>
     8b6:	9f c0       	rjmp	.+318    	; 0x9f6 <__pack_f+0x172>
     8b8:	82 30       	cpi	r24, 0x02	; 2
     8ba:	21 f4       	brne	.+8      	; 0x8c4 <__pack_f+0x40>
     8bc:	ee 24       	eor	r14, r14
     8be:	ff 24       	eor	r15, r15
     8c0:	87 01       	movw	r16, r14
     8c2:	05 c0       	rjmp	.+10     	; 0x8ce <__pack_f+0x4a>
     8c4:	e1 14       	cp	r14, r1
     8c6:	f1 04       	cpc	r15, r1
     8c8:	01 05       	cpc	r16, r1
     8ca:	11 05       	cpc	r17, r1
     8cc:	19 f4       	brne	.+6      	; 0x8d4 <__pack_f+0x50>
     8ce:	e0 e0       	ldi	r30, 0x00	; 0
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	96 c0       	rjmp	.+300    	; 0xa00 <__pack_f+0x17c>
     8d4:	62 81       	ldd	r22, Z+2	; 0x02
     8d6:	73 81       	ldd	r23, Z+3	; 0x03
     8d8:	9f ef       	ldi	r25, 0xFF	; 255
     8da:	62 38       	cpi	r22, 0x82	; 130
     8dc:	79 07       	cpc	r23, r25
     8de:	0c f0       	brlt	.+2      	; 0x8e2 <__pack_f+0x5e>
     8e0:	5b c0       	rjmp	.+182    	; 0x998 <__pack_f+0x114>
     8e2:	22 e8       	ldi	r18, 0x82	; 130
     8e4:	3f ef       	ldi	r19, 0xFF	; 255
     8e6:	26 1b       	sub	r18, r22
     8e8:	37 0b       	sbc	r19, r23
     8ea:	2a 31       	cpi	r18, 0x1A	; 26
     8ec:	31 05       	cpc	r19, r1
     8ee:	2c f0       	brlt	.+10     	; 0x8fa <__pack_f+0x76>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	2a c0       	rjmp	.+84     	; 0x94e <__pack_f+0xca>
     8fa:	b8 01       	movw	r22, r16
     8fc:	a7 01       	movw	r20, r14
     8fe:	02 2e       	mov	r0, r18
     900:	04 c0       	rjmp	.+8      	; 0x90a <__pack_f+0x86>
     902:	76 95       	lsr	r23
     904:	67 95       	ror	r22
     906:	57 95       	ror	r21
     908:	47 95       	ror	r20
     90a:	0a 94       	dec	r0
     90c:	d2 f7       	brpl	.-12     	; 0x902 <__pack_f+0x7e>
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	a0 e0       	ldi	r26, 0x00	; 0
     914:	b0 e0       	ldi	r27, 0x00	; 0
     916:	04 c0       	rjmp	.+8      	; 0x920 <__pack_f+0x9c>
     918:	88 0f       	add	r24, r24
     91a:	99 1f       	adc	r25, r25
     91c:	aa 1f       	adc	r26, r26
     91e:	bb 1f       	adc	r27, r27
     920:	2a 95       	dec	r18
     922:	d2 f7       	brpl	.-12     	; 0x918 <__pack_f+0x94>
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	a1 09       	sbc	r26, r1
     928:	b1 09       	sbc	r27, r1
     92a:	8e 21       	and	r24, r14
     92c:	9f 21       	and	r25, r15
     92e:	a0 23       	and	r26, r16
     930:	b1 23       	and	r27, r17
     932:	00 97       	sbiw	r24, 0x00	; 0
     934:	a1 05       	cpc	r26, r1
     936:	b1 05       	cpc	r27, r1
     938:	21 f0       	breq	.+8      	; 0x942 <__pack_f+0xbe>
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	a0 e0       	ldi	r26, 0x00	; 0
     940:	b0 e0       	ldi	r27, 0x00	; 0
     942:	9a 01       	movw	r18, r20
     944:	ab 01       	movw	r20, r22
     946:	28 2b       	or	r18, r24
     948:	39 2b       	or	r19, r25
     94a:	4a 2b       	or	r20, r26
     94c:	5b 2b       	or	r21, r27
     94e:	da 01       	movw	r26, r20
     950:	c9 01       	movw	r24, r18
     952:	8f 77       	andi	r24, 0x7F	; 127
     954:	90 70       	andi	r25, 0x00	; 0
     956:	a0 70       	andi	r26, 0x00	; 0
     958:	b0 70       	andi	r27, 0x00	; 0
     95a:	80 34       	cpi	r24, 0x40	; 64
     95c:	91 05       	cpc	r25, r1
     95e:	a1 05       	cpc	r26, r1
     960:	b1 05       	cpc	r27, r1
     962:	39 f4       	brne	.+14     	; 0x972 <__pack_f+0xee>
     964:	27 ff       	sbrs	r18, 7
     966:	09 c0       	rjmp	.+18     	; 0x97a <__pack_f+0xf6>
     968:	20 5c       	subi	r18, 0xC0	; 192
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	4f 4f       	sbci	r20, 0xFF	; 255
     96e:	5f 4f       	sbci	r21, 0xFF	; 255
     970:	04 c0       	rjmp	.+8      	; 0x97a <__pack_f+0xf6>
     972:	21 5c       	subi	r18, 0xC1	; 193
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	4f 4f       	sbci	r20, 0xFF	; 255
     978:	5f 4f       	sbci	r21, 0xFF	; 255
     97a:	e0 e0       	ldi	r30, 0x00	; 0
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	20 30       	cpi	r18, 0x00	; 0
     980:	a0 e0       	ldi	r26, 0x00	; 0
     982:	3a 07       	cpc	r19, r26
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	4a 07       	cpc	r20, r26
     988:	a0 e4       	ldi	r26, 0x40	; 64
     98a:	5a 07       	cpc	r21, r26
     98c:	10 f0       	brcs	.+4      	; 0x992 <__pack_f+0x10e>
     98e:	e1 e0       	ldi	r30, 0x01	; 1
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	79 01       	movw	r14, r18
     994:	8a 01       	movw	r16, r20
     996:	27 c0       	rjmp	.+78     	; 0x9e6 <__pack_f+0x162>
     998:	60 38       	cpi	r22, 0x80	; 128
     99a:	71 05       	cpc	r23, r1
     99c:	64 f5       	brge	.+88     	; 0x9f6 <__pack_f+0x172>
     99e:	fb 01       	movw	r30, r22
     9a0:	e1 58       	subi	r30, 0x81	; 129
     9a2:	ff 4f       	sbci	r31, 0xFF	; 255
     9a4:	d8 01       	movw	r26, r16
     9a6:	c7 01       	movw	r24, r14
     9a8:	8f 77       	andi	r24, 0x7F	; 127
     9aa:	90 70       	andi	r25, 0x00	; 0
     9ac:	a0 70       	andi	r26, 0x00	; 0
     9ae:	b0 70       	andi	r27, 0x00	; 0
     9b0:	80 34       	cpi	r24, 0x40	; 64
     9b2:	91 05       	cpc	r25, r1
     9b4:	a1 05       	cpc	r26, r1
     9b6:	b1 05       	cpc	r27, r1
     9b8:	39 f4       	brne	.+14     	; 0x9c8 <__pack_f+0x144>
     9ba:	e7 fe       	sbrs	r14, 7
     9bc:	0d c0       	rjmp	.+26     	; 0x9d8 <__pack_f+0x154>
     9be:	80 e4       	ldi	r24, 0x40	; 64
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	a0 e0       	ldi	r26, 0x00	; 0
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <__pack_f+0x14c>
     9c8:	8f e3       	ldi	r24, 0x3F	; 63
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	a0 e0       	ldi	r26, 0x00	; 0
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	e8 0e       	add	r14, r24
     9d2:	f9 1e       	adc	r15, r25
     9d4:	0a 1f       	adc	r16, r26
     9d6:	1b 1f       	adc	r17, r27
     9d8:	17 ff       	sbrs	r17, 7
     9da:	05 c0       	rjmp	.+10     	; 0x9e6 <__pack_f+0x162>
     9dc:	16 95       	lsr	r17
     9de:	07 95       	ror	r16
     9e0:	f7 94       	ror	r15
     9e2:	e7 94       	ror	r14
     9e4:	31 96       	adiw	r30, 0x01	; 1
     9e6:	87 e0       	ldi	r24, 0x07	; 7
     9e8:	16 95       	lsr	r17
     9ea:	07 95       	ror	r16
     9ec:	f7 94       	ror	r15
     9ee:	e7 94       	ror	r14
     9f0:	8a 95       	dec	r24
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__pack_f+0x164>
     9f4:	05 c0       	rjmp	.+10     	; 0xa00 <__pack_f+0x17c>
     9f6:	ee 24       	eor	r14, r14
     9f8:	ff 24       	eor	r15, r15
     9fa:	87 01       	movw	r16, r14
     9fc:	ef ef       	ldi	r30, 0xFF	; 255
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	6e 2f       	mov	r22, r30
     a02:	67 95       	ror	r22
     a04:	66 27       	eor	r22, r22
     a06:	67 95       	ror	r22
     a08:	90 2f       	mov	r25, r16
     a0a:	9f 77       	andi	r25, 0x7F	; 127
     a0c:	d7 94       	ror	r13
     a0e:	dd 24       	eor	r13, r13
     a10:	d7 94       	ror	r13
     a12:	8e 2f       	mov	r24, r30
     a14:	86 95       	lsr	r24
     a16:	49 2f       	mov	r20, r25
     a18:	46 2b       	or	r20, r22
     a1a:	58 2f       	mov	r21, r24
     a1c:	5d 29       	or	r21, r13
     a1e:	b7 01       	movw	r22, r14
     a20:	ca 01       	movw	r24, r20
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	ff 90       	pop	r15
     a28:	ef 90       	pop	r14
     a2a:	df 90       	pop	r13
     a2c:	08 95       	ret

00000a2e <__unpack_f>:
     a2e:	fc 01       	movw	r30, r24
     a30:	db 01       	movw	r26, r22
     a32:	40 81       	ld	r20, Z
     a34:	51 81       	ldd	r21, Z+1	; 0x01
     a36:	22 81       	ldd	r18, Z+2	; 0x02
     a38:	62 2f       	mov	r22, r18
     a3a:	6f 77       	andi	r22, 0x7F	; 127
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	22 1f       	adc	r18, r18
     a40:	22 27       	eor	r18, r18
     a42:	22 1f       	adc	r18, r18
     a44:	93 81       	ldd	r25, Z+3	; 0x03
     a46:	89 2f       	mov	r24, r25
     a48:	88 0f       	add	r24, r24
     a4a:	82 2b       	or	r24, r18
     a4c:	28 2f       	mov	r18, r24
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	99 1f       	adc	r25, r25
     a52:	99 27       	eor	r25, r25
     a54:	99 1f       	adc	r25, r25
     a56:	11 96       	adiw	r26, 0x01	; 1
     a58:	9c 93       	st	X, r25
     a5a:	11 97       	sbiw	r26, 0x01	; 1
     a5c:	21 15       	cp	r18, r1
     a5e:	31 05       	cpc	r19, r1
     a60:	a9 f5       	brne	.+106    	; 0xacc <__unpack_f+0x9e>
     a62:	41 15       	cp	r20, r1
     a64:	51 05       	cpc	r21, r1
     a66:	61 05       	cpc	r22, r1
     a68:	71 05       	cpc	r23, r1
     a6a:	11 f4       	brne	.+4      	; 0xa70 <__unpack_f+0x42>
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	37 c0       	rjmp	.+110    	; 0xade <__unpack_f+0xb0>
     a70:	82 e8       	ldi	r24, 0x82	; 130
     a72:	9f ef       	ldi	r25, 0xFF	; 255
     a74:	13 96       	adiw	r26, 0x03	; 3
     a76:	9c 93       	st	X, r25
     a78:	8e 93       	st	-X, r24
     a7a:	12 97       	sbiw	r26, 0x02	; 2
     a7c:	9a 01       	movw	r18, r20
     a7e:	ab 01       	movw	r20, r22
     a80:	67 e0       	ldi	r22, 0x07	; 7
     a82:	22 0f       	add	r18, r18
     a84:	33 1f       	adc	r19, r19
     a86:	44 1f       	adc	r20, r20
     a88:	55 1f       	adc	r21, r21
     a8a:	6a 95       	dec	r22
     a8c:	d1 f7       	brne	.-12     	; 0xa82 <__unpack_f+0x54>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	8c 93       	st	X, r24
     a92:	0d c0       	rjmp	.+26     	; 0xaae <__unpack_f+0x80>
     a94:	22 0f       	add	r18, r18
     a96:	33 1f       	adc	r19, r19
     a98:	44 1f       	adc	r20, r20
     a9a:	55 1f       	adc	r21, r21
     a9c:	12 96       	adiw	r26, 0x02	; 2
     a9e:	8d 91       	ld	r24, X+
     aa0:	9c 91       	ld	r25, X
     aa2:	13 97       	sbiw	r26, 0x03	; 3
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	13 96       	adiw	r26, 0x03	; 3
     aa8:	9c 93       	st	X, r25
     aaa:	8e 93       	st	-X, r24
     aac:	12 97       	sbiw	r26, 0x02	; 2
     aae:	20 30       	cpi	r18, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	38 07       	cpc	r19, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	48 07       	cpc	r20, r24
     ab8:	80 e4       	ldi	r24, 0x40	; 64
     aba:	58 07       	cpc	r21, r24
     abc:	58 f3       	brcs	.-42     	; 0xa94 <__unpack_f+0x66>
     abe:	14 96       	adiw	r26, 0x04	; 4
     ac0:	2d 93       	st	X+, r18
     ac2:	3d 93       	st	X+, r19
     ac4:	4d 93       	st	X+, r20
     ac6:	5c 93       	st	X, r21
     ac8:	17 97       	sbiw	r26, 0x07	; 7
     aca:	08 95       	ret
     acc:	2f 3f       	cpi	r18, 0xFF	; 255
     ace:	31 05       	cpc	r19, r1
     ad0:	79 f4       	brne	.+30     	; 0xaf0 <__unpack_f+0xc2>
     ad2:	41 15       	cp	r20, r1
     ad4:	51 05       	cpc	r21, r1
     ad6:	61 05       	cpc	r22, r1
     ad8:	71 05       	cpc	r23, r1
     ada:	19 f4       	brne	.+6      	; 0xae2 <__unpack_f+0xb4>
     adc:	84 e0       	ldi	r24, 0x04	; 4
     ade:	8c 93       	st	X, r24
     ae0:	08 95       	ret
     ae2:	64 ff       	sbrs	r22, 4
     ae4:	03 c0       	rjmp	.+6      	; 0xaec <__unpack_f+0xbe>
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	8c 93       	st	X, r24
     aea:	12 c0       	rjmp	.+36     	; 0xb10 <__unpack_f+0xe2>
     aec:	1c 92       	st	X, r1
     aee:	10 c0       	rjmp	.+32     	; 0xb10 <__unpack_f+0xe2>
     af0:	2f 57       	subi	r18, 0x7F	; 127
     af2:	30 40       	sbci	r19, 0x00	; 0
     af4:	13 96       	adiw	r26, 0x03	; 3
     af6:	3c 93       	st	X, r19
     af8:	2e 93       	st	-X, r18
     afa:	12 97       	sbiw	r26, 0x02	; 2
     afc:	83 e0       	ldi	r24, 0x03	; 3
     afe:	8c 93       	st	X, r24
     b00:	87 e0       	ldi	r24, 0x07	; 7
     b02:	44 0f       	add	r20, r20
     b04:	55 1f       	adc	r21, r21
     b06:	66 1f       	adc	r22, r22
     b08:	77 1f       	adc	r23, r23
     b0a:	8a 95       	dec	r24
     b0c:	d1 f7       	brne	.-12     	; 0xb02 <__unpack_f+0xd4>
     b0e:	70 64       	ori	r23, 0x40	; 64
     b10:	14 96       	adiw	r26, 0x04	; 4
     b12:	4d 93       	st	X+, r20
     b14:	5d 93       	st	X+, r21
     b16:	6d 93       	st	X+, r22
     b18:	7c 93       	st	X, r23
     b1a:	17 97       	sbiw	r26, 0x07	; 7
     b1c:	08 95       	ret

00000b1e <__fpcmp_parts_f>:
     b1e:	1f 93       	push	r17
     b20:	dc 01       	movw	r26, r24
     b22:	fb 01       	movw	r30, r22
     b24:	9c 91       	ld	r25, X
     b26:	92 30       	cpi	r25, 0x02	; 2
     b28:	08 f4       	brcc	.+2      	; 0xb2c <__fpcmp_parts_f+0xe>
     b2a:	47 c0       	rjmp	.+142    	; 0xbba <__fpcmp_parts_f+0x9c>
     b2c:	80 81       	ld	r24, Z
     b2e:	82 30       	cpi	r24, 0x02	; 2
     b30:	08 f4       	brcc	.+2      	; 0xb34 <__fpcmp_parts_f+0x16>
     b32:	43 c0       	rjmp	.+134    	; 0xbba <__fpcmp_parts_f+0x9c>
     b34:	94 30       	cpi	r25, 0x04	; 4
     b36:	51 f4       	brne	.+20     	; 0xb4c <__fpcmp_parts_f+0x2e>
     b38:	11 96       	adiw	r26, 0x01	; 1
     b3a:	1c 91       	ld	r17, X
     b3c:	84 30       	cpi	r24, 0x04	; 4
     b3e:	99 f5       	brne	.+102    	; 0xba6 <__fpcmp_parts_f+0x88>
     b40:	81 81       	ldd	r24, Z+1	; 0x01
     b42:	68 2f       	mov	r22, r24
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	61 1b       	sub	r22, r17
     b48:	71 09       	sbc	r23, r1
     b4a:	3f c0       	rjmp	.+126    	; 0xbca <__fpcmp_parts_f+0xac>
     b4c:	84 30       	cpi	r24, 0x04	; 4
     b4e:	21 f0       	breq	.+8      	; 0xb58 <__fpcmp_parts_f+0x3a>
     b50:	92 30       	cpi	r25, 0x02	; 2
     b52:	31 f4       	brne	.+12     	; 0xb60 <__fpcmp_parts_f+0x42>
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	b9 f1       	breq	.+110    	; 0xbc6 <__fpcmp_parts_f+0xa8>
     b58:	81 81       	ldd	r24, Z+1	; 0x01
     b5a:	88 23       	and	r24, r24
     b5c:	89 f1       	breq	.+98     	; 0xbc0 <__fpcmp_parts_f+0xa2>
     b5e:	2d c0       	rjmp	.+90     	; 0xbba <__fpcmp_parts_f+0x9c>
     b60:	11 96       	adiw	r26, 0x01	; 1
     b62:	1c 91       	ld	r17, X
     b64:	11 97       	sbiw	r26, 0x01	; 1
     b66:	82 30       	cpi	r24, 0x02	; 2
     b68:	f1 f0       	breq	.+60     	; 0xba6 <__fpcmp_parts_f+0x88>
     b6a:	81 81       	ldd	r24, Z+1	; 0x01
     b6c:	18 17       	cp	r17, r24
     b6e:	d9 f4       	brne	.+54     	; 0xba6 <__fpcmp_parts_f+0x88>
     b70:	12 96       	adiw	r26, 0x02	; 2
     b72:	2d 91       	ld	r18, X+
     b74:	3c 91       	ld	r19, X
     b76:	13 97       	sbiw	r26, 0x03	; 3
     b78:	82 81       	ldd	r24, Z+2	; 0x02
     b7a:	93 81       	ldd	r25, Z+3	; 0x03
     b7c:	82 17       	cp	r24, r18
     b7e:	93 07       	cpc	r25, r19
     b80:	94 f0       	brlt	.+36     	; 0xba6 <__fpcmp_parts_f+0x88>
     b82:	28 17       	cp	r18, r24
     b84:	39 07       	cpc	r19, r25
     b86:	bc f0       	brlt	.+46     	; 0xbb6 <__fpcmp_parts_f+0x98>
     b88:	14 96       	adiw	r26, 0x04	; 4
     b8a:	8d 91       	ld	r24, X+
     b8c:	9d 91       	ld	r25, X+
     b8e:	0d 90       	ld	r0, X+
     b90:	bc 91       	ld	r27, X
     b92:	a0 2d       	mov	r26, r0
     b94:	24 81       	ldd	r18, Z+4	; 0x04
     b96:	35 81       	ldd	r19, Z+5	; 0x05
     b98:	46 81       	ldd	r20, Z+6	; 0x06
     b9a:	57 81       	ldd	r21, Z+7	; 0x07
     b9c:	28 17       	cp	r18, r24
     b9e:	39 07       	cpc	r19, r25
     ba0:	4a 07       	cpc	r20, r26
     ba2:	5b 07       	cpc	r21, r27
     ba4:	18 f4       	brcc	.+6      	; 0xbac <__fpcmp_parts_f+0x8e>
     ba6:	11 23       	and	r17, r17
     ba8:	41 f0       	breq	.+16     	; 0xbba <__fpcmp_parts_f+0x9c>
     baa:	0a c0       	rjmp	.+20     	; 0xbc0 <__fpcmp_parts_f+0xa2>
     bac:	82 17       	cp	r24, r18
     bae:	93 07       	cpc	r25, r19
     bb0:	a4 07       	cpc	r26, r20
     bb2:	b5 07       	cpc	r27, r21
     bb4:	40 f4       	brcc	.+16     	; 0xbc6 <__fpcmp_parts_f+0xa8>
     bb6:	11 23       	and	r17, r17
     bb8:	19 f0       	breq	.+6      	; 0xbc0 <__fpcmp_parts_f+0xa2>
     bba:	61 e0       	ldi	r22, 0x01	; 1
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	05 c0       	rjmp	.+10     	; 0xbca <__fpcmp_parts_f+0xac>
     bc0:	6f ef       	ldi	r22, 0xFF	; 255
     bc2:	7f ef       	ldi	r23, 0xFF	; 255
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <__fpcmp_parts_f+0xac>
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	cb 01       	movw	r24, r22
     bcc:	1f 91       	pop	r17
     bce:	08 95       	ret

00000bd0 <DcMotor_Init>:
#include "dc_motor.h"
#include "std_types.h"
#include "gpio.h"

void DcMotor_Init(void)
{
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * setting the pins directions
	 */
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN1_ID , PIN_OUTPUT);
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	41 e0       	ldi	r20, 0x01	; 1
     bde:	0e 94 2a 06 	call	0xc54	; 0xc54 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN2_ID, PIN_OUTPUT);
     be2:	82 e0       	ldi	r24, 0x02	; 2
     be4:	62 e0       	ldi	r22, 0x02	; 2
     be6:	41 e0       	ldi	r20, 0x01	; 1
     be8:	0e 94 2a 06 	call	0xc54	; 0xc54 <GPIO_setupPinDirection>

	/*
	 * setting the initial value = 0 ;
	 */
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN1_ID, LOGIC_LOW);
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN2_ID, LOGIC_LOW);
     bf6:	82 e0       	ldi	r24, 0x02	; 2
     bf8:	62 e0       	ldi	r22, 0x02	; 2
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_writePin>

}
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <DCMotor_Rotate>:

void DCMotor_Rotate (DcMotor_State state,uint8 speed)
{
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <DCMotor_Rotate+0x6>
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * PWM_Timer0_Init(speed);
	 * ama a3ml l tany bs
	 */

	if (state == CW)
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	88 23       	and	r24, r24
     c18:	59 f4       	brne	.+22     	; 0xc30 <DCMotor_Rotate+0x2a>
	{
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN1_ID, LOGIC_HIGH);
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	41 e0       	ldi	r20, 0x01	; 1
     c20:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN2_ID, LOGIC_LOW);
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	62 e0       	ldi	r22, 0x02	; 2
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_writePin>
     c2e:	0d c0       	rjmp	.+26     	; 0xc4a <DCMotor_Rotate+0x44>
	}
	else if (state == A_CW)
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	51 f4       	brne	.+20     	; 0xc4a <DCMotor_Rotate+0x44>
	{
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN1_ID, LOGIC_LOW);
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	61 e0       	ldi	r22, 0x01	; 1
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN2_ID, LOGIC_HIGH);
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	62 e0       	ldi	r22, 0x02	; 2
     c44:	41 e0       	ldi	r20, 0x01	; 1
     c46:	0e 94 15 07 	call	0xe2a	; 0xe2a <GPIO_writePin>
	}
}
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	00 d0       	rcall	.+0      	; 0xc5a <GPIO_setupPinDirection+0x6>
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <GPIO_setupPinDirection+0x8>
     c5c:	0f 92       	push	r0
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	6a 83       	std	Y+2, r22	; 0x02
     c66:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	88 30       	cpi	r24, 0x08	; 8
     c6c:	08 f0       	brcs	.+2      	; 0xc70 <GPIO_setupPinDirection+0x1c>
     c6e:	d5 c0       	rjmp	.+426    	; 0xe1a <GPIO_setupPinDirection+0x1c6>
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	84 30       	cpi	r24, 0x04	; 4
     c74:	08 f0       	brcs	.+2      	; 0xc78 <GPIO_setupPinDirection+0x24>
     c76:	d1 c0       	rjmp	.+418    	; 0xe1a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	3d 83       	std	Y+5, r19	; 0x05
     c80:	2c 83       	std	Y+4, r18	; 0x04
     c82:	8c 81       	ldd	r24, Y+4	; 0x04
     c84:	9d 81       	ldd	r25, Y+5	; 0x05
     c86:	81 30       	cpi	r24, 0x01	; 1
     c88:	91 05       	cpc	r25, r1
     c8a:	09 f4       	brne	.+2      	; 0xc8e <GPIO_setupPinDirection+0x3a>
     c8c:	43 c0       	rjmp	.+134    	; 0xd14 <GPIO_setupPinDirection+0xc0>
     c8e:	2c 81       	ldd	r18, Y+4	; 0x04
     c90:	3d 81       	ldd	r19, Y+5	; 0x05
     c92:	22 30       	cpi	r18, 0x02	; 2
     c94:	31 05       	cpc	r19, r1
     c96:	2c f4       	brge	.+10     	; 0xca2 <GPIO_setupPinDirection+0x4e>
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	9d 81       	ldd	r25, Y+5	; 0x05
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	71 f0       	breq	.+28     	; 0xcbc <GPIO_setupPinDirection+0x68>
     ca0:	bc c0       	rjmp	.+376    	; 0xe1a <GPIO_setupPinDirection+0x1c6>
     ca2:	2c 81       	ldd	r18, Y+4	; 0x04
     ca4:	3d 81       	ldd	r19, Y+5	; 0x05
     ca6:	22 30       	cpi	r18, 0x02	; 2
     ca8:	31 05       	cpc	r19, r1
     caa:	09 f4       	brne	.+2      	; 0xcae <GPIO_setupPinDirection+0x5a>
     cac:	5f c0       	rjmp	.+190    	; 0xd6c <GPIO_setupPinDirection+0x118>
     cae:	8c 81       	ldd	r24, Y+4	; 0x04
     cb0:	9d 81       	ldd	r25, Y+5	; 0x05
     cb2:	83 30       	cpi	r24, 0x03	; 3
     cb4:	91 05       	cpc	r25, r1
     cb6:	09 f4       	brne	.+2      	; 0xcba <GPIO_setupPinDirection+0x66>
     cb8:	85 c0       	rjmp	.+266    	; 0xdc4 <GPIO_setupPinDirection+0x170>
     cba:	af c0       	rjmp	.+350    	; 0xe1a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	a1 f4       	brne	.+40     	; 0xcea <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     cc2:	aa e3       	ldi	r26, 0x3A	; 58
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ea e3       	ldi	r30, 0x3A	; 58
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	48 2f       	mov	r20, r24
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <GPIO_setupPinDirection+0x8c>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <GPIO_setupPinDirection+0x88>
     ce4:	84 2b       	or	r24, r20
     ce6:	8c 93       	st	X, r24
     ce8:	98 c0       	rjmp	.+304    	; 0xe1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     cea:	aa e3       	ldi	r26, 0x3A	; 58
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	ea e3       	ldi	r30, 0x3A	; 58
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	48 2f       	mov	r20, r24
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 2e       	mov	r0, r18
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <GPIO_setupPinDirection+0xb4>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	0a 94       	dec	r0
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <GPIO_setupPinDirection+0xb0>
     d0c:	80 95       	com	r24
     d0e:	84 23       	and	r24, r20
     d10:	8c 93       	st	X, r24
     d12:	83 c0       	rjmp	.+262    	; 0xe1a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	a1 f4       	brne	.+40     	; 0xd42 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d1a:	a7 e3       	ldi	r26, 0x37	; 55
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e7 e3       	ldi	r30, 0x37	; 55
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	48 2f       	mov	r20, r24
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	02 2e       	mov	r0, r18
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <GPIO_setupPinDirection+0xe4>
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	0a 94       	dec	r0
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <GPIO_setupPinDirection+0xe0>
     d3c:	84 2b       	or	r24, r20
     d3e:	8c 93       	st	X, r24
     d40:	6c c0       	rjmp	.+216    	; 0xe1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     d42:	a7 e3       	ldi	r26, 0x37	; 55
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e7 e3       	ldi	r30, 0x37	; 55
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	48 2f       	mov	r20, r24
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	02 2e       	mov	r0, r18
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <GPIO_setupPinDirection+0x10c>
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	0a 94       	dec	r0
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <GPIO_setupPinDirection+0x108>
     d64:	80 95       	com	r24
     d66:	84 23       	and	r24, r20
     d68:	8c 93       	st	X, r24
     d6a:	57 c0       	rjmp	.+174    	; 0xe1a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	a1 f4       	brne	.+40     	; 0xd9a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     d72:	a4 e3       	ldi	r26, 0x34	; 52
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e4 e3       	ldi	r30, 0x34	; 52
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	48 2f       	mov	r20, r24
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <GPIO_setupPinDirection+0x13c>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <GPIO_setupPinDirection+0x138>
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
     d98:	40 c0       	rjmp	.+128    	; 0xe1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     d9a:	a4 e3       	ldi	r26, 0x34	; 52
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e4 e3       	ldi	r30, 0x34	; 52
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 2e       	mov	r0, r18
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <GPIO_setupPinDirection+0x164>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <GPIO_setupPinDirection+0x160>
     dbc:	80 95       	com	r24
     dbe:	84 23       	and	r24, r20
     dc0:	8c 93       	st	X, r24
     dc2:	2b c0       	rjmp	.+86     	; 0xe1a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	81 30       	cpi	r24, 0x01	; 1
     dc8:	a1 f4       	brne	.+40     	; 0xdf2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     dca:	a1 e3       	ldi	r26, 0x31	; 49
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e1 e3       	ldi	r30, 0x31	; 49
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	48 2f       	mov	r20, r24
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <GPIO_setupPinDirection+0x194>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <GPIO_setupPinDirection+0x190>
     dec:	84 2b       	or	r24, r20
     dee:	8c 93       	st	X, r24
     df0:	14 c0       	rjmp	.+40     	; 0xe1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     df2:	a1 e3       	ldi	r26, 0x31	; 49
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e1 e3       	ldi	r30, 0x31	; 49
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	48 2f       	mov	r20, r24
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <GPIO_setupPinDirection+0x1bc>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <GPIO_setupPinDirection+0x1b8>
     e14:	80 95       	com	r24
     e16:	84 23       	and	r24, r20
     e18:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <GPIO_writePin+0x6>
     e30:	00 d0       	rcall	.+0      	; 0xe32 <GPIO_writePin+0x8>
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	6a 83       	std	Y+2, r22	; 0x02
     e3c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	88 30       	cpi	r24, 0x08	; 8
     e42:	08 f0       	brcs	.+2      	; 0xe46 <GPIO_writePin+0x1c>
     e44:	d5 c0       	rjmp	.+426    	; 0xff0 <GPIO_writePin+0x1c6>
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	84 30       	cpi	r24, 0x04	; 4
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <GPIO_writePin+0x24>
     e4c:	d1 c0       	rjmp	.+418    	; 0xff0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3d 83       	std	Y+5, r19	; 0x05
     e56:	2c 83       	std	Y+4, r18	; 0x04
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	91 05       	cpc	r25, r1
     e60:	09 f4       	brne	.+2      	; 0xe64 <GPIO_writePin+0x3a>
     e62:	43 c0       	rjmp	.+134    	; 0xeea <GPIO_writePin+0xc0>
     e64:	2c 81       	ldd	r18, Y+4	; 0x04
     e66:	3d 81       	ldd	r19, Y+5	; 0x05
     e68:	22 30       	cpi	r18, 0x02	; 2
     e6a:	31 05       	cpc	r19, r1
     e6c:	2c f4       	brge	.+10     	; 0xe78 <GPIO_writePin+0x4e>
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	9d 81       	ldd	r25, Y+5	; 0x05
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	71 f0       	breq	.+28     	; 0xe92 <GPIO_writePin+0x68>
     e76:	bc c0       	rjmp	.+376    	; 0xff0 <GPIO_writePin+0x1c6>
     e78:	2c 81       	ldd	r18, Y+4	; 0x04
     e7a:	3d 81       	ldd	r19, Y+5	; 0x05
     e7c:	22 30       	cpi	r18, 0x02	; 2
     e7e:	31 05       	cpc	r19, r1
     e80:	09 f4       	brne	.+2      	; 0xe84 <GPIO_writePin+0x5a>
     e82:	5f c0       	rjmp	.+190    	; 0xf42 <GPIO_writePin+0x118>
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	9d 81       	ldd	r25, Y+5	; 0x05
     e88:	83 30       	cpi	r24, 0x03	; 3
     e8a:	91 05       	cpc	r25, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <GPIO_writePin+0x66>
     e8e:	85 c0       	rjmp	.+266    	; 0xf9a <GPIO_writePin+0x170>
     e90:	af c0       	rjmp	.+350    	; 0xff0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	a1 f4       	brne	.+40     	; 0xec0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     e98:	ab e3       	ldi	r26, 0x3B	; 59
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	eb e3       	ldi	r30, 0x3B	; 59
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <GPIO_writePin+0x8c>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <GPIO_writePin+0x88>
     eba:	84 2b       	or	r24, r20
     ebc:	8c 93       	st	X, r24
     ebe:	98 c0       	rjmp	.+304    	; 0xff0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     ec0:	ab e3       	ldi	r26, 0x3B	; 59
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	eb e3       	ldi	r30, 0x3B	; 59
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <GPIO_writePin+0xb4>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <GPIO_writePin+0xb0>
     ee2:	80 95       	com	r24
     ee4:	84 23       	and	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	83 c0       	rjmp	.+262    	; 0xff0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	a1 f4       	brne	.+40     	; 0xf18 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     ef0:	a8 e3       	ldi	r26, 0x38	; 56
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e8 e3       	ldi	r30, 0x38	; 56
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 2e       	mov	r0, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <GPIO_writePin+0xe4>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <GPIO_writePin+0xe0>
     f12:	84 2b       	or	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	6c c0       	rjmp	.+216    	; 0xff0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     f18:	a8 e3       	ldi	r26, 0x38	; 56
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e8 e3       	ldi	r30, 0x38	; 56
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <GPIO_writePin+0x10c>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <GPIO_writePin+0x108>
     f3a:	80 95       	com	r24
     f3c:	84 23       	and	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	57 c0       	rjmp	.+174    	; 0xff0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	a1 f4       	brne	.+40     	; 0xf70 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f48:	a5 e3       	ldi	r26, 0x35	; 53
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e5 e3       	ldi	r30, 0x35	; 53
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <GPIO_writePin+0x13c>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <GPIO_writePin+0x138>
     f6a:	84 2b       	or	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	40 c0       	rjmp	.+128    	; 0xff0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     f70:	a5 e3       	ldi	r26, 0x35	; 53
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e5 e3       	ldi	r30, 0x35	; 53
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <GPIO_writePin+0x164>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <GPIO_writePin+0x160>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	2b c0       	rjmp	.+86     	; 0xff0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	a1 f4       	brne	.+40     	; 0xfc8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     fa0:	a2 e3       	ldi	r26, 0x32	; 50
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e2 e3       	ldi	r30, 0x32	; 50
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <GPIO_writePin+0x194>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <GPIO_writePin+0x190>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	14 c0       	rjmp	.+40     	; 0xff0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     fc8:	a2 e3       	ldi	r26, 0x32	; 50
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e2 e3       	ldi	r30, 0x32	; 50
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <GPIO_writePin+0x1bc>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <GPIO_writePin+0x1b8>
     fea:	80 95       	com	r24
     fec:	84 23       	and	r24, r20
     fee:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	00 d0       	rcall	.+0      	; 0x1006 <GPIO_readPin+0x6>
    1006:	00 d0       	rcall	.+0      	; 0x1008 <GPIO_readPin+0x8>
    1008:	0f 92       	push	r0
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	8a 83       	std	Y+2, r24	; 0x02
    1010:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1012:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	88 30       	cpi	r24, 0x08	; 8
    1018:	08 f0       	brcs	.+2      	; 0x101c <GPIO_readPin+0x1c>
    101a:	84 c0       	rjmp	.+264    	; 0x1124 <GPIO_readPin+0x124>
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	08 f0       	brcs	.+2      	; 0x1024 <GPIO_readPin+0x24>
    1022:	80 c0       	rjmp	.+256    	; 0x1124 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	3d 83       	std	Y+5, r19	; 0x05
    102c:	2c 83       	std	Y+4, r18	; 0x04
    102e:	4c 81       	ldd	r20, Y+4	; 0x04
    1030:	5d 81       	ldd	r21, Y+5	; 0x05
    1032:	41 30       	cpi	r20, 0x01	; 1
    1034:	51 05       	cpc	r21, r1
    1036:	79 f1       	breq	.+94     	; 0x1096 <GPIO_readPin+0x96>
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	9d 81       	ldd	r25, Y+5	; 0x05
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	91 05       	cpc	r25, r1
    1040:	34 f4       	brge	.+12     	; 0x104e <GPIO_readPin+0x4e>
    1042:	2c 81       	ldd	r18, Y+4	; 0x04
    1044:	3d 81       	ldd	r19, Y+5	; 0x05
    1046:	21 15       	cp	r18, r1
    1048:	31 05       	cpc	r19, r1
    104a:	69 f0       	breq	.+26     	; 0x1066 <GPIO_readPin+0x66>
    104c:	6b c0       	rjmp	.+214    	; 0x1124 <GPIO_readPin+0x124>
    104e:	4c 81       	ldd	r20, Y+4	; 0x04
    1050:	5d 81       	ldd	r21, Y+5	; 0x05
    1052:	42 30       	cpi	r20, 0x02	; 2
    1054:	51 05       	cpc	r21, r1
    1056:	b9 f1       	breq	.+110    	; 0x10c6 <GPIO_readPin+0xc6>
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	9d 81       	ldd	r25, Y+5	; 0x05
    105c:	83 30       	cpi	r24, 0x03	; 3
    105e:	91 05       	cpc	r25, r1
    1060:	09 f4       	brne	.+2      	; 0x1064 <GPIO_readPin+0x64>
    1062:	49 c0       	rjmp	.+146    	; 0x10f6 <GPIO_readPin+0xf6>
    1064:	5f c0       	rjmp	.+190    	; 0x1124 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1066:	e9 e3       	ldi	r30, 0x39	; 57
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	a9 01       	movw	r20, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <GPIO_readPin+0x7e>
    107a:	55 95       	asr	r21
    107c:	47 95       	ror	r20
    107e:	8a 95       	dec	r24
    1080:	e2 f7       	brpl	.-8      	; 0x107a <GPIO_readPin+0x7a>
    1082:	ca 01       	movw	r24, r20
    1084:	81 70       	andi	r24, 0x01	; 1
    1086:	90 70       	andi	r25, 0x00	; 0
    1088:	88 23       	and	r24, r24
    108a:	19 f0       	breq	.+6      	; 0x1092 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	49 c0       	rjmp	.+146    	; 0x1124 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1092:	19 82       	std	Y+1, r1	; 0x01
    1094:	47 c0       	rjmp	.+142    	; 0x1124 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1096:	e6 e3       	ldi	r30, 0x36	; 54
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	a9 01       	movw	r20, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <GPIO_readPin+0xae>
    10aa:	55 95       	asr	r21
    10ac:	47 95       	ror	r20
    10ae:	8a 95       	dec	r24
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <GPIO_readPin+0xaa>
    10b2:	ca 01       	movw	r24, r20
    10b4:	81 70       	andi	r24, 0x01	; 1
    10b6:	90 70       	andi	r25, 0x00	; 0
    10b8:	88 23       	and	r24, r24
    10ba:	19 f0       	breq	.+6      	; 0x10c2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	31 c0       	rjmp	.+98     	; 0x1124 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10c2:	19 82       	std	Y+1, r1	; 0x01
    10c4:	2f c0       	rjmp	.+94     	; 0x1124 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    10c6:	e3 e3       	ldi	r30, 0x33	; 51
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	a9 01       	movw	r20, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <GPIO_readPin+0xde>
    10da:	55 95       	asr	r21
    10dc:	47 95       	ror	r20
    10de:	8a 95       	dec	r24
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <GPIO_readPin+0xda>
    10e2:	ca 01       	movw	r24, r20
    10e4:	81 70       	andi	r24, 0x01	; 1
    10e6:	90 70       	andi	r25, 0x00	; 0
    10e8:	88 23       	and	r24, r24
    10ea:	19 f0       	breq	.+6      	; 0x10f2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	19 c0       	rjmp	.+50     	; 0x1124 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10f2:	19 82       	std	Y+1, r1	; 0x01
    10f4:	17 c0       	rjmp	.+46     	; 0x1124 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    10f6:	e0 e3       	ldi	r30, 0x30	; 48
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	a9 01       	movw	r20, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <GPIO_readPin+0x10e>
    110a:	55 95       	asr	r21
    110c:	47 95       	ror	r20
    110e:	8a 95       	dec	r24
    1110:	e2 f7       	brpl	.-8      	; 0x110a <GPIO_readPin+0x10a>
    1112:	ca 01       	movw	r24, r20
    1114:	81 70       	andi	r24, 0x01	; 1
    1116:	90 70       	andi	r25, 0x00	; 0
    1118:	88 23       	and	r24, r24
    111a:	19 f0       	breq	.+6      	; 0x1122 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1122:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1124:	89 81       	ldd	r24, Y+1	; 0x01
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <GPIO_setupPortDirection+0x6>
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_setupPortDirection+0x8>
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	84 30       	cpi	r24, 0x04	; 4
    114a:	90 f5       	brcc	.+100    	; 0x11b0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	3c 83       	std	Y+4, r19	; 0x04
    1154:	2b 83       	std	Y+3, r18	; 0x03
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	91 05       	cpc	r25, r1
    115e:	d1 f0       	breq	.+52     	; 0x1194 <GPIO_setupPortDirection+0x5e>
    1160:	2b 81       	ldd	r18, Y+3	; 0x03
    1162:	3c 81       	ldd	r19, Y+4	; 0x04
    1164:	22 30       	cpi	r18, 0x02	; 2
    1166:	31 05       	cpc	r19, r1
    1168:	2c f4       	brge	.+10     	; 0x1174 <GPIO_setupPortDirection+0x3e>
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	61 f0       	breq	.+24     	; 0x118a <GPIO_setupPortDirection+0x54>
    1172:	1e c0       	rjmp	.+60     	; 0x11b0 <GPIO_setupPortDirection+0x7a>
    1174:	2b 81       	ldd	r18, Y+3	; 0x03
    1176:	3c 81       	ldd	r19, Y+4	; 0x04
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	81 f0       	breq	.+32     	; 0x119e <GPIO_setupPortDirection+0x68>
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	91 05       	cpc	r25, r1
    1186:	81 f0       	breq	.+32     	; 0x11a8 <GPIO_setupPortDirection+0x72>
    1188:	13 c0       	rjmp	.+38     	; 0x11b0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    118a:	ea e3       	ldi	r30, 0x3A	; 58
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	80 83       	st	Z, r24
    1192:	0e c0       	rjmp	.+28     	; 0x11b0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1194:	e7 e3       	ldi	r30, 0x37	; 55
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	80 83       	st	Z, r24
    119c:	09 c0       	rjmp	.+18     	; 0x11b0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    119e:	e4 e3       	ldi	r30, 0x34	; 52
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	80 83       	st	Z, r24
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    11a8:	e1 e3       	ldi	r30, 0x31	; 49
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	80 83       	st	Z, r24
			break;
		}
	}
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <GPIO_writePort+0x6>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <GPIO_writePort+0x8>
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	84 30       	cpi	r24, 0x04	; 4
    11d2:	90 f5       	brcc	.+100    	; 0x1238 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	3c 83       	std	Y+4, r19	; 0x04
    11dc:	2b 83       	std	Y+3, r18	; 0x03
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	9c 81       	ldd	r25, Y+4	; 0x04
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	91 05       	cpc	r25, r1
    11e6:	d1 f0       	breq	.+52     	; 0x121c <GPIO_writePort+0x5e>
    11e8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ea:	3c 81       	ldd	r19, Y+4	; 0x04
    11ec:	22 30       	cpi	r18, 0x02	; 2
    11ee:	31 05       	cpc	r19, r1
    11f0:	2c f4       	brge	.+10     	; 0x11fc <GPIO_writePort+0x3e>
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	61 f0       	breq	.+24     	; 0x1212 <GPIO_writePort+0x54>
    11fa:	1e c0       	rjmp	.+60     	; 0x1238 <GPIO_writePort+0x7a>
    11fc:	2b 81       	ldd	r18, Y+3	; 0x03
    11fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1200:	22 30       	cpi	r18, 0x02	; 2
    1202:	31 05       	cpc	r19, r1
    1204:	81 f0       	breq	.+32     	; 0x1226 <GPIO_writePort+0x68>
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	83 30       	cpi	r24, 0x03	; 3
    120c:	91 05       	cpc	r25, r1
    120e:	81 f0       	breq	.+32     	; 0x1230 <GPIO_writePort+0x72>
    1210:	13 c0       	rjmp	.+38     	; 0x1238 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1212:	eb e3       	ldi	r30, 0x3B	; 59
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	80 83       	st	Z, r24
    121a:	0e c0       	rjmp	.+28     	; 0x1238 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    121c:	e8 e3       	ldi	r30, 0x38	; 56
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	80 83       	st	Z, r24
    1224:	09 c0       	rjmp	.+18     	; 0x1238 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1226:	e5 e3       	ldi	r30, 0x35	; 53
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	80 83       	st	Z, r24
    122e:	04 c0       	rjmp	.+8      	; 0x1238 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1230:	e2 e3       	ldi	r30, 0x32	; 50
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	80 83       	st	Z, r24
			break;
		}
	}
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <GPIO_readPort+0x6>
    124c:	00 d0       	rcall	.+0      	; 0x124e <GPIO_readPort+0x8>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1254:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	90 f5       	brcc	.+100    	; 0x12c0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	3c 83       	std	Y+4, r19	; 0x04
    1264:	2b 83       	std	Y+3, r18	; 0x03
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	91 05       	cpc	r25, r1
    126e:	d1 f0       	breq	.+52     	; 0x12a4 <GPIO_readPort+0x5e>
    1270:	2b 81       	ldd	r18, Y+3	; 0x03
    1272:	3c 81       	ldd	r19, Y+4	; 0x04
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	2c f4       	brge	.+10     	; 0x1284 <GPIO_readPort+0x3e>
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	61 f0       	breq	.+24     	; 0x129a <GPIO_readPort+0x54>
    1282:	1e c0       	rjmp	.+60     	; 0x12c0 <GPIO_readPort+0x7a>
    1284:	2b 81       	ldd	r18, Y+3	; 0x03
    1286:	3c 81       	ldd	r19, Y+4	; 0x04
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	81 f0       	breq	.+32     	; 0x12ae <GPIO_readPort+0x68>
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	91 05       	cpc	r25, r1
    1296:	81 f0       	breq	.+32     	; 0x12b8 <GPIO_readPort+0x72>
    1298:	13 c0       	rjmp	.+38     	; 0x12c0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    129a:	e9 e3       	ldi	r30, 0x39	; 57
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	0e c0       	rjmp	.+28     	; 0x12c0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    12a4:	e6 e3       	ldi	r30, 0x36	; 54
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    12ae:	e3 e3       	ldi	r30, 0x33	; 51
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    12b8:	e0 e3       	ldi	r30, 0x30	; 48
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <main>:
 *      Author: hp
 */


int main(void)
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0

}
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <PWM_Timer0_Init>:
#include "dc_motor.h"
#include <avr/io.h>


void PWM_Timer0_Init(uint8 speed)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <PWM_Timer0_Init+0x6>
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	8a 83       	std	Y+2, r24	; 0x02
	/*Set Timer Initial value*/
	TCNT0 = 0;
    12ee:	e2 e5       	ldi	r30, 0x52	; 82
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	10 82       	st	Z, r1

	/*set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.*/
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	63 e0       	ldi	r22, 0x03	; 3
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	0e 94 2a 06 	call	0xc54	; 0xc54 <GPIO_setupPinDirection>

	/* set the speed of the motor */
	uint8 motor_speed= (uint8)((float)2.56*speed);
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	88 2f       	mov	r24, r24
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	aa 27       	eor	r26, r26
    1306:	97 fd       	sbrc	r25, 7
    1308:	a0 95       	com	r26
    130a:	ba 2f       	mov	r27, r26
    130c:	bc 01       	movw	r22, r24
    130e:	cd 01       	movw	r24, r26
    1310:	0e 94 41 03 	call	0x682	; 0x682 <__floatsisf>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	bc 01       	movw	r22, r24
    131a:	cd 01       	movw	r24, r26
    131c:	2a e0       	ldi	r18, 0x0A	; 10
    131e:	37 ed       	ldi	r19, 0xD7	; 215
    1320:	43 e2       	ldi	r20, 0x23	; 35
    1322:	50 e4       	ldi	r21, 0x40	; 64
    1324:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	89 83       	std	Y+1, r24	; 0x01
	OCR0  = motor_speed;
    133a:	ec e5       	ldi	r30, 0x5C	; 92
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	80 83       	st	Z, r24
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */

	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1342:	e3 e5       	ldi	r30, 0x53	; 83
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	8a e6       	ldi	r24, 0x6A	; 106
    1348:	80 83       	st	Z, r24


}
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <__prologue_saves__>:
    1354:	2f 92       	push	r2
    1356:	3f 92       	push	r3
    1358:	4f 92       	push	r4
    135a:	5f 92       	push	r5
    135c:	6f 92       	push	r6
    135e:	7f 92       	push	r7
    1360:	8f 92       	push	r8
    1362:	9f 92       	push	r9
    1364:	af 92       	push	r10
    1366:	bf 92       	push	r11
    1368:	cf 92       	push	r12
    136a:	df 92       	push	r13
    136c:	ef 92       	push	r14
    136e:	ff 92       	push	r15
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	ca 1b       	sub	r28, r26
    137e:	db 0b       	sbc	r29, r27
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	09 94       	ijmp

0000138c <__epilogue_restores__>:
    138c:	2a 88       	ldd	r2, Y+18	; 0x12
    138e:	39 88       	ldd	r3, Y+17	; 0x11
    1390:	48 88       	ldd	r4, Y+16	; 0x10
    1392:	5f 84       	ldd	r5, Y+15	; 0x0f
    1394:	6e 84       	ldd	r6, Y+14	; 0x0e
    1396:	7d 84       	ldd	r7, Y+13	; 0x0d
    1398:	8c 84       	ldd	r8, Y+12	; 0x0c
    139a:	9b 84       	ldd	r9, Y+11	; 0x0b
    139c:	aa 84       	ldd	r10, Y+10	; 0x0a
    139e:	b9 84       	ldd	r11, Y+9	; 0x09
    13a0:	c8 84       	ldd	r12, Y+8	; 0x08
    13a2:	df 80       	ldd	r13, Y+7	; 0x07
    13a4:	ee 80       	ldd	r14, Y+6	; 0x06
    13a6:	fd 80       	ldd	r15, Y+5	; 0x05
    13a8:	0c 81       	ldd	r16, Y+4	; 0x04
    13aa:	1b 81       	ldd	r17, Y+3	; 0x03
    13ac:	aa 81       	ldd	r26, Y+2	; 0x02
    13ae:	b9 81       	ldd	r27, Y+1	; 0x01
    13b0:	ce 0f       	add	r28, r30
    13b2:	d1 1d       	adc	r29, r1
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	ed 01       	movw	r28, r26
    13c0:	08 95       	ret

000013c2 <_exit>:
    13c2:	f8 94       	cli

000013c4 <__stop_program>:
    13c4:	ff cf       	rjmp	.-2      	; 0x13c4 <__stop_program>
