/*
 * lcd.c
 *
 *  Created on: 1 Oct 2022
 *      Author: hp
 *      lcd c file
 *      containing function implementations for 4 bit mode and 8 bit modes
 */

/*-------------------------------------------------------------------------*/
/*-------------------------------INCLUDES----------------------------------*/
/*-------------------------------------------------------------------------*/

#include "lcd.h"
#include "gpio.h"
#include <util/delay.h>
#include "common_macros.h" /* For GET_BIT Macro */

/*-------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*/
/*-------------------------FUNCTION DEFINITIONS----------------------------*/
/*-------------------------------------------------------------------------*/
void LCD_SendCommand (uint8 command)
{
	//RS=0
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);

	//delay 1u
	_delay_ms(1);

	//enable =1
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);

	//delay 1u
	_delay_ms(1);

	//send command
	GPIO_writePort(LCD_DATA_PORT_ID, command);

	//delay 1u
	_delay_ms(1);

	//enable =0
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);

	//delay 1u
	_delay_ms(1);

}

void LCD_display_Character (uint8 character)
{
	//RS=1
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);

	//delay 1u
	_delay_ms(1);

	//enable =1
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);

	//delay 1u
	_delay_ms(1);

	//send command
	GPIO_writePort(LCD_DATA_PORT_ID, character);

	//delay 1u
	_delay_ms(1);

	//enable =0
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);

	//delay 1u
	_delay_ms(1);

}

void LCD_init (void)
{
	//RS & Enable output pins
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);

	//Data (DB) output
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);

	//delay 20u
	_delay_ms(20);

	//send command 2 lines
	LCD_SendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

	//send command cursor off
	LCD_SendCommand(LCD_CURSOR_OFF);

	//clear screen
	LCD_SendCommand(LCD_CLEAR_COMMAND);
}

void LCD_string_Display (uint8 * str_ptr)
{
	while (*(str_ptr) != '\0')
	{
		LCD_display_Character(*str_ptr);
		str_ptr++;
	}
}

